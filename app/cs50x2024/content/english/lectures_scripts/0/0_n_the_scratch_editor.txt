So let's actually do this now with some sample programs such that we can actually begin programming using this environment. I'm going to go ahead now and open up a browser here. And in just a moment, you'll see on the screen scratch.MIT.edu itself. So if I go ahead and create by simply clicking up there, we'll see this editor, ultimately, that, by default, has this tutorial that I'm going to go ahead and dismiss. But now we see that same environment. And you'll see that above Scratch here over at top right, there's this green flag and this stop sign. The green flag is what you can click as the human to make the program go. The stop sign will make any program stop. So it turns out among all of these categories here, there's, for instance, some orange ones called Control. There's some yellow ones called Events. And we'll focus on this latter one first. If I go ahead and drag from events this puzzle piece here, this is how I can begin programming. When the green flag is clicked, do the following. What do I want to do? Well, let's have this cat just say hello. And from having used this program before, I know that under Looks, I can go ahead and say something like, say hello. And notice not only does the shape match the orange puzzle piece or yellow puzzle piece, notice that it magnetically wants to snap together, and if I let go, it will. And I'm going to say perhaps one of the most canonical things to say in your very first program, which is just, conventionally, hello world, and leave it at that. I'm going to now go ahead and click the green flag. And voila, our very first program. The same effect. [APPLAUSE] Thank you. Thank you. Very low bar so far, but we'll improve upon this next because this cat is pretty inanimate and is just now saying hello. What if we wanted him to do more than that and say not hello, but hello to me or hello to you? Well, it turns out we can do this a little differently, as well. I'm going to go ahead and throw this away by just dragging it over on the left. And the puzzle piece just goes away. And if I poke around a little further under these blue blocks, for instance, Sensing, there's a bunch of puzzle pieces related to Scratch's environment. And one of those is this one here, ask, what's your name? And wait. But that what's your name expression is in a white box that I can actually change. So you can ask any questions you want, but I'll go ahead and use that default. And now notice also over here in blue is Answer, which is another circular shape which represents what we're going to start calling a variable. That variable is going to store whatever the human types in when asked for his or her name. So what do I want to do when I actually get the person's name? Well, let me go back to Looks. Let me go ahead and say hello. And I'll go ahead and say hello and then another one, say hello again. But instead of this, I want it to say my name. But it would be incorrect to just type my name because then my name is always going to be David no matter who plays this game or is asked the question. So I don't want to do that. If I go instead to Sensing and then drag and drop this puzzle piece, notice this. It wants to magnetically snap in there. And it will grow to fit it. So now I can say hello and then I can say name. So let me go ahead and hit stop and play again. What's your name? I'll go ahead and type in David. Enter. And now David. Huh, I feel like we forgot the hello. This is my first bug. Any thoughts as to why? What did I do wrong? Yeah? AUDIENCE: [INAUDIBLE] DAVID MALAN: Yeah. I mean, I told the computer via this algorithm to do three things, ask what's your name and wait, but then I just say said hello, say answer in such rapid succession. And my God, our Macs and PCs and phones these days are so fast, they're going to do so many things so quickly that it did say hello, it's just none of us really saw it because my name immediately overrode it. So I can fix this in a couple of ways. Let me go ahead and go back to Looks for just a moment, get rid of this puzzle piece, and maybe say hello for two seconds. Then let me go ahead and say my name or the user's name for two seconds as by dragging answer now into here. So that was my first bug in code, so to speak. Let me go ahead and play again, type in David, and now it's hello, David. All right. So better. It's a little weird because you typically don't greet someone by saying hello, David, two seconds later. So what if we kind of combine this expressions and say not hello world, but hello comma David? Well, we can do this in a different way. Let me go back over here and, for instance, get just one of those say blocks like this. I'm not going to worry about saying it for some number of seconds because I'm only going to say one thing now. But I somehow want to say hello comma and then the user's name. Well, if I poke around further, and you would only know this by having seen it before, it turns out there's this puzzle piece down here called Join. And it's a little weird that the default words are apple and banana, but those are just placeholders. If I go ahead and drag this over here, it grows to fill and it overwrites what was there. I can say hello comma and then instead of hello banana, let me go back to Sensing, drag the user's answer, and now we say hello comma so and so. So let's try this now instead. Green flag, type in my name, Enter. Hello comma David. So now the program isn't all that much more complicated, but notice that we're starting to nest these verbs, these functions. We're asking for a name and then we're saying the result of joining the following two things. So there's a few ideas to keep track of at a time. But this is actually quite like what we were doing from the get-go earlier as follows. For instance, if we want to just say hello world with this puzzle piece here, this actually maps perfectly to our fundamental definition of what problem solving is. The input to that puzzle piece is, of course, just hello world. The function or algorithm that you want to execute, step-by-step instructions for saying something, Scratch calls Say in purple, and the output you want, of course, is Scratch saying hello world. Now in the more sophisticated example, consider this. We asked what's your name? And then we waited. Well, that picture would look like this instead. The input to that question is, of course, what's your name? The algorithm, or in this case, function, via which we're solving that problem is to ask and wait, taking in that input. And the output we get back is now answer. And then lastly in that third example, where things got a little fancier and you had to start dragging and dropping and nesting these puzzle pieces, notice that this is the same idea. The input now is two things, hello and answer. Those go into a function called Join, the output of which should be hello comma David. But now we want to pass that output as the input to the Say block so that the final result is hello, David right out of the cat's mouth. So in this way, even with the simplest of puzzle pieces, does everything fit into this same model of problem solving.