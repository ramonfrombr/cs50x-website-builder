Que se passe-t-il ensuite ? Eh bien, la compilation, même si c'est le mot que nous utilisons et que nous continuerons à utiliser pour décrire le passage du code source au code machine, c'est en réalité une étape plus précise que cela. Lorsqu'un ordinateur -- lorsqu'un programme est compilé, il commence techniquement comme ceci après avoir été prétraité -- de nouveau, c'était l'étape 1.

Ce code est ensuite converti par un compilateur, comme Clang, en quelque chose qui semble encore plus effrayant que le C. C'est quelque chose appelé code assembleur, et vous pouvez en fait prendre des cours entiers sur le code assembleur. Et il n'y a pas si longtemps que les humains programmaient manuellement du code qui ressemblait à celui-ci, ce n'était donc pas tout à fait des zéros et des uns. Mais mon Dieu, C semble assez bon maintenant, si c'est la langue alternative de l'époque.

C'est donc un exemple de langage assembleur. Mais même s'il a l'air plutôt obscur, si je surligne en jaune quelques caractéristiques, certaines choses sont familières. Main est ici. Get string est là. Printf est là. Ainsi, lorsque votre code est compilé par Clang, il passe de votre code source en C à ce code assembleur d'étape intermédiaire, et c'est juste un peu plus proche de ce que le processeur, le cerveau de votre ordinateur, comprend réellement.

En fait, maintenant surlignés en jaune sont ce que l'on appelle les instructions. Donc, si vous avez déjà entendu parler d'Intel ou d'AMD ou d'un tas d'entreprises qui fabriquent des processeurs, des unités centrales de traitement, le cerveau d'un ordinateur, ce que ces processeurs comprennent, ce sont ces opérations de très très bas niveau comme celle-ci. Et celles-ci se rapportent au déplacement de choses en mémoire, à la copie de choses, à la lecture de choses et à la mise de choses à l'écran.