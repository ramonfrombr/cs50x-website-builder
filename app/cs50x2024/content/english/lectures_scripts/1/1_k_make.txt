So it turns out that when using the CS50 library, you have to do two things. In your source code, you have to tell the computer to include this file CS50.h, where, again, functions like get_string and the word string are actually implemented for you. But when compiling your code, you need to, somewhat redundantly but for different reasons, tell the computer to add all of the code that the CS50 staff wrote to implement get_string and string and other functions like this. I'm going to go ahead and write Clang -o string string.c, just like before, but I need to tell the computer this special instruction to link it with CS50. And this will make more sense in just a couple of weeks' time. But this is just a -l for link and CS50. And all this tells the computer is this-- the zeros and ones for my actual program are going to come from string.c right here. This is my source code. But CS50 staff, years ago, also wrote code in C in order to give you functions like get_string, in order to give you variables like strings. The zeros and ones from the CS50 library are stored elsewhere in the cloud. They need to be linked in together with yours. So just as your code is in this file, our code is in that file. And so by telling the computer to include it in your source code and to link it in this command is just the arcane way of saying, combine my code with CS50's code into one program that I can actually run. Now, all of this, frankly is very quickly becoming very overwhelming, I think, and very unnecessarily complicated. So there is a better way than this. It turns out, moving forward, if you would like to compile your code, you don't have to remember -o. You don't have to remember -l CS50. You don't have to remember any of those commands, hopefully just the ideas. You can instead say, make me a program called string, and be done with it. All this white output is just automatically generated for you when you tell the computer, make my program. And the program make will figure out what command-line arguments to use, what name to give the file, what libraries or code that other people have written to link in. So henceforth, when you want to compile your program, literally just say make and the name of the program. But it's not make string.c. It's make and the name of the program. Make, this other program, will figure out that you mean something called string.c. And I can rewind and do this for hello, too. Make hello. Oh, I never fixed the problem from before. So let me go into hello.c by opening that file. Let me fix this for posterity. Save this file, or let the file auto save. Now do make hello. And viola, it's done the same thing for me now. Yeah? AUDIENCE: Is make like a standard thing [INAUDIBLE].. DAVID MALAN: Really good question. Is make a standard thing or CS50 specific? It is not a CS50 specific thing. It is a standard tool that exists on Macs and PCs and computers generally running Unix or Linux. And indeed, the sandbox tool that we're using is itself a computer in the cloud, even though it just has these two windows, tabs up top and the terminal window down below. When you log in to CS50 Sandbox, you have access to your own server in the cloud running an operating system called Linux. And Clang and make and other tools we'll see, like ls and rm, all exist in that operating system. They're not at all CS50 specific. Yeah? AUDIENCE: With that, so would hello be machine code, not [INAUDIBLE]?? DAVID MALAN: Correct. Hello is the machine code. Hello.c is the source code. AUDIENCE: So [INAUDIBLE]? DAVID MALAN: Correct. Make is a smart program designed to make our lives easier, no pun intended, whereby if you do make hello, it will look for a file called hello.c. And if it finds it, it will create the program called hello from source code to machine code, respectively. Yeah? AUDIENCE: [INAUDIBLE]. DAVID MALAN: Not exactly. So make is a program that comes with an operating system called Linux, and it also comes with Mac OS. And these days, it also comes with Windows. It is a program that you can run by typing its name, not that you run by double-clicking an icon. Good question. Yeah? AUDIENCE: [INAUDIBLE]? DAVID MALAN: Good question. So does that mean make is stored on your computer or in the cloud-based computer? In the cloud-based computer. So at this point in the semester, and for the first several weeks, everything we do will be in the cloud in a standardized environment called CS50 Sandbox and, soon, something called CS50 Lab. But it's designed to be representative of a standard Linux computer and also a Mac or PC. But the software tends to differ somewhat, so we standardize on Linux, which is a very popular operating system in the software development world.