Alors que pouvons-nous faire avec ces informations ? Et bien, il s'avère que nous pouvons maintenant écrire des programmes qui prennent des mots de l'humain, non pas via get string, mais dans l'invite de commande actuelle. Nous pouvons implémenter des fonctionnalités, comme clang en a. Alors, laissez-moi écrire un programme appelé arg v dans un fichier appelé arg v point c. Laissez-moi inclure la bibliothèque CS50. Laissez-moi inclure standard Io point h. Voila.

Maintenant, laissez-moi faire int main, pas void, int arg c, string arg v, parenthèses ouvrantes. C'est en fait pire que ce que c'était, mais maintenant, c'est utile. Nous allons voir. Et maintenant, je vais faire ceci. Laissez-moi dire si arg c est égal à deux, cela va vouloir dire que l'humain a tapé deux mots à son invite. Et je vais dire ceci,bonjour pourcent s, nouvelle ligne, et ensuite, je vais brancher arg v crochet un, pour des raisons que nous verrons bientôt, sinon si arg c n'est pas égal à deux, je vais coder cela en dur et dire bonjour, monde, barre oblique inverse n. Alors, que suis-je en train de faire ?

J'essaie d'écrire un programme qui permet à l'humain d'écrire son nom dans l'invite de commande, au lieu d'attendre que le programme s'exécute et utilise get string [INAUDIBLE] comme une invite clignotante. Alors, voici ce que je peux faire maintenant, créer arg v. Il compile. Point barre oblique arg v, Entrée. Bonjour, monde. Alors, à quoi est égal arg c lorsque je l'exécute de cette façon ?

DAVID MALAN : Peut-être à un, je veux dire, pas deux au moins, c'est logique. Ce n'est pas deux, car je n'ai pas vu mon propre nom. Alors, si je recommence, cela dira David. Que va-t-il dire, j'espère ? Comme bonjour, virgule, David ? Et effectivement, c'est le cas. Pourquoi ? Eh bien, lorsque vous exécutez un programme que vous avez écrit en C et que vous spécifiez un ou plusieurs mots après le nom de votre programme, on vous remet ces mots dans un tableau, appelé arg v, et on vous dit combien de mots l'humain a tapé dans arg c.

Alors, le programme clang, le programme make, help 50, style 50, check 50, tous les programmes que nous avons vus jusqu'à présent qui prennent des mots après les noms de programme, sont littéralement implémentés avec un code dont l'esprit est similaire à celui-ci. Certains programmeurs ont vérifié oh, l'humain a-t-il tapé des mots ? Si c'est le cas, peut-être que je veux générer un nom différent d'un point out. Peut-être que je veux générer le nom bonjour. Lorsque vous exécutez make quelque chose, alors que voulez-vous faire ? C'est un argument de ligne de commande pour lequel le programmeur humain a vérifié arg v afin de savoir quel programme vous souhaitez créer.

C'est donc une idée simple, même si la syntaxe est certes assez moche. Mais c'est la même idée. Et les deux seules formes alors, pour main et pour progresser sont soit cette nouvelle, qui vous permet d'accepter des arguments de ligne de commande, soit l'ancienne, où vous savez à l'avance que je n'ai pas besoin d'arguments de ligne de commande. C'est à vous de choisir laquelle utiliser, si vous voulez vraiment accepter des arguments de ligne de commande.