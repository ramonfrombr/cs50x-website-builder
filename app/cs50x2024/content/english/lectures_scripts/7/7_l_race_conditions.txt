So there's got to be some problems or some prices paid. So let's consider just a couple of those. So what problems actually arise when using a SQL database like this? Well, the first is what's called a race condition. And perhaps the best way to explain this is by way of a-- sort of a story that I was told when I took a class like this years ago in a class called CS161, Operating Systems. 

So contrived scenario, but consider this. You and your roommates have a fridge in your dorm room, and you and your roommate really like milk. And one of you comes home one day, opens the fridge, and sees, oh, dammit, we're out of milk. And so you close the fridge and you walk into Harvard Square and you head to CVS or some other such store. Meanwhile, your other roommate comes home, opens the fridge, really wants some milk, but, oh, darn it, we're out of milk. So they close the fridge, walk outside, and head to some other store that sells milk, and for reasons that we're contriving, don't bump into you at CVS. A few minutes later, you both get home, of course, having bought some milk. But of course, milk doesn't last that long, so now you've got twice as much milk, and surely some of it's going to go bad. Like horrible, horrible problem. 

Why, right? It's contrived, but this-- fond memories of when it was taught to me. So what is the fundamental problem here, if you put your finger on it? Both you and your roommate were allowed to inspect the state of that refrigerator without knowing that the other was about to do the same. Better would have been for one of you to leave a note on the fridge saying, gone for milk, so that the other person doesn't do it as well. Or more stringently, just lock the refrigerator so that no one else besides you can see inside of it until you have updated the state of that refrigerator. 

So this comes into play all too often these days when dealing with really large data sets. The Twitters of the world, the Instagrams of the world, all of you are probably in the habit of liking or uploading posts on those sites or some other. But if a lot of other people are, too, especially when things go viral, there might be code like this underneath the hood that essentially does the following. Here's three lines of representative Python code that use SQL. The first line here selects the number of likes from a table called posts where the ID of the post is something, a variable called ID, 1, 2, 3, 4, 5. That just tells me, what is the total number of likes this post has? Then, I store that answer in a variable using likes. And you'll see this syntax in problem set 7 as you begin to play with SQL yourself in the CS50 library. 

Suppose that your third line of code is to then update posts, setting likes equal to some place holder, where that place holder is going to be likes plus 1. This is the same problem as the milk example, because if you check how many likes there are on this post, or your roommate checks how-- or if you check how much milk is available left in the fridge and then go off and begin to make a decision like buying milk, your roommate might, on a server that's running the same code to handle thousands and thousands of people, might ask that same question. How many likes does this current post have? Suppose the post has a million likes. Both of you execute that first line of code, see that, oh, I have a million likes. I've just clicked plus 1 on the site. And so you try changing the number of likes with this second update query to 1 million plus 1. 

But if both of you have been making a decision that gets interleaved with the other person, as will absolutely happen with Instagram and Twitter, who have thousands of servers all operating in parallel, instead of changing the number of likes from 1 million to 1,000,002, you might change it both of you to 1,000,001, thereby wasting one of the counts, because it gets lost, because you inspected the state of the fridge or the likes. You made a decision. And then you updated it based on that decision without realizing that life changed in between. Your roommate got home and checked the fridge, too, or someone else clicked the upvote. 

So this is a bad situation, but there are solutions in SQL that we won't look at this week, but what are known as transactions. That is a solvable problem, and more on that in a higher level database class.