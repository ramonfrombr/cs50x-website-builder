So all right. So we've covered integers. What's next? Chars. So chars are used for variables that will store single characters. Char is short for character. And sometimes you might hear people pronounce it as car. So characters always take up one byte of memory, which is just 8 bits. So this means that they can only fit values in the range of negative 2 to the seventh power, or negative 128, to 2 to the 7th power minus 1, or 127. Thanks to ASCII, it was long ago decided a way to map those positive numbers from 0 to 127 to various characters that all exist on our keyboard. So as we'll see later on in the course, and you'll probably come to memorize at some point, capital A, for example-- the character capital A-- maps to the number 65. And the reason for that is because that's what's it's been assigned by the ASCII standard. Lowercase A is 97. The character 0 for when you actually type the character, not representing the number zero, is 48. You'll learn a couple of these as you go. And you'll certainly come to need them a little bit later in CS50. 

The next major data type is floating point numbers. So floating point numbers are also known as real numbers. They're basically numbers that have a decimal point in them. Floating point values like integers are also contained within 4 bytes of memory. Now there's no chart here. There's no number line, because describing the range of a float isn't exactly clear or intuitive. Suffice it to say you have 32 bits to work with. And if you have a number like pi, which has an integer part 3, and a floating point part, or decimal part 0.14159, and so on, you need to be able to represent all of it-- the integer part and the decimal part. So what do you think that might mean? One thing is that if the decimal part gets longer and longer, if I have a very large integer part, I might not be able to be as precise with the decimal part. And that's really the limitation of a float. Floats have a precision problem. We only have 32 bits to work with, so we can only be so precise with our decimal part. We can't necessarily have a decimal part precise to 100 or 200 digits, because we only have 32 bits to work with. So that's a limitation of a float. Now fortunately there's another data type called double, which somewhat deals with this problem. Doubles, like floats, are also used to store real numbers, or floating point values. The difference is that doubles are double precision. They can fit 64 bits of data, or eight bytes. What does that mean? Well, it means we can be a lot more precise with the decimal point. Instead of having pi to seven places maybe, with a float, we can maybe have it to 30 places. If that's important, you might want to use a double instead of a float. Basically, if you're working on anything where having a really long decimal place and a lot of precision is important, you probably want to use a double overfloat. Now for most of your work in CS50, a float should suffice. But do know that doubles exist as a way to somewhat deal with the precision problem by giving you an extra 32 bits to work with for your numbers. 

Now this is not a data type. This is a type. And it's called void. And I'm talking about it here because we've probably seen it a few times already in CS50. And you might be wondering what it's all about. So void is a type. It does exist. But it is not a data type. We can't create a variable of type void and assign a value to it. But functions, for example, can have a void return type. Basically, if you see a function that has a void return type, it means it doesn't return a value. Can you think of a common function that we've used so far in CS50 that doesn't return a value? Printf is one. Printf does not actually return anything to you. It prints something to the screen, and it's basically a side effect of what printf does. But it doesn't give you a value back. You don't capture the result and store it in some variable to use it later on. It just prints something to the screen and you're done. So we say that printf is a void function. It returns nothing. The perimeter list of a function can also be void. And you've also seen that quite a bit in CS50 too. Int main void. Does that ring a bell? Basically what that means is that main doesn't take any parameters. There's no argument that get passed into main. Now later on we'll see that there is a way to pass arguments into main, but so far what we've seen is int main void. Main just doesn't take any arguments. And so we specify that by saying void. We're just being very explicit about the fact that it doesn't take any arguments. So for now, suffice it to say that void basically should just serve as a placeholder for you as thinking about as nothing. It's not really doing anything. There's no return value here. There's no parameters here. It's void. It's a little more complex than that. But this should suffice for the better part of the course. And hopefully now you have a little bit more of a concept of what void is. 



