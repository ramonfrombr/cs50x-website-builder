All right, let's consider another example. This was called what in Scratch? Yeah, a condition, a decision that you have to make. So if something is true, then do this. In C, we might convert it as follows. If x less than y in parentheses-- which isn't quite the angled shape that we have here in green, but in C, you use parentheses here. So if x is less than y, open paren, close paren, then go ahead and do the following. And just as this yellow or orange puzzle piece kind of looks like it's hugging the purple puzzle piece, so does this open curly brace and this close curly brace, so to speak, is kind of there ready to hug or encapsulate one or more lines of code. What's the line of code? It might be something like this-- printf x is less than y backslash n. So, again, new syntax, but we've seen the curly braces before in the context of main. And we've seen parentheses before in the context of inputs. So this is just kind of a pattern that we'll start to follow in C whenever we want to do something conditionally. OK, in Scratch, we saw something like this-- if x is less than y, then say x is less than y. Else, conclude that x is not less than y. In C, it almost looks the same, but you set yourself up with an else block with two sets of curly braces, sort of two characters ready to hug the lines of code in between them. And we can just plug in now, literally, the translations to printf by saying printf x is less than y or printf x is not less than y. Now, notice, there's only two semicolons in this example. You generally do not end things like conditions with semicolons. You end functions or lines involving functions with semicolons. And that's not a hard, fast rule, but you don't want lines of code-- you don't want semicolons after every line of code. You generally want it after some action. And you'll start to notice this pattern, even though it's perhaps not obvious at first. All right, how about this one? If, else if, else if. Now, notice we're just kind of reusing the if-else if block and then another if block down here. Turns out in C, it's almost a little easier. You can literally just say this-- if x is less than y, do this with curly braces. Else, if x is greater than y, do this in curly braces. Else, if x equals equals y, do this in curly braces. And what do you want to do in each case? Different printf's based on the say messages that we want to display. But there's one curiosity here. Almost looks like a typo. Yeah, the double equal sign. But it's not a bug. It's not a mistake. Why am I perhaps using double equals here instead of a single equal sign, like in Scratch? Let me go over here. Yeah? AUDIENCE: [INAUDIBLE]. DAVID MALAN: Exactly. I said earlier that the single equals sign is used for assignment from right to left. And honestly, this is just kind of a human situation, where we painted ourselves into a corner. We already use the equals sign for assignment. Then, presumably, some human realized, oh, shoot, how do we ask the question, is this equal to that? Well, we've already used that symbol. So humans, decades ago, decided, all right, we'll solve that problem by just using two equals signs back to back. So this is the so-called equality operator. A single equals sign is just the assignment. This is, hands down, one of the most common mistakes to make early on, especially if you use Scratch or other languages beforehand. And you just get to develop the muscle memory over time. Once you make that mistake a few times, it'll go away. All right, but it turns out that this program, while arguably correct-- or this code, while correct, in that it's going to do this or this or that-- and I do think those are the three possible situations. If you've got two integers, x and y, x is either less than y, greater than y, or equal to y. But one of these questions technically doesn't need to be asked. There's technically three Boolean expressions here, right-- x less than y, x greater than y, x equals equals y. A Boolean expression, recall, is a question that it has a yes/no answer or a true/false answer or a 1/0 answer. But I don't need to ask three questions here, do I? I think I saw your hand. Why not? AUDIENCE: Well, because if x is less than [INAUDIBLE].. DAVID MALAN: Exactly. This third question, this Boolean expression, does x equal equal y, goes without saying logically. Because if x is not less than and it's not greater than, if it's just [INAUDIBLE] the only other scenario I can think of is that it equals y. So we can actually simplify both the Scratch code and the C code by just having this else condition down below, as well. So we'll talk, over the next several weeks, about different qualities of code. Correctness, like does it do what it's supposed to do, but also the quality of design, like did you write this code as efficiently as possible, as quickly as possible, in a way that uses the least amount of memory and the least amount of CPU, the brains of the computer? And this is just an allusion to that kind of capability.