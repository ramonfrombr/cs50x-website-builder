So what can we do with this information? Well it turns out, we can now write programs that take words from the human, not via get string, but at the actual command prompt. We can implement features, like clang has. So let me go ahead and write a program called arg v in a file called arg v dot c. Let me go ahead include the CS50 library. Let me go ahead and include standard Io dot h. Voila. 

Now let me go ahead and do int main not void, int arg c, string arg v, open brackets. So it's actually worse than it has been, but now it's useful. We'll see. And now I'm going to go ahead and do this. Let me go ahead and say if arg c equals two, that's going to mean that the human has typed two words at their prompt. And I'm going to go ahead and say this, hello percent s, new line, and then I'm going to plug in arg v bracket one, for reasons we'll soon see, else if arg c does not equal two, I'm just going to hard code this and say hello, world, backslash n. So what am I doing? 

I'm trying to write a program that allows the human now to write their name at the command prompt, instead of waiting for the program to run and use get string [INAUDIBLE] like a blinking prompt. So what I can do now is this, make arg v. It compiles. Dot slash arg v, Enter. Hello, world. So presumably, what does arg c equal when I run it in that way? 

DAVID MALAN: Maybe one-- I mean, not two, at least, it stands to reason. It's not two, because I didn't see my own name. So if I go ahead and rerun it now, it would say David. What's it going to say, hopefully? Like, hello comma David? And indeed, it does. Why? Well when you run a program that you have written in C and you specify one or more words after your program's name, you are handed those words in an array, called arg v, and you are told how many words the human typed in arg c. 

So the clang program, the make program, help 50, style 50, check 50, all of the programs we've seen thus far that take words after the program's names, literally are implemented with code that's similar in spirit to this. Some programmer checked oh, did the human type any words? If so, maybe I want to output a different name than a dot out. Maybe I want to output the name hello. When you run make something, well what do you want to make? That's a command line argument that the human programmer checked arg v for to know what program it is you want to make. 

So it's a simple idea, even though the syntax is admittedly pretty ugly. But it's the same idea. And the only two forms then, for main moving forward are either this new one, which lets you accept command line arguments, or the old one, which is when you know in advance I don't need any command line arguments. It's entirely up to you which to use, if you actually want to accept command line arguments.