Voici un pseudo-code. Et il n'existe pas de définition officielle de cette notion. Le pseudo-code est une syntaxe de type code que vous écrivez en anglais ou dans votre propre langue parlée qui représente vos idées, mais de manière succincte. Et donc, je pourrais proposer que cet algorithme pour trouver Mike Smith soit écrit dans une syntaxe de type pseudo-code anglais comme suit. Étape 1 : prendre l'annuaire téléphonique, ce qui était en effet la première chose que j'ai faite. Étape 2 : ouvrir l'annuaire téléphonique par le milieu, ce qui est la chose suivante que j'ai faite. L'étape 3 pourrait consister à regarder la page pour voir si quelqu'un s'y trouve et si Smith est sur cette page, que dois-je faire ? Eh bien, mon code va maintenant paraître un peu différent, et je vais délibérément indenter pour indiquer clairement qu'il y a une dépendance de quelque sorte ici. Je vais aller de l'avant et à l'étape 5 et appeler Mike uniquement si la ligne 4 est vraie, c'est-à-dire s'il est sur la page. Sinon, si Smith est plus tôt dans le livre, à gauche pour ainsi dire, je vais aller de l'avant et ouvrir le milieu de la moitié gauche du livre, et qu'est-ce que je vais probablement vouloir faire ensuite ? AUDIENCE : [INAUDIBLE] DAVID MALAN : Donc, oui, ça, finalement. Comment est-ce que je refais ça encore et encore ? Eh bien, j'ai déjà du code, si l'on veut, à la ligne 3 qui fait cela. Regarder la page, puis prendre la décision d'aller à gauche ou à droite. Donc, je dirai simplement de revenir à la ligne 3 après être allé au milieu de la moitié gauche du livre si Smith est effectivement plus tôt dans le livre. L'autre scénario, bien sûr, est l'inverse. Donc, sinon, si Smith est plus tard dans le livre, ouvrons le milieu de la moitié droite du livre, puis allons à la ligne 3. Sinon, il existe un quatrième scénario ou cas possible. Que pourrait-il arriver d'autre dans cet algorithme ? AUDIENCE : [INAUDIBLE] DAVID MALAN : Il n'est pas là. Et donc, je veux probablement anticiper cela et simplement dire quitter si, en effet, il n'est pas sur la page, à gauche de la page ou à droite de la page. Il existe donc une manière d'exprimer ce pseudo-code, bien que ce soit maintenant uniquement dans cette syntaxe de type anglais. Mais dans cette seule syntaxe, il y a des points communs, des caractéristiques que nous allons voir au cours des prochaines semaines non seulement en pseudo-code, mais aussi dans un langage appelé Scratch, un langage appelé C, un langage appelé Python et plus encore. Il existe certaines constructions en programmation, en programmation procédurale, pour ainsi dire, qui vont être communes à tous ces langages. Surlignés en jaune ici sont ce que, dorénavant, aujourd'hui et à l'avenir, nous appellerons simplement des fonctions. Ce sont des verbes ou des actions qui indiquent simplement à l'ordinateur, ou dans ce cas, à l'humain, ce qu'il doit faire. Ce sont donc des fonctions. Maintenant, surlignés en jaune à la place sont ce que nous allons appeler des conditions. Ce sont des branches, une sorte de bifurcations dans la route qui vous permettent soit de faire ceci, soit de faire cela, ou peut-être cette autre chose également. Mais pour prendre ces décisions, vous devez vous poser une question. Et ces questions, en informatique, sont appelées des expressions booléennes, d'après le nom d'un mathématicien nommé Boole. Et une expression booléenne, maintenant surlignée en jaune, est simplement une question qui a des réponses oui ou non ou, si vous voulez, des réponses vrai ou faux ou, diable, maintenant que nous connaissons le binaire, des réponses un ou zéro. Donc, même dans le code, nous voyons un indice de la raison pour laquelle les uns et les zéros sont utiles. Enfin, il y a cette chose ici. Revenir à la ligne 3. Nous l'avons utilisée à deux endroits. Cela fait référence à quelque chose que nous appellerons une boucle. C'est un cycle qui fait quelque chose encore et encore.