[MUSIC PLAYING] DAVID MALAN: All right, this is CS50, and this is a very exciting day, because today we're going to learn a new language. And that's not something that you can say happens to you every day. And this language is going to look a little something like this. Today, we introduce C-- a very traditional, a very old language that's purely text-based, but it can do everything that you can do in Scratch and even more, but without the user friendliness that we're now used to over the past few days. However, even though this might look quite cryptic to you at first glance, even though there's some English or English-like words in there, rest assured that within a few days, certainly within a few weeks, you'll be able to understand every character on the screen, every line of code, and much more. But I dare say that any course like this can be a little daunting, especially if you have no prior experience. But recall from last week, that is, indeed, the norm, the common case. 2/3 of CS50 students-- perhaps yourself among them-- have never taken a CS course before. So what looks like this today, realize, will feel exactly like this ultimately. Indeed, even though the code is going to look different-- whoops. Even though the code is going to look different, the ideas today are going to be absolutely the same as this past week in Scratch. We'll look at functions and conditions and Boolean expressions, loops, and other features along the way. But I'm perhaps reminded of this wonderful hack from MIT back in 1991, an expression that MIT is that getting an education from MIT is like taking a drink from a fire hose. And in the spirit of MIT hacks, as they're called, some students wired up an actual fire hose to an actual water fountain with a sign on the wall that says exactly that. And this is the kind of course, as with many introductory courses, where it feels like you're really getting hit in the face with way more information, way more ideas than you can possibly take down all at once. But realize that you'll be able to absorb all the more material over time. And the goal of the class, ultimately, is to present you with as many concepts and practical skills as might prove useful later on. And so realize by end of semester will this feel much less like this and much more like something you have succeeded at. So without further ado, let's go about introducing this language called C. So on the left here, recall that this was maybe the simplest program we could write in Scratch. And all this program did was compel a cat, or any sprite, to say hello on the screen. Today, to achieve that same result, we're going to start writing code that looks like this, using a keyboard only-- fewer graphical user controls. But let's see why the left is actually equivalent to the right. So let's break it down into, say, this single puzzle piece. This, of course, did what to the-- this represented what in the context of a Scratch program? What was the role of this puzzle piece? AUDIENCE: Like starting things. DAVID MALAN: Yeah, for starting things. So for the main part of your program to kick off, you have to attach it to this one green flag clicked puzzle piece. And we're going to see in C that it's not nearly as straightforward. But it's something that you can just kind of copy/paste for now. And within a few days will this make more sense character by character. Int main void and then this open curly braces, it's called followed, by this closed curly brace suggests that all of the code that we're going to write today onward is going to go between those two curly braces as opposed to underneath a puzzle piece like this. So even though this won't make perfect sense today or for a few days, realize that it is functionally equivalent to just saying when the green flag is clicked, here is the main part of my program. Now, what might a program actually do for you? Well, you might have something like say "hello world" in Scratch that just literally prints that on the screen. So let's consider how you would implement this in C, C being a text-based or keyboard-based language. Well, there isn't a verb or a function called say in C. Instead, it's called print, or not quite print. It's actually called printf, where the f stands for formatted so that you can print formatted text, as we'll soon see. Then, you go ahead and put, next to printf, two parentheses-- an open parenthesis and a close parenthesis. And that's kind of reminiscent of this oval shape in which we were previously putting input into in the first place. And the input we provided last week was to just say, hello world. So literally, in C, you're going to write "hello world" in between those two parentheses. But C is a little more nit-picky. You can't just start writing words in between parentheses. Anytime you have characters or words or sentences or phrases, you need to actually encapsulate that text with double quotes, as in this case. So you just have to surround whatever it is you want to say or print with double quotes here. And the last thing with C that's so easy to forget early on, as you undoubtedly will, is that you need to finish your thought. So just like in an English essay, you typically end a sentence with a period, so in C do you finish your thought. But not with a period, but with a semicolon, generally at the end of a line of code. But we'll see which types of lines of code require this. So on the left, we have an idea from last week. On the right, we have an idea from this week, as we'll soon see on my computer, but they are functionally equivalent. They do the same thing. So how do we go about, then, getting from this Scratch program to this Scratch program? Let's go ahead and point out one last thing. We need one last line of code, which I just popped up on the screen, which is to include stdio.h. Well, what does that mean? It turns out that Scratch is super user friendly. You've got all of those colorful categories of puzzle pieces on the left, and they're just available to you right from the moment you start using Scratch. In C, when you want to use some function-- or some puzzle piece, if you will-- you have to typically tell the computer in advance where that function is implemented, where it was saved. And this is going to be the admittedly cryptic syntax for saying, hey, computer, look in a file that we're going to start calling stdio.h, whatever that means, in order to access this function. So, again, that's a huge mouthful. That's the first of the fire hoses today. But the important line of code for today's purposes really is going to be this one down in the middle.