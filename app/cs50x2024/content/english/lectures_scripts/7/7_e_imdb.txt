So we'll come back today, talking about matters of security, as well. So any questions before, now, we take things up a notch and look at a much more massive than our hundreds of favorites here? Is that a question there? Yeah. 

AUDIENCE: [INAUDIBLE] 

DAVID MALAN: Did not look like Friends got removed. Oh, interesting. You are right. Let's try a little harder. LIKE "%friends%". Better? Now they're gone. So I'm guessing-- I would have to look closer at the data, but I'm guessing one or more people typed it with a slightly different capitalization, or maybe they hit a spacebar character or something, where I wasn't doing a precise match, thereby making the LIKE operator a more robust fix. 

However, let's consider for just a moment. What might the gotcha here be? Like, this feels like a nice quick and dirty fix, but it really is quick and dirty in what sense? 

AUDIENCE: Like, if you have another TV show that has the word friend in it, but not Friends, [INAUDIBLE]. 

DAVID MALAN: Yeah, there might be another show with the word "friends" in it. Quite reasonable. And I just blew those away as well from my database. And in fact, we can probably see this for real. If I go ahead and look at, for instance-- let me go into a browser here, IMDB.com, super popular website for just getting movie reviews or information about movies. Let me go ahead and search for friends. And yes, the most popular hit seems to be the 1994 version of Friends, but there's Friends with Benefits. There's Just Friends, We Are Your Friends, My Best Friend's Wedding, Fisherman's Friends, and so forth. Some of those movies, some of those TV shows. And had we poked a little further among our own data of hundreds of rows, maybe some of you did have some of those shows as your favorites as well. So beware that, too. 

So in preparing for today, we wanted to play with an even juicier data set then one we could generate for ourselves. And wonderfully, IMDB makes a lot of their database available for download as TSV files, Tab-Separated Values. It's really no fundamentally different from Comma Separated Values. One human at IMDB just decided to use tabs to separate their values instead of commas. 

And if you read through this page here, you'll see that they let you download a bunch of different files, one of which will focus on, initially, specifically on title.basics.tsv.gz. So that's a mouthful, but this is just saying this is basic information about titles in their database. Gz means it's G-zipped, which is like Zip. If you're familiar, on a Mac or PC, it's just another way of compressing information, but you can unzip that on a computer as well. Dot TSV means Tab-Separated Values. 

Now, we read in advance the information here, but let me summarize it as follows. There's some juicy information in that file. And I'm going to go ahead and download this file over here. If I click a link on IMDB's website, I'll see a file called title.basics.tsv.gz. I'm going to go ahead and let that download in the background. It looks like it is 100-plus megabytes. If I click on it on my Mac, it's going to decompress it. And you'll see here, this apparently is 532 megabytes once it's decompressed. So that's way bigger than the CSV file I downloaded from Google a few minutes ago, which is 24 kilobytes, 24,000 bytes. This is 532 million bytes. So it's an order of magnitude bigger, which means our design decisions today are really going to matter. 

Now, if we take a look inside of this file, we'll see a bunch of interesting fields. And I've essentially summarized this from their own online documentation. There's these five fields that are of interest right now, and we'll tease these apart now. So tconst, I didn't recognize that. It's an IMDB-specific term, it seems, but it means some kind of title constant. It's a unique identifier for every movie in the database. So for instance, one of the movies in that TSV file, which I'll open up in a moment, has the unique value tt4786824. Why? Just because. 

But it turns out we can actually see what this is. Let me actually grab that value and go to IMDB.com/title/tt4786824. Enter. These actually do have significance. That is the unique identifier for The Crown, popular hit TV show that you can now watch on Netflix. 

So if you go back to the actual field-- that's how I spent the summer. So if you go back to the fields here, we have not only tconst, which uniquely identifies the film, we also have title type. So it turns out in this 500 megabyte file, there's huge amounts of information on movies, TV series, documentaries, shorts, way more data than we could possibly play with in one day. So we'll focus just on TV series, like this, the show The Crown. 

Primary title is the name in the file that is given to the primary title of the show. Sometimes shows apparently have different titles in different geographies or communities, so the primary title is the one that most people know it by. Start year is the year for a TV show that-- in which that TV show began. The Crown came out first in 2016. And genres, a little weirdly, is a comma-separated list of genres into which that show falls. And I say it's a little weird, because we do have a TSV file, but they're using commas inside. So this is probably among the motivations for having used tabs in-- to separate all of the columns, because they want to use commas for some other purpose here. But it's a little messy. This is actually not necessarily the best design decision here. 

So what can we go ahead and do with all of this data here? So let's go ahead and start to grab some of this data and write some scripts involving it. But let me issue a disclaimer. It turns out when you have a lot of data in a database, it can take quite a long time to analyze it or parse it. And so if you ever watch certain baking shows like Julia Child from down the road here in Cambridge, very often there would be some TV magic whereby someone mixes the cake mix and puts it into the oven, and then two minutes later, voila, it comes out. That's because some of the scripts we'll write today might actually take many minutes to run, but we'll go ahead and run them in the backgrounds, and I'll use the outputs that I've created here in advance. 

So how do we go about beginning to navigate this data set? Well, first of all, let me go ahead and just open this file. And I'm going to use my own terminal window here. This file was called titles.basics.tsv. Notice that even in my program here, it took a moment to open, but this is what it looks like. It's a little cryptic at first glance, but notice the first row is the headers of the file. So we've got tconst and title type and primary title and so forth. Then every row thereafter seems to start with one of those unique identifiers, and they seem to be monotonically increasing, 1, 2, 3, 4, but they start with tt then some number of digits. 

Then you see that these are a bunch of shorts, so short films or the like. And if we kept scrolling, we'd see some other values. Here's the first movie in the database. And if we keep scrolling and scrolling and scrolling, we'll see more. So if actually I use my text editor here and search for literally the word The Crown, it's going to take a little while to get to, because there's a bunch of shows apparently called The Crown or Crowning or something. But you know what'll be faster? Let me go ahead and search for-- what was it? If I go back to tt4786824, Enter, it takes a moment to find this because it's searching through hundreds of megabytes, but voila, down here is this tconst, TV series type. It's called The Crown. In another geography it's called also The Crown, 2016, and so forth. 

So that's a huge amount of data. In fact, how much data? Well, if I actually analyze this with a command on my computer, there are 6,267,469 shows in the world, be it TV or movies or documentaries or the like. That's a huge data set. So suppose I want to focus really just on a subset of that data. What can I go about using instead? 

Well, let me go ahead and open up, for instance, the same file, but let me try putting it in CS50 IDE. I'm going to go ahead and download this, as you might have downloaded past problem sets, with wget. That's going to give me a pretty big file. There's a command now that you've not had occasion to use in the IDE called gunzip, which will unzip a file that starts with-- that ends with .gz. That's going to take a moment to unzip the whole file. A moment, a moment, a moment, OK. [CHUCKLES] And no space left on disk. 

But that's OK, because it turns out what I'm also going to start doing today is using my own Mac a bit more. And you'll recall last week, I did that a little bit, because when I wanted to play with speech recognition in my microphone, it's a lot easier to have Python running on my Mac or your PC if I want to use hardware built into my computer. Plus my MacBook, is a lot faster, for instance, than a single cloud account on a shared server. So I'll go ahead and write some of this code here on my own machine instead.