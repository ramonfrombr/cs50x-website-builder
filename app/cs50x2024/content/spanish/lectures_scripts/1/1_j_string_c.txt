Muy bien, pasemos a otras funciones que también podemos implementar, como una implementación del mismo programa que acabo de tener. Cerraré este archivo y crearé uno nuevo llamado, por ejemplo, string.c, porque ahora estoy experimentando con cadenas. Voy a empezar como antes: incluir stdio.h int main void. Luego diré string answer = get_string, comillas, cuál es tu nombre, signo de interrogación, barra invertida n, punto y coma. Aparte, todo lo que escriba en el teclado hoy lo publicaremos más tarde en el sitio web del curso. Así que no es necesario que escribas cada pequeño carácter si no lo deseas. Luego escribiré printf, comillas, hola answer. No answer, porque dijimos que eso estaba mal. Eso diría literalmente answer. Quiero usar un marcador de posición, %s. Ahora barra invertida n, coma, answer, punto y coma. Creo que he transcrito el código de la diapositiva a mi entorno de programación en un archivo llamado string.c. Alejaré la imagen. Si quiero compilar este programa, convertirlo de código fuente a código máquina, ¿qué comando puedo escribir aquí? Clang. String.c. Pero eso me dará un programa llamado a.out, de forma predeterminada, lo cual no es muy útil. Así que escribiré -o string, para que mi programa se llame string. Pero podría llamarlo como quisiera. Podría llamarlo program two, si lo prefiero. Voy a pulsar Intro. Oh, Dios mío, hay más errores que líneas de código, lo cual es un poco preocupante. Este segundo nivel es donde deberías encontrar algo de consuelo porque significa que la computadora se ha confundido, ¿verdad? No eres tan malo programando como para generar más errores que líneas de código que has escrito tú mismo. Es solo que la computadora se confundió mucho en algún momento y empieza a tropezar consigo misma, por así decirlo, conceptualmente. No sabe dónde está el error, así que empieza a malinterpretar el código correcto como código incorrecto. Así que siempre hay que empezar por el primer mensaje de error. Verás que ya me he desplazado hasta el comando que escribí, que está aquí, como he resaltado. Céntrate en el primer error que veas, y tal vez los demás sean solo errores fantasma, confusión que surgió en su lugar. Voy a acercar esta parte de la pantalla y ver si podemos diagnosticar este problema. El comando que ejecuté fue Clang -o string string.c. Eso solo significa que mi entrada es mi código fuente en string.c. Quiero que mi salida sea código máquina en un archivo llamado string. Muy bien, string.c línea 5 es donde comienza el error, por lo que parece ser una ubicación familiar. Uso de un identificador no declarado string. ¿Quería -- anticipación -- stdin? No, no lo hice. En este caso, me refería a string. Aquí también la computadora se ha confundido, e incluso su mensaje de ayuda verde no es realmente útil. No, quiero una cadena. No quiero n estándar. Pero la razón de esto es que técnicamente, al menos en este punto de la historia, no existe la cadena, S-T-R-I-N-G en C. Eso es en realidad una especie de rueda de entrenamiento que vamos a usar solo un par de semanas hasta que, a tu pregunta anterior, mostremos lo que realmente está pasando bajo el capó de la computadora, por así decirlo, cuando se trata de implementar una cadena. Así que string es algo que el curso CS50 te proporciona en un archivo llamado CS50.h. Así que así como hay un archivo llamado estándar I/O, donde I/O solo significa entrada/salida, como imprimir y obtener entrada. Así como hay un archivo llamado stdio.h, en el que se inventó printf, todas estas otras funciones que podría usar en este programa, como get_string, están almacenadas en un archivo llamado CS50.h. Mi problema surgió hace un momento al compilar este código, porque la computadora no tenía ni idea de lo que es una cadena. Y no tiene ni idea de cuál es la función get_string. Así que voy a volver a compilar esto ahora. Voy a hacer Clang -o string string.c y acercar la imagen. Aquí vamos. Enter. OK, progreso. Todavía hay un error. Todavía hay un error, porque el rojo no puede significar nada bueno en este contexto. Y, de hecho, es un error. Pero son muchos menos errores. Así que esa es la última parte de los comandos que necesitamos introducir ahora. Observa lo que dice el mensaje de error. Así que después de ejecutar Clang -o string string.c, todavía hay un problema en mi función main. ¿Cuál es el problema? Referencia indefinida a get_string.