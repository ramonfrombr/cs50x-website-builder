But let me make one refinement. And I'm going to jump ahead to what I called in the online examples cough3.c. It turns out your own custom functions can take input. This word void means that it takes no input. And this word void means it returns no value, like get_int and get_string hand you back something. That's not applicable now, but we'll come back to that in a week or two's time. Suppose that you wanted to make the cough function more versatile such that it will cough any number of times for you. You know what you can do, is this. You can change the input to cough function to be some value like n, and you can then do something like this-- for int i get 0. i is less than n, so not hardcoded anymore. i plus plus. And then inside of your curly braces, you can print this cough line. So now, notice, cough has been parameterized. It now takes input of integer called n, and it uses that input, n, just like you could have done in Scratch, to do something n times-- not once, not three times, but a variable number of times. I have to change my first line here. This is called a prototype. This one-liner is what's called a prototype, and it's just copy/paste from your actual function. But now notice what I can do. My main function, again, is the essence of my program. It's a little convoluted right now. Wouldn't it be nicer if I could just say cough three times? And indeed, now I don't need to know or care how coughing is implemented. That's a well-designed program, arguably. It's one line of code. It's descriptive. It says cough. It takes an input, which means it costs three times. And what's down below in the file, though I could certainly bring it back up, is just what a computer scientist would call an implementation detail. Someone cares how you implement coughing, but you don't have to care how you implement coughing. You don't have to how we get integers. You don't have to care about how you printf. You just care that someone else has implemented that functionality so you can stand on their shoulders and build more interesting programs that are actually interesting to you.