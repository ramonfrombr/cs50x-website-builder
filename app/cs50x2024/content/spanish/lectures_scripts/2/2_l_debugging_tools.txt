Bien, prosigamos y hagamos esto después de presentar otro comando que existe en el IDE que se llama debug 50. Bastará decir que cualquier comando de este semestre que termine en 50 es una especie de rueda de entrenamiento específica de CS50. Pero al final del término, bueno, esencialmente habremos eliminado todas esas herramientas específicas de CS50 para que todo lo que uses sea un estándar de la industria, por así decirlo. Así que si miramos ahora el IDE de CS50, prosigamos y quizás ejecutemos el mismo programa.

Entonces, si hago clic en este ícono de carpeta aquí arriba, verás un montón de archivos, como en la zona de pruebas. Y he descargado previamente todo el código fuente de hoy del sitio web de CS50 y lo acabo de cargar en el IDE, tal como puedes hacerlo en la zona de pruebas. Y lo haremos en la sección o en la súper sección, manualmente, si así lo deseas. Voy a seguir adelante y abrir ese mismo programa, el buggy two, que ahora está en el IDE en lugar de la zona de pruebas, y verás que se ve casi igual.

El código de colores puede ser un poco diferente, pero eso es solo un detalle estético. Y aún puedo ejecutar esto. Hacer buggy two aquí abajo. Pero fíjate aquí, este error, podría usar help 50 para esto, pero observa de antemano, he descargado todo mi código en una carpeta llamada source two. Eso es lo que está en el archivo zip, en el sitio web del curso. Entonces, nuevamente, tal como lo hicimos brevemente la semana pasada, si sabes que tu código no solo está en la ubicación predeterminada, sino que está en otro directorio, ¿qué significa cd?

AUDIENCIA: Cambiar directorio.

DAVID MALAN: Bien. Así que cambiar directorio, no es tan difícil. Cambia el directorio. Y ahora fíjate lo que hace la zona de pruebas. Es un poco más potente, aunque es un poco más críptica. Siempre pone un recordatorio constante de dónde te encuentras en las carpetas de tu IDE, mientras que la zona de pruebas ocultó este detalle por completo. Entonces, nuevamente, estamos eliminando una rueda de entrenamiento simplemente recordándote que estás en source two y la tilde es solo una convención de la computadora, lo que significa que es tu directorio de inicio, esa es tu carpeta personal con tus archivos CS50, demarcados con solo una tilde.

Así que ahora voy a seguir adelante y haré buggy two. Sí se compila, porque nuevamente, este no es un error de sintaxis. Este es un problema lógico. Ahora voy a seguir adelante y haré dot slash buggy two. Y si cuento estos, todavía tengo 11 símbolos de almohadilla en la pantalla. Así que podría entrar y agregar printf, pero eso no es realmente aprovechar ninguna herramienta nueva. Pero mira lo que puedo hacer en su lugar. Déjame desplazar esto hacia abajo un poco para poder ver todo mi código.

Déjame seguir adelante y hacer clic a la izquierda de los números de línea en el IDE, como en main, y pone un punto rojo, como una señal de alto que dice detenerse aquí. Esto es lo que se llama un punto de interrupción. Esta es una característica de muchos entornos de desarrollo integrados, como el IDE de CS50, que le dice a la computadora de antemano, cuando ejecuto este programa, no solo lo ejecutes como de costumbre, detente ahí y permíteme, a mí, el humano, recorrer mi código, paso a paso.

Así que para hacer esto, no solo ejecutes buggy two de nuevo. En su lugar, ejecuta debug 50. Entonces, así como help 50 te ayuda a comprender los mensajes de error, debug 50 te permite recorrer tu programa paso a paso. Así que déjame seguir adelante y presionar Enter. Notarás ahora en el lado derecho una nueva ventana que la zona de pruebas no tenía abierta. Y están sucediendo muchas cosas allí, pero pronto veremos las piezas que importan. Ese es el depurador.

Y verás que esta línea aquí, la línea siete, está resaltada, porque esa es la primera parte real del código dentro de main que potencialmente se ejecutará. Realmente no sucede nada con las llaves. Siete es la primera línea real de código. Entonces, lo que significa esta barra amarilla o verdosa es que el depurador ha detenido tu programa en ese momento, no se ha ejecutado completamente, por lo que podemos comenzar a curiosear. Y de hecho, si hago zoom en la derecha, centrémonos hoy principalmente en las variables, notarás una pequeña pista visual agradable de que tienes una variable llamada i.

Por el momento, su valor es cero. ¿Cuál es su tipo? Entero. Así que observa lo que sucede ahora cuando aprovecho algunos de los íconos que están un poco más arriba. Solo voy a desplazarme hacia arriba en el depurador y hoy ignoraremos la mayor parte de esto, pero hay algunos íconos aquí. Entonces, si tuviera que presionar Reproducir, eso simplemente reanudará mi programa y lo ejecutará hasta el final, lo cual no es muy útil si mi objetivo era revisarlo paso a paso. Pero si en su lugar pasas el cursor sobre estos otros íconos, paso a paso, esto pasará por encima de una línea de código a la vez y la ejecutará una por una, lo que literalmente te permitirá recorrer tu propio código.

Así que intentemos esto. Cuando sigo adelante y hago clic en Paso a paso, fíjate que el color se mueve. Mira mi ventana de terminal ahora, la gran ventana azul en la parte inferior. Voy a ver hash. Ahora fíjate que la línea siete se resalta nuevamente, porque solo con un bucle for, algo sucederá una y otra vez. Entonces, ¿qué deberíamos ver que suceda cuando hago clic en paso a paso una vez más?

AUDIENCIA: [INAUDIBLE]

DAVID MALAN: i debería volverse uno. Es un poco pequeño, pero fíjate en el lado derecho de la pantalla donde dice variable i, y hago clic en Paso a paso, ¡listo! Ahora vemos uno. Y si continúo haciendo esto, en realidad no sucede nada interesante. Acabo de ralentizar bastante el mismo programa. Pero notarás que i aumenta una y otra vez. Pero lo interesante aquí es que no tuve que entrar y cambiar mi código agregando un montón de instrucciones printf desordenadas que tendré que eliminar más tarde solo para enviar mi código o enviarlo por Internet. En cambio, puedo ver qué está pasando dentro de la memoria de mi computadora mientras ejecuto este programa.

Y el hecho de que ahora el valor de i es 10 y, sin embargo, estoy a punto de imprimir otro hash, ahí radica el mismo error lógico. Entonces, estamos viendo gráficamente el mismo problema que antes. Entonces, ahora en este punto, el programa está prácticamente terminado. Si sigo haciendo clic en Paso a paso, simplemente terminará. Si en este punto, es como, oh Dios mío, ahora sé que está mal, puedes salir de casi cualquier programa en el IDE o en la zona de pruebas presionando Control + c, para cancelar, y eso eliminará el depurador, cerrará la ventana y te regresará a tu ventana de terminal.

Y no puedo enfatizar esto lo suficiente, avanzando incluso esta semana, usa help 50 cuando tengas un error al compilar tu código, algún mensaje de error que no entiendas. Simplemente te ayudará como podría hacerlo un miembro del personal. Y luego, ciertamente contáctanos si no lo entiendes. Pero debug 50 debería, en el futuro, ser tu primer instinto. Si tienes un error en el que algo no funciona, la cantidad de cambio que se está calculando es incorrecta, los números de tarjeta de crédito que estás analizando son incorrectos, usa debug 50, comenzando esta semana, no dentro de dos semanas, para desarrollar esa memoria muscular de usar un depurador. Y es realmente una habilidad para toda la vida, no solo para C, sino también para otros lenguajes.

¿Alguna pregunta sobre eso? Verás más en la sección y más allá. Entonces, ¿qué más tenemos en cuanto a herramientas en nuestro conjunto de herramientas aquí? Sigamos adelante y presentemos otra ahora. Esa probablemente la hayas usado la semana pasada, llamada check 50. Esta es una herramienta que te permite analizar la corrección de tu código. Y podrías recordar con check 50, hiciste algo como esto. Si seguía adelante y preparaba un programa, como mi típico hola punto c, entonces seguí adelante y hice clic en Guardar, guardando este archivo como hola punto c. Déjame seguir adelante e incluir estandar Io punto h, int main void. Déjame seguir adelante ahora e imprimir. Hola, mundo con barra invertida n punto y coma.

Y sé por los conjuntos de problemas, que la forma de verificar la corrección de este código con CS50, revisa 50 y luego un slug, un identificador único. Estoy usando uno más corto solo para la conferencia de hoy llamado CS50 problems hello. Ese es solo el conjunto único de pruebas que quiero ejecutar en mi código llamado hola punto c. Entonces, lo que está sucediendo aquí es que me piden que me autentique. GitHub es lo que usa esto, como has visto. Seguiré adelante y usaré mi cuenta de estudiante. Voy a seguir adelante e iniciar sesión.

Notarás que una estrella representa tu contraseña, por lo que la enmascara, aunque todo el mundo en el mundo ahora sabe cuánto tiempo tiene mi contraseña. Y ahora nos estamos preparando, estamos cargando el envío y, en solo unos segundos, obtendre