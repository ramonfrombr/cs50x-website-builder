Well, what about types? Even this world gets a little simpler. These were the data types we focused on in C. But a bunch of them now go away in Python. We still have bool, like the capital true and false. We still have ints and floats, it turns out. But we also have strs, which is just a shorter version of the word string. 

And whereas in C, we definitely had the notion, the concept of strings, but we pretended that the word string existed, thanks to the CS50 library-- in Python, there actually is a data type called str-- you can just call it string-- that gives us even more functionality than the CS50 library did. So that was just a stepping stone to what exists here. 

And there's other data types in Python, too. In fact, a few of them are just here. And we'll play today with a few of these data types, because if you think about what we did the past two or three weeks introducing not only arrays, but then linked to lists and hash tables and trees and tris and stacks and Qs, this whole toolkit of data structures did we start talking about-- in Python, wonderfully, if you want a hash table, it comes with the language. If you want a linked list, it comes with the language-- no more pointers, no more creation of those low-level data structures yourself. You can just use them out of the box. 

So here's a list, then, to summarize some of the more powerful data types we get in Python that we did not have in C, unless we wrote them ourselves. You can have a range, like we just saw, which is just a sequence of numbers, like 0, 1, 2, or anything else. We can have a list, which is a sequence of mutable values, which is a fancy way of saying, they are values that can be changed. Mutable, like mutation, just means you can change those values. So you can add to, remove, and replace the values in the initial list. 

A list, then, in Python is like an array in C, but that can be automatically increased in size or decreased in size. So you don't have to do all of that maloc or realloc stuff anymore. A tuple is a sequence of immutable values, which is a fancy way of saying a sequence of values that once you put them there, you can't change them. So this is sometimes useful for, like, coordinates, x comma y, for GPS coordinates or the like. But when you know you're not going to change the values, you can use a tuple instead. 

Dict, or dictionary, is a collection of key value pairs. And this is the abstract data type, to borrow a word from a couple weeks ago, that underneath the hood is implemented with the thing we called-- and you built for Pset5-- a hash table. So Python comes with hash tables. They're called dictionaries, abbreviated dict in the language. And this simply will allow you to-- if you want a hash table, just declare it, just like you would an int or a float. There's no more implementing that yourself. 

And then, lastly, at least among the ones we'll look at today, a set is a collection of unique values. You might recall this term from a math class. So this is just a collection of values. But even if you put multiple copies of the same value in there, it's going to throw the duplicates away for you, which is just sometimes convenience. 

And there's other data types, too. But that's more than enough to get us started today. Indeed, everything we're going to look at today ultimately is derivative of the documentation. And Python's documentation is very thorough. But I will disclaim it's not super user friendly. 

And so starting this week and beyond, in really any language, like Google is going to be your friend. And sometimes Stack Overflow is going to be your friend. And your teaching fellows in course this instance will certainly be your friends, not in the sense that you should start googling, how to implement problem set 6, but rather, how do you iterate over values in Python? 

Or how do you convert string to lower case? Those kinds of building blocks that, frankly, are not intellectually interesting to memorize from our class-- you can just grabb them off the shelf or off Google when you need-- is exactly how folks like Brian and I and [INAUDIBLE] and Rodrigo program every day. 

You don't necessarily memorize everything in the documentation. But you know how to find it. And indeed, among the goals for this class is to take off the last of those training wheels and actually have you teach yourself new things on your own, having done it with the support structure of the class itself. 