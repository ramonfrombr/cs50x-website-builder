Bien, ahora afirmo que he escrito algún código. ¿Cómo funciona ejecutarlo? Bien, ¿cómo ejecutas un programa en tu Mac o PC? ¿Qué sueles hacer? Haces doble clic, ¿verdad? Desafortunadamente, no parece haber nada obvio en lo que hacer doble clic aquí. De hecho, no hay ningún icono en mi pantalla. Y de hecho, no hay ningún programa, per se, todavía. Porque las computadoras, recuerden desde la semana pasada, no entienden inglés. Técnicamente, no entienden C, per. Se. Qué es el idioma que hablan y entienden las computadoras? AUDIENCIA: Binario. DAVID MALAN: Sí, binario, ceros y unos. Y sin embargo, está claro que esto no son ceros y unos. Y francamente, ninguno de nosotros la pasaría bien si la codificación implicara, en estos días, escribir literalmente ceros y unos, lo cual, en cierto sentido, era lo que implicaba en el pasado. Pero hoy en día, resulta que hay una solución para este problema. Esto, aunque sea críptico para la mayoría de nosotros en esta sala, al menos puedes imaginarte que, eventualmente, te sentirás cómodo, probablemente, con esta sintaxis, una vez que aprendas las reglas y la sintaxis, etc. Pero necesitamos convertirlo de alguna manera a ceros y unos. Y quizás no sea obvio cómo hacerlo. Así que resulta que si queremos convertir código como este a ceros y unos que la computadora entienda, se requiere algún paso intermedio. De hecho, necesito, en mi Mac o PC o este entorno basado en la nube, un programa que tome como entrada mi código fuente, que es ese lenguaje llamado C, y que produzca como salida lo que se llama código de máquina. Entonces, el código fuente es algo como C o Python o Java o C++ y quizás otros lenguajes sobre los que has oído hablar. Es una sintaxis similar al inglés en la que escribes programas. El código de máquina es los ceros y unos que toda computadora realmente entiende. Entonces, para llegar del código fuente al código de máquina, debe haber algún tipo de algoritmo o, más específicamente, un software que haga esa conversión. Y esa pieza de software es lo que vamos a empezar a llamar un compilador. Así que vamos a escribir código literalmente simplemente escribiendo comandos en un teclado. Vamos a guardar esos comandos en un archivo, tal como guardaste tu código en Scratch. Pero antes de que pueda ejecutar mi programa y hacer el equivalente a hacer doble clic en él, tengo que ejecutarlo a través de un compilador y producir una salida, que son ceros y unos. Entonces, ¿cómo hago eso? Este es el primero de los comandos más esotéricos, pero resulta que es relativamente sencillo de hacer. En la parte superior de mi entorno de programación, de nuevo, tengo mi código aquí en la parte superior izquierda. Y si me desplazo hacia abajo hasta la parte inferior, tengo esto, nuevamente, la llamada ventana de terminal. Y el signo de dólar es solo una extraña convención humana. El signo de dólar solo significa escribir algo aquí. Ese es su llamado mensaje o su shell. Pero el cursor parpadeante solo me invita a escribir un comando en este mensaje. El primer comando que voy a escribir es lo que se llama Clang para el lenguaje C. Clang es el nombre de un programa que existe para compilar código. Alguien más escribió esto. Alguien más en línea creó este programa llamado Clang, de hecho, un grupo completo de personas. Lo dejaron disponible gratuitamente para que tú y yo lo descarguemos en nuestras propias Mac o PC o en este entorno de sandbox. Y podemos usar Clang para convertir código fuente en código de máquina. Así que voy a continuar y ejecutar Clang hello.c. Todavía no he presionado Entrar, pero en el momento en que presione Entrar, veremos que sucede algo. Déjame ir a este pequeño ícono de carpeta aquí arriba, y de hecho puedes ver todos los archivos en mi sandbox actual, por así decirlo, mi entorno de programación. Por supuesto, solo hay uno, porque el único archivo que he creado hasta ahora se llama hello.c. Pero observa lo que sucede en el momento en que presiono Entrar, después de haber escrito Clang hello.c. Entonces, claramente existe algo más ahora, y es un nombre realmente estúpido y muy críptico. Es a.out, pero quizás puedas adivinar qué hay dentro de ese nuevo archivo. ¿Qué podría haber dentro de él? AUDIENCIA: Código de máquina. DAVID MALAN: Sí, código de máquina. Entonces, significa salida de ensamblaje, pero eso solo significa código de máquina. Así que dentro de este archivo hay un montón de ceros y unos que corresponden a este código, pero en binario, en el idioma que la computadora puede entender. Así que, literalmente, lo que acabo de hacer fue esto: tomé como entrada el código que se ve así, escrito en C. Lo ejecuté como entrada en el compilador y produje esta salida, ceros y unos. Y esos ceros y unos se guardaron automáticamente para mí dentro de un archivo que, por convención humana, se llama a.out. Muy bien, pero alguien propuso anteriormente, para ejecutar un programa, normalmente, en tu Mac y PC, simplemente haces doble clic en él. Pero realmente no hay nada en lo que hacer doble clic. Y de hecho, si hago doble clic en esto, se verá muy extraño y la computadora no lo entenderá. Porque son ceros y unos que no están destinados a ser presionados. Están destinados a ejecutarse en este símbolo del sistema. Así que voy a seguir adelante y hacer esto. Esto también es críptico. Pero voy a seguir adelante y hacer./a.out. Y esto, por extraño que parezca a primera vista, es como le digo a la computadora: ejecuta el programa a.out en mi directorio actual. Entonces, ese punto que escribí primero solo significa que está literalmente aquí, en mi carpeta actual, como si estuvieras haciendo doble clic en él en tu Mac o PC. Y /a.out significa buscar en este directorio y ejecutar el programa en el archivo llamado a.out. Así que déjame seguir adelante y presionar Entrar. Y voila, hola mundo. Entonces, quedaste muy impresionado la semana pasada, como recuerdo, cuando hice que el gato dijera hola mundo. Aquí, parecemos menos que decepcionados. Pero hola mundo es ahora mi programa en C que ha hecho exactamente lo mismo. Pero es cierto, se ve un poco estúpido en este momento. Se ve un poco defectuoso. ¿Qué te molesta, incluso si nunca has programado antes? AUDIENCIA: Signo de dólar. DAVID MALAN: Sí, el signo de dólar. No quise decir hola mundo signo de dólar, pero ese signo de dólar es como un artefacto, ¿verdad? ¿Qué es el signo de dólar de nuevo? AUDIENCIA: Mensaje. DAVID MALAN: Es solo ese mensaje. Está esperando otro comando, y por eso mi cursor parpadea allí. Pero simplemente se ve estúpido, ¿verdad? Podríamos argumentar que esta era mi intención, pero francamente, estaría mintiendo. Eso no hace exactamente lo que quiero que haga. Y esto se debe a que, a diferencia de Scratch, que, nuevamente, es más fácil de usar, C y muchos lenguajes como este, literalmente solo harán lo que les digas que hagan. En ningún momento le dije a la computadora que moviera el cursor a una nueva línea. No terminé ese pensamiento. Dije, hola, coma, mundo, y eso es todo. Nunca envié un comando a la computadora para que realmente moviera ese cursor, pero puedo hacerlo. Así que déjame volver a mi código aquí. Y resulta que en C, si le dices a la computadora que imprima hola, coma, mundo, eso es literalmente todo lo que va a imprimir para ti. Si deseas imprimir una nueva línea, debes utilizar un comando especial, un carácter especial llamado carácter de nueva línea, que está representado por barra invertida n. Ahora, ¿por qué es eso? Bueno, en realidad es porque a pesar de que podrías estar inclinado a presionar Enter así y simplemente presionar Enter como esperarías que hiciera la computadora, incluso si nunca has programado antes, esto probablemente debería molestarte. Se ve un poco extraño. Parece un poco desordenado, esa línea está aquí arriba y la segunda línea está aquí abajo. Entonces, lo que los humanos decidieron hace años es simplemente tener una instrucción simple, barra invertida n, que le dice a la computadora que mueva esa nueva línea hacia abajo. Así que déjame seguir adelante y hacer zoom ahora. En el sandbox, se guarda automáticamente como Google Docs, por lo que no tienes que ir a Archivo, Guardar ni nada por el estilo. Si sigo adelante ahora y vuelvo a ejecutar este programa./a.out Enter, todavía no está fijo. Déjame seguir adelante y acercar. Observa que el síntoma sigue ahí. ¿Por qué? ¿Qué error he cometido? Sí, no lo recompilé. Por lo tanto, nuevamente, la computadora comenzará a tomarte muy, muy literalmente ahora que estás programando para que haga cosas. Y si deseas ejecutar la nueva versión de tu código, literalmente tendrás que hacer algo como Clang y luego hello.c, Enter. Y nada parece suceder. Y francamente, e irónicamente, cuando no ves ninguna salida, generalmente eso es algo bueno. Cuando haces ver salida, generalmente es una lista de, como, cinco errores que cometiste o mensajes de error que pronto veremos. Pero todavía tenemos a.out. Es solo una versión más nueva del mismo. Entonces, si sigo adelante y hago zoom ahora y hago esto --./a.out, Enter--