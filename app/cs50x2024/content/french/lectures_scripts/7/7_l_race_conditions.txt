Il doit donc y avoir des problèmes ou certains désagréments. Considérons-en deux ou trois. Quels sont les inconvénients d'une base de données SQL comme celle-ci ? Le premier est ce que l'on appelle une condition de course. La meilleure façon de l'expliquer est par le biais d'une histoire qui m'a été racontée lorsque j'ai suivi un cours comme celui-ci il y a des années, un cours intitulé CS161, Operating Systems.

C'est un scénario fictif, mais imaginez ceci. Vos colocataires et vous-même avez un réfrigérateur dans votre chambre d'étudiant, et vous et votre colocataire aimez beaucoup le lait. Un jour, l'un de vous rentre à la maison, ouvre le réfrigérateur et s'exclame : « Oh zut, on n'a plus de lait. » Il ferme donc le réfrigérateur et se rend à Harvard Square, à CVS ou dans un autre magasin de ce type. Pendant ce temps, votre autre colocataire rentre à la maison, ouvre le réfrigérateur, a très envie de lait, mais, oh zut, on n'a plus de lait. Il ferme donc le réfrigérateur, sort et se dirige vers un autre magasin qui vend du lait. Pour des raisons que nous avons inventées, il ne vous croise pas à CVS. Quelques minutes plus tard, vous rentrez tous les deux à la maison, après avoir acheté du lait. Mais bien sûr, le lait ne se conserve pas très longtemps. Vous avez maintenant deux fois plus de lait, et une partie va sûrement se gâter. C'est un problème horrible, horrible.

Pourquoi ? C'est fictif, mais j'ai de bons souvenirs de la façon dont on me l'a enseigné. Quel est le problème fondamental ici ? Vous et votre colocataire avez été autorisés à vérifier l'état du réfrigérateur sans savoir que l'autre allait faire de même. Il aurait été préférable que l'un de vous laisse un mot sur le réfrigérateur disant : « Je suis allé chercher du lait », afin que l'autre ne le fasse pas aussi. Ou, plus simplement, verrouillez le réfrigérateur afin que personne d'autre que vous ne puisse voir à l'intérieur avant que vous n'ayez mis à jour l'état du réfrigérateur.

Cela entre donc en jeu très souvent de nos jours lorsqu'il s'agit de traiter de très grands ensembles de données. Les Twitter du monde, les Instagram du monde, vous avez tous l'habitude d'aimer ou de télécharger des messages sur ces sites ou autres. Mais si beaucoup d'autres personnes le font aussi, surtout lorsque les choses deviennent virales, il peut y avoir un code comme celui-ci sous le capot qui fait essentiellement ce qui suit. Voici trois lignes de code Python représentatif qui utilisent SQL. La première ligne sélectionne le nombre d'« likes » dans une table appelée « posts » où l'identifiant du post est quelque chose, une variable appelée ID, 1, 2, 3, 4, 5. Cela m'indique simplement le nombre total de « likes » de ce post. Ensuite, je stocke cette réponse dans une variable en utilisant « likes ». Vous verrez cette syntaxe dans le problème 7 lorsque vous commencerez à jouer avec SQL vous-même dans la bibliothèque CS50.

Supposons que votre troisième ligne de code soit alors de mettre à jour les messages, en définissant « likes » égal à un espace réservé, où cet espace réservé sera « likes » plus 1. C'est le même problème que l'exemple du lait, car si vous vérifiez combien il y a de « likes » sur ce post, ou si votre colocataire vérifie combien il y a de lait restant dans le réfrigérateur et puis commencez à prendre une décision comme acheter du lait, votre colocataire pourrait, sur un serveur qui exécute le même code pour gérer des milliers de personnes, poser la même question. Combien de « likes » a ce message actuel ? Supposons que la publication ait un million de « likes ». Vous exécutez tous les deux cette première ligne de code, voyez que, oh, j'ai un million de « likes ». Je viens de cliquer sur plus 1 sur le site. Vous essayez donc de modifier le nombre de « likes » avec cette deuxième requête de mise à jour à 1 million plus 1.

Mais si vous avez tous les deux pris une décision qui s'intercale avec l'autre personne, comme cela se produira absolument avec Instagram et Twitter, qui ont des milliers de serveurs fonctionnant tous en parallèle, au lieu de changer le nombre de « likes » de 1 million à 1 000 002, vous pourrait le changer tous les deux à 1 000 001, perdant ainsi un des comptes, car il se perd, parce que vous avez inspecté l'état du réfrigérateur ou les « likes ». Vous avez pris une décision. Et puis vous l'avez mis à jour en fonction de cette décision sans vous rendre compte que la vie avait changé entre-temps. Votre colocataire est rentré chez lui et a vérifié le réfrigérateur, ou quelqu'un d'autre a cliqué sur le vote positif.

C'est donc une mauvaise situation, mais il existe des solutions en SQL que nous n'aborderons pas cette semaine, mais ce que l'on appelle des transactions. C'est un problème résoluble, et nous en reparlerons dans un cours de base de données de niveau supérieur.