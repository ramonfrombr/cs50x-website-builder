All right, so let's take a look at a couple of other equivalencies and then comparisons and start to write more interesting programs than ones that just say hello world. So here, again, is a summary of how you technically should convert your source code to machine code by using a program called Clang with a command-line argument, a special parameter, -o hello, to name the file something else. And honestly, no one's ever going to remember this command. And even if you do, it's just very tedious to type. That's why programs like make exist, which just automate that exact same process. But they are still doing the same thing-- compiling your source code into machine code. And to run the program thereafter, you say dot, which just refers to your current folder, because we'll see that you can have multiple folders on a server, and hello is the name of the program. All right, let's take a look at a couple of other types of features of Scratch and see what it's going to look like in C, and then we'll start to implement some programs in C more manually. So consider this example here, which was an example of what type of feature in Scratch? This did what for us? AUDIENCE: Variable. DAVID MALAN: So this was an example of a variable. And that variable, in this case, was called counter. And we initialized it to-- that is, we set it equal to-- zero. In C, on the right-hand side, if we want to achieve this same result today onward, you're literally going to say the name of the variable, like counter, but you can call it anything you want, equals zero. Because recall that the equal sign is the assignment operator. So whatever is on the right is going to get copied into whatever is on the left. However, that's not quite sufficient, because when you declare a variable and you say, hey, computer, I need some storage for some value, you have to tell the computer what the type of that variable is. We've seen strings are variables that store multiple words. But in this case, we want to store a number. And in C, that type of number is called an int or an integer, but I-N-T for short. There's one thing missing from this line of code. AUDIENCE: Semicolon. DAVID MALAN: Semicolon. Just finishes the thought. So what does this do? Hey, computer, give me a variable whose type is integer, or int. Call that variable counter, and store the value zero in that variable by default. So it turns out that we can do other such operations on variables. For instance, here we have the incrementation feature of Scratch. Change the counter by one by adding 1 to the variable. So how do we do this in C? In C, you would do something like this. And this is a little paradoxical if you're coming at this from algebra, because how could counter possibly be equal to counter plus 1? But it's not equality. This is assignment from right to left. So on the left-hand side, you're saying counter. That's the name of your variable. On the right-hand side, you're saying counter plus 1, whatever that arithmetic answer is. And you're copying counter plus 1 into counter. I'm still missing something here, which is that semicolon. But I do not need to say int in this example. At this point in the story, it is assumed that counter exists and that I've used a line of code like the previous one somewhere else in my program. Because that tells the computer once, give me a variable called counter, and let me store ints in it. This line of code assumes that counter exists, and so we do not specify the word int again. You specify it just once. Now, we need the semicolon, as I proposed. But frankly, this is such a common operation in programming, as we'll see, to just increment a variable. Turns out there's other ways to do this. You can, instead, equivalently say this-- counter plus equals 1 semicolon. It is literally the same thing. And if that's too many keystrokes for you, you can literally just say counter plus plus semicolon, and that, too, does the same thing. This is what's known in programming as syntactic sugar. It doesn't add any functionality that you couldn't do some other way. But it does it in a prettier, often more succinct way. And it's just more common to write lines of code like this.