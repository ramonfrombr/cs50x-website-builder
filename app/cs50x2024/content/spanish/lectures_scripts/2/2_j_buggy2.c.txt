Así que este es un programa que también tiene errores. Lo escribí por adelantado y se llama buggy two dot c. Tiene un for loop. Está imprimiendo algunos hashtags. Y el objetivo de este programa es imprimir algo 10 veces. Así que tengo mi for loop desde cero hasta 10. Estoy imprimiendo un hash con una barra invertida n. Así que vamos a ejecutarlo, ejecutar buggy two. Vaya. No estoy en este directorio. Vamos a ejecutar buggy two. Parece que compila. Así que esto todavía no es un problema de help 50, porque eso sería cuando el comando mismo no está funcionando. Buggy two. Bien, se ve bien, pero vamos a estar súper seguros. Uno, dos, tres, cuatro, cinco, seis, siete, ocho, nueve, 10, 11.

Así que está defectuoso si mi objetivo es imprimir solo 10 hashes. Y obviamente, esto es muy artificial. Lo más probable es que puedan razonar sobre cuál es el problema aquí, pero esto es representativo de otro tipo de problema que no es un error sintácticamente, en el que escribieron algún símbolo o comando incorrecto. Esto es más un error lógico. Mi objetivo es imprimir algo 10 veces. Obviamente no es así. Está imprimiendo algo 11 veces. Y supongamos que el objetivo es entender por qué está sucediendo esto.

Bueno, la siguiente herramienta de depuración que te proponemos que consideres es, de hecho, simplemente printf. Es quizás la herramienta más simple que puedes usar para comprender realmente lo que está sucediendo dentro de tu programa. Podríamos usarlo en este caso de la siguiente manera. Obviamente ya estoy imprimiendo el símbolo hash, pero permítanme decir algo más deliberado, solo para mí, algo como i es ahora %i, y luego sigamos adelante y simplemente pongamos un espacio y luego ahí, imprimimos i punto y coma. Así que este no es el objetivo del programa. Es solo un mensaje de diagnóstico temporal, de modo que ahora, si sigo adelante y aumento la ventana de mi terminal, recompilo buggy two y vuelvo a ejecutar punto barra buggy two [se ríe] Buffy two buggy two: ahora veré oh, un poco más de información interesante.

No solo sigo viendo los hashtags, ahora estoy viendo, en tiempo real, el valor de i. Y ahora, probablemente debería saltar a la vista si aún no lo hizo solo en el for loop, ¿cuál es el error que he cometido en mi código?

AUDIENCIA: [ININTELIGIBLE]

DAVID MALAN: Díganlo de nuevo.

AUDIENCIA: [ININTELIGIBLE]

DAVID MALAN: Sí, mi primer valor para i era cero, y eso normalmente está bien. Los programadores tienden a comenzar a contar desde cero, pero si haces eso, no puedes seguir contando hasta 10. Tienes que hacer un par de ajustes aquí. Entonces, ¿qué podemos hacer para solucionarlo?

AUDIENCIA: [ININTELIGIBLE]

DAVID MALAN: Sí, entonces esta sería la forma canónica de hacer esto. No es la única forma, pero generalmente comienza en cero y sube hasta un valor menor al que te importa. Así que ahora, si vuelvo a ejecutar esto, puedo seguir adelante y ejecutar make buggy two nuevamente, limpiar mi pantalla, punto barra buggy two, Enter. Y ahora de hecho tengo 10, aunque nunca dice 10, pero está bien, porque estoy comenzando en cero. Y ahora que encontré mi error lógico, donde simplemente no está funcionando como pretendía, ahora puedo seguir adelante y eliminar esa línea.

Puedo seguir adelante y hacer buggy two una vez más, punto barra buggy dos, Enter. Y listo, ahora puedo enviar mi programa o enviarlo a mi usuario real. Entonces, printf es una forma muy antigua de comprender lo que está sucediendo en su programa simplemente husmeando. Utiliza printf para ver qué está sucediendo dentro de tu programa, de modo que no solo estés mirando una pantalla tratando de razonar sin la ayuda de la computadora.