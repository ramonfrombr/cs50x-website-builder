So those are the five types you'll encounter that are built-in to C. But in CS50 we also have a library. CS50.h, which you can include. And which will provide you with two additional types that you'll probably be able to use on your assignments, or just working generally programming. The first of these is bool. So the Boolean data type, bool, is used for variables that will store a Boolean value. If you've ever heard this term before, you might know that a Boolean value is capable of only holding two different distinct values. True and false. Now this seems pretty fundamental, right? It's kind of a surprise that this doesn't exist in C as it's built-in. And in many modern languages, of course, Booleans are a standard default data type. But in C, they're actually not. But we've created it for you. So if you ever need to create a variable whose type is bool, just be sure to #include CS50.h at the beginning of your program, and you'll be able to create variables of the bool type. If you forget to #include CS50.h, and you start using Boolean-type variables, you might encounter some problems when you're compiling your program. So just be on the lookout for that. And maybe you can just fix the problems by pound including CS50.h. The other major data type that we provide for you in the CS50 library is string. So what is a string? Strings are really just words. They're collections of characters. They're words. They're sentences. They're paragraphs. Might be whole books, even. Very short to very long series of characters. If you need to use strings, for example, to store a word, just be sure to include CS50.h at the beginning of your program so you can use the string type. And then you can create variables whose data type is string. Now later on in the course, we'll also see that that's not the entire story, either. We'll encounter things called structures, which allow you to group what may be an integer and a string into one unit. And we can use that for some purpose, which might come in handy later on in the course. And we'll also learn about defined types, which allow you to create your own data types. We don't need to worry about that for now. But just know that that's something on the horizon, that there's a lot more to this whole type thing than I'm telling you just now.

So now that we've learned a little bit about the basic data types and the CS50 data types, let's talk about how to work with variables and create them using these data types in our programs. If you want to create a variable, all you need to do is two things. First, you need to give it a type. The second thing you need to do is give it a name. Once you've done that and slapped a semicolon at the end of that line, you've created a variable. So here's two examples. Int number; char letter;. What have I done here? I've created two variables. The first, the variable's name is number. And number is capable of holding integer type values, because its type is int. Letter is another variable that can hold characters because its data type is char. Pretty straightforward, right? If you find yourself in a situation where you need to create multiple variables of the same type, you only need to specify the type name once. Then just list as many variables of that type as you need. So I could for example, here in this third line of code, say int height;, new line. Int width;. And that would work too. I'd still get two variables called height and width, each of which is an integer. But I'm allowed to, thanks to C syntax, consolidate it into a single line. Int height, width; It's the same thing. I've created two variables, one called height one called width, both of which are capable of holding integer type values. Similarly here, I can create three floating point values at once. I can maybe create a variable called square root of 2-- which presumably will eventually hold the floating point-- that representation of the square root of 2-- square root of 3, and pi. I could have done this on three separate lines. Float, square root 2; Float square root 3; float pi; and that would work too. But again, I can just consolidate this into a single line of code. Makes things a little bit shorter, not as clunky. Now in general, it's good design to only declare a variable when you need it. And we'll talk a little bit more about that later on in the course when we discuss scope. So don't necessarily need to create all of your variables at the beginning of the program, which some people might have done the past, or was certainly a very common coding practice many years ago when working with C. You might just want to create a variable right when you need it.

All right. So we've created variables. How do we use them? After we declare a variable, we don't need to specify the data type of that variable anymore. In fact, if you do so, you might end up with some weird consequences that we'll kind of gloss over for now. But suffice it to say, weird things are going to start happening if you inadvertently re-declare variables with the same name over and over. So here I have four lines of code. And I have a couple of comments there just indicating what's happening on each line just to help you get situated in what's going on. So int number;. You saw that previously. That's a variable declaration. I've now created a variable called number that's capable of holding integer-type values. I've declared it. The next line I'm assigning a value to number. Number equals 17. What's happening there? I'm putting the number 17 inside of that variable. So if I ever then print out what the contents of number are later on, they'll tell me it's 17. So I've declared a variable, and then I've assigned it. We can repeat the process again with char letter;. That's a declaration. Letter equals capital H. That's an assignment. Pretty straightforward, too. Now this process might seem kind of silly. Why are we doing this in two lines of code? Is there a better way to do it? In fact, there is. Sometimes you might see this called initialization. It's when you declare a variable and assign a value at the same time. This is actually a pretty common thing to do. When you create a variable, you usually want it to have some basic value. Even if it's 0 or something. You just you give it a value. You can initialize a variable. Int number equals 17 is the same as the first two lines of code up above. Char letter equals h is the same as the third and fourth lines of code above. The most important takeaway here when we're declaring and assigning variables is after we've declared it, notice I'm not using the data type again. I'm not saying int number equals 17 on the second line of code, for example. I'm just saying number equals 17. Again , re-declaring a variable after you've already declared it can lead to some weird consequence. So just be careful of that. I'm Doug Lloyd. And this is CS50. 