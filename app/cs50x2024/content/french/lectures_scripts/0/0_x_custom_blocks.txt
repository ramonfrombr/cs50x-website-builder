Mais il y a cette autre idée en informatique, cette notion d'abstraction. À présent, ceci est un programme qui implémente la notion de toux. Mais que se passe-t-il si je souhaite utiliser la même idée dans de multiples programmes et que je souhaite me procurer une pièce de puzzle personnalisée qui ne provient pas de Scratch appelée toux ? Eh bien, il y a cette autre fonctionnalité que je peux réaliser comme pour mes blocs, et je peux créer un bloc. Je vais aller de l'avant et appeler cela toux. Et cette pièce de puzzle, une fois que j'ai cliqué sur OK, va me donner ce bloc rose ici. Par exemple, je vais aller de l'avant maintenant et déplacer tout cela vers la pièce de puzzle personnalisée. Et maintenant remarquez, parce que j'ai créé un nouveau bloc, j'ai cette pièce rose ici. Je peux maintenant la déplacer ici. Et franchement, loin des yeux loin du cœur. Je peux littéralement ignorer ces pièces de puzzle que j'ai créées parce que j'ai maintenant une nouvelle pièce de puzzle appelée toux qui dit ce qu'elle fait. Ceci est une abstraction dans le sens où je ne me soucie pas de la manière dont vous implémentez la toux, je me soucie uniquement que votre programme puisse tousser. Et donc, nous avons cette notion de réutilisation qui commence à rendre notre code non moins sophistiqué, mais bien, bien plus petit et bien moins sujet aux erreurs, potentiellement. Et je peux aller encore plus loin. Laissez-moi aller de l'avant et ouvrir une variante différente de celui-ci dans son intégralité, celui-ci dans tousser trois. Vous pouvez faire en sorte que ces pièces de puzzle personnalisées acceptent même des arguments. Vous pouvez faire en sorte que cette pièce de puzzle appelée toux dise, eh bien, combien de fois voulez-vous tousser, prenant ainsi une entrée. Ensuite, vous pouvez répéter cette toux un certain nombre de fois pendant une seconde et attendre une seconde. Donc, si vous voulez maintenant utiliser cette pièce de puzzle plus sophistiquée ici, remarquez que cela semble maintenant encore plus simple. Allez-y et toussez trois fois. Et tout a été abstrait. Si je fais défiler vers le haut et à l'écart, vous ne savez même pas ou n'avez même pas à vous soucier de savoir comment ou pourquoi la toux a été implémentée. Et donc, alors que nous avons commencé toute cette conversation simplement à la recherche de Mike Smith et que nous essayions de trouver une réponse à un problème, nous avons ensuite parlé d'efficacité et de recherche de cette solution non seulement à coup sûr, mais également plus rapidement. Et maintenant, nous avons un peu parlé des idées qui se profilent lorsqu'il s'agit de la conception de la qualité de votre code.