So let's rewind to week 0, where everything was very simple at the time. And we were just searching a phone book for Mike Smith. And we had this pseudocode here. This had an example of a programming construct that, at the time, we highlighted and called a loop, go back to line 3 so that you can do something again and again. 

This is an example of what's called iteration, a word you might have heard your [? TFs ?] say or someone else, where to iterate just means to loop again and again. And this is very straightforward. And we could implement this in code if we want. But there there's an opportunity to design this algorithm not only differently, but perhaps better, right? 

After all, let me go ahead and erase that line there and get rid of this iteration and see if I can't solve the problem more elegantly, if you will, a better design, if you will, though there will invariably be some trade-offs. Here, with the open to the middle of the left-- here, with open to middle of left half of book and here, open to middle of right half of book, the whole point of opening to the middle of the left or the middle of the right was just a search for Mike Smith again but in half of the phone book, left or right. The key detail being it's half the size of the whole phone book. 

But the algorithm is really the same. So in fact, why don't we simplify our pseudocode and not get into the logistics of like, oh, go back to this line and then do this again and again. No, let's just say search the left half of book or search the right half of book. And in fact, let's tighten up the code and make it fewer lines so that we don't even need to get into the specific line numbers. We can just tell ourselves what to do. 

Now, highlighted in yellow here are those two new lines. And it might seem kind of like a cyclical argument. Well, how do you search for Mike Smith? Well, you just search for Mike Smith. But the key detail here is I'm not just telling you to do the same thing endlessly. I'm telling you, if you want to search for Mike Smith in a phone book of this size, mm-mm. Search for Mike Smith in a phone book of this size. And then the next step of that algorithm becomes search for him in a phone book of this size, this size, when you keep halving the problem. 

So this is an example of a technique in programming called recursion, whereby you implement a program or an algorithm or code that, in a sense, calls itself. If what we're looking at here on the board is a function called search, a function is recursive if it literally references its own name in its own code. And this is where your mind starts to bend perhaps. And we'll see this more concretely. 

But recursion is when a function calls itself. So if this is a function implementing search and highlighted in yellow are two lines of code that say search again but on a smaller piece of the problem, that is recursion, something happening again and again.