What then happens after that? Well, compiling, even though this is the word we use and we'll continue using to describe taking source code to machine code, it's actually a more precise step than that. When a computer-- when a program is compiled, it technically starts like this after having been pre-processed-- again, that was step 1. 

This code is then converted by a compiler, like Clang, to something that looks even scarier than C. This is something called assembly code, and you can actually take entire courses on assembly code. And it wasn't all that many decades ago that humans were manually programming code that looked like this, so it wasn't quite zeros and ones. But my god, C is looking pretty good now, if this is the alternative language back in the day. 

So this is an example of assembly language. But even though it's pretty arcane looking, if I highlight in yellow a few characteristics, there's some things that are familiar. Main is up here. Get string is down here. Printf is down here. So when your code is compiled by Clang, it goes from your source code in C to this intermediate step assembly code, and that's just a little closer to what the CPU, the brain of your computer, actually understands. 

In fact, now highlighted in yellow are what are called instructions. So if you've ever heard of Intel or AMD or a bunch of companies that make CPUs, central processing units, the brains of a computer, what those CPUs understand is these very, very low level operations like this. And these relate to moving things around in memory and copying things and reading things and putting things onto the screen. 