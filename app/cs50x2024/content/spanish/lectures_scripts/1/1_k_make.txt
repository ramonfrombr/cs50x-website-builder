Entonces resulta que al usar la biblioteca CS50, tienes que hacer dos cosas. En tu código fuente, tienes que decirle a la computadora que incluya este archivo CS50.h, donde, nuevamente, funciones como get_string y la palabra string están implementadas para ti. Pero al compilar tu código, necesitas decirle a la computadora, de forma redundante pero por diferentes razones, que agregue todo el código que escribió el personal de CS50 para implementar get_string, string y otras funciones como esta. Voy a continuar y escribir Clang -o string string.c justo como antes, pero necesito decirle a la computadora esta instrucción especial para vincularla con CS50. Y esto tendrá más sentido en solo un par de semanas. Pero esto es sólo un -l para vincular y CS50. Y todo esto le dice a la computadora esto: los ceros y unos para mi programa actual vendrán de string.c justo aquí. Este es mi código fuente. Pero el personal de CS50, hace años, también escribió código en C para darte funciones como get_string para darte variables como strings. Los ceros y unos de la biblioteca CS50 están almacenados en otro lugar en la nube. Necesitan vincularse con los tuyos. Así como tu código está en este archivo, nuestro código está en ese archivo. Y entonces, decirle a la computadora que lo incluya en tu código fuente y que lo vincule en este comando es sólo la forma antigua de decir, combina mi código con el código de CS50 en un programa que realmente puedo ejecutar. Ahora, todo esto, francamente, se está volviendo rápidamente muy abrumador, creo, y muy innecesariamente complicado. Así que hay una mejor manera que esta. Resulta que, de cara al futuro, si quisieras compilar tu código, no tienes que recordar -o. No tienes que recordar -l CS50. No tienes que recordar ninguno de esos comandos, con suerte solo las ideas. En vez de eso, puedes decir hazme un programa llamado string y terminarlo. Toda esta producción en blanco es generada automáticamente para ti cuando le dices a la computadora, haz mi programa. Y el programa make averiguará qué argumentos de línea de comandos usar, qué nombre darle al archivo, qué bibliotecas o código que otras personas han escrito para vincular. Así que de aquí en adelante, cuando quieres compilar tu programa, literalmente sólo di make y el nombre del programa. Pero no es make string.c. Es make y el nombre del programa. Make, este otro programa, averiguará que te refieres a algo llamado string.c. Y puedo retroceder y hacer esto para hola, también. Make hola. Oh, nunca arreglé el problema de antes. Así que déjame ir a hola.c abriendo ese archivo. Déjame arreglar esto para la posteridad. Guardo este archivo o dejo que el archivo se guarde automáticamente. Ahora hago make hola. Y viola, ha hecho lo mismo para mí ahora. ¿Si? AUDIENCIA: ¿Es make como algo estándar [INAUDIBLE]...? DAVID MALAN: Muy buena pregunta. ¿Make es algo estándar o específico de CS50? No es algo específico de CS50. Es una herramienta estándar que existe en computadoras Mac y PC, y computadoras que generalmente ejecutan Unix o Linux. Y de hecho, la herramienta sandbox que estamos usando es en sí misma una computadora en la nube, aunque solo tiene estas dos ventanas, pestañas arriba y la ventana de terminal abajo. Cuando inicias sesión en CS50 Sandbox, tienes acceso a tu propio servidor en la nube que ejecuta un sistema operativo llamado Linux. Y Clang y make y otras herramientas que veremos, como ls y rm, todas existen en ese sistema operativo. No son específicas de CS50 en absoluto. ¿Si? AUDIENCIA: Con eso, ¿hola sería código de máquina, no [INAUDIBLE]?? DAVID MALAN: Correcto. Hola es el código de la máquina. Hola.c es el código fuente. AUDIENCIA: Entonces [INAUDIBLE]? DAVID MALAN: Correcto. Make es un programa inteligente diseñado para hacer nuestras vidas más fáciles, sin juego de palabras, por el cual si haces make hola, buscará un archivo llamado hola.c. Y si lo encuentra, creará el programa llamado hola desde el código fuente hasta el código de máquina, respectivamente. ¿Si? AUDIENCIA: [INAUDIBLE]. DAVID MALAN: No exactamente. Entonces make es un programa que viene con un sistema operativo llamado Linux, y también viene con Mac OS. Y en estos días, también viene con Windows. Es un programa que puedes ejecutar escribiendo su nombre, no que ejecutas haciendo doble clic en un ícono. Buena pregunta. ¿Si? AUDIENCIA: [INAUDIBLE]? DAVID MALAN: Buena pregunta. ¿Eso significa que make está almacenado en tu computadora o en la computadora basada en la nube? En la computadora basada en la nube. Así que en este punto del semestre, y durante las primeras semanas, todo lo que hagamos será en la nube en un ambiente estandarizado llamado CS50 Sandbox y, pronto, algo llamado CS50 Lab. Pero está diseñado para ser representativo de una computadora estándar Linux y también de una Mac o PC. Pero el software tiende a diferir un poco, así que estandarizamos en Linux, que es un sistema operativo muy popular en el mundo del desarrollo de software.