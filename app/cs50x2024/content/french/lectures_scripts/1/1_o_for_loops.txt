Et il y a une autre façon de faire, rien que pour que vous la voyiez ici. Il s'avère qu'une manière plus courante de faire quelque chose un nombre défini de fois est d'utiliser une préposition différente, le mot pour. Et une boucle de ce type ressemble à ceci. Une boucle for fait quelque chose, comme imprimer bonjour monde, encore et encore, mais c'est encore plus mécanique. Mais elle automatise en une ligne de code exactement la même logique que celle que nous venons d'implémenter. Après le mot pour, vous pouvez mettre des parenthèses. Et puis à l'intérieur de ces parenthèses, vous pouvez dire quelque chose comme, donnez-moi une variable appelée compteur et initialisez-la à zéro. Ou c'est un peu verbeux. Utilisons simplement i. C'est donc identique, logiquement, à ce que nous avons fait il y a un moment. Mais la boucle for prend en fait une, deux, trois entrées à l'intérieur de ses parenthèses. C'est un peu bizarre en termes de syntaxe. La deuxième entrée de la boucle for est l'expression booléenne que vous voulez demander encore et encore, alors est-ce que je suis inférieur à 50 ? Et la dernière chose que vous pouvez faire dans une boucle for est cette troisième entrée, où vous pouvez faire votre mise à jour d'une ou plusieurs variables. Donc, si je fais i égal i plus 1 ou, plus succinctement, i plus égal 1, ou même plus succinctement, i plus plus, j'ai maintenant réduit à seulement quatre lignes de code ce que je faisais précédemment en quelques lignes de code supplémentaires. Ces deux éléments sont corrects. Ils font tous les deux exactement la même chose. Et même si la boucle for n'est pas très évidente, parce que ceci est l'étape 1, ceci est l'étape 2, ceci est l'étape 3, puis par incréments, elle obtient le même résultat. Et vous jouerez avec cela au fil du temps au cours des prochaines semaines en faisant quelque chose encore et encore. Mais c'est juste une façon plus succincte d'atteindre ce même objectif. Des questions, alors, sur les boucles while ou for ici ?