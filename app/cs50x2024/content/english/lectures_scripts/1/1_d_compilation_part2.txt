So let me go back up to my code here. And it turns out that in C, if you tell the computer to print hello, comma, world, that is literally all it's going to print for you. If you want to print a new line, you need to use a special command, a special character called a new line character, which is represented by backslash n. Now, why is that? Well, it's really because even though you might be inclined to hit Enter like this and just hit Enter like you would hope the computer would do, even if you've never programmed before, this probably should start to rub you in the wrong way. It just looks a little weird. It looks a little messy, that one line is up here and the second line is down here. So what humans decided years ago is let's just have a simple instruction, backslash n, that tells the computer to move that new line down. So let me go ahead and zoom out now. In the sandbox, it automatically saves like Google Docs, so you don't have to go to File, Save or anything like that. If I go ahead now and rerun this program ./a.out Enter, it's not yet fixed. Let me go ahead and zoom in. Notice that the symptom is still there. Why? What mistake have I already made? Yeah, I didn't recompile it. So again, the computer is going to start taking you very, very literally now that you're programming it to do things. And if you want to run the new version of your code, you are literally going to have to do something like Clang and then hello.c, Enter. And nothing seems to happen. And frankly, and ironically, when you don't see any output, that usually is a good thing. When you do see output, it's usually a list of, like, five mistakes that you made or error messages that we'll soon see. But we still have a.out. It's just a newer version thereof. So if I go ahead and zoom in now and do this-- ./a.out, Enter-- now I have a more impressive version of hello world. I've just cleaned it up a little bit. All right, let me pause for just a moment and see if there are any questions on these mechanics thus far. Yeah? AUDIENCE: Why is line 2 empty? DAVID MALAN: Say it a little louder. AUDIENCE: Why is line 2 empty? DAVID MALAN: Why is line 2 empty? Oh, really good question. So line 2 is empty just because I have decided stylistically it looks a little better. Much like in an English essay, you might hit Enter, Enter to just separate your paragraphs, so will programmers often separate their code, just to make it a little easier to digest so it doesn't look like just one big blob of code. But it's not necessary, and I could omit it. Other questions? Yeah? AUDIENCE: Can you rename a.out so that you have more than one file in your directory? DAVID MALAN: Really good question. Can you rename a.out so that you can have more than one file or program in the same directory? Absolutely. So let me do that right now. It turns out that when you run commands on a computer like Clang, you don't have to only say the name of the program and the name of the file. You can add additional options, otherwise known as command-line arguments. And here, too, it's a little arcane. You have to know what's possible in order to type these things out. But it turns out that with Clang-- and if you read the documentation, you would see-- you can actually say -o for output. And then you can specify any name that you want for the file in which your machine code is going to be saved. So notice what happens now. When I hit Enter now, watch the top left-hand corner, where I have a.out and hello.c. I now have hello, as well. And so now I can go ahead and say ./hello instead of a.out, and the result will now be the same.
