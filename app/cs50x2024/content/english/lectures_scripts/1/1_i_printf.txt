So at this point in the story, we now have somewhere in the computer's memory, in a so-called variable, the user's answer to their name. What do I want to do with it? Well, in C, there isn't a join function, so we're going to have to do this a little differently. But there kind of is a say function, and what was that say function called? AUDIENCE: Printf. DAVID MALAN: Printf. So printf is the go-to function any time you want to print or say something on the screen. So I'm going to go ahead and use printf. And I'm going to use parentheses, because parentheses mean, here come my inputs, otherwise known as arguments or parameters in programming. But these are synonymous for our purposes. And now this is a little non-obvious, right? Because I don't want to just put, quote unquote, hello, comma, answer. Why? Why would it be incorrect to do quote unquote, hello, comma, answer? What's that? AUDIENCE: It will just print out answer. DAVID MALAN: Right, it will literally say hello, comma, answer, right? And that's not what we want. We don't want to say "hello answer." We want to say, hello, David or hello, Brian, or whoever is playing this program. So I somehow do need to join the word hello with the user's input. And the way to do this in printf is a little different from Scratch. You use what's called a placeholder. So you literally write the sentence or phrase that you want to say or print to the screen, but wherever you don't yet know the value in advance, you put a placeholder using a percent sign and then an s denoting string. And this is because, of course, if I'm writing this program today, I have no idea who's going to run it tomorrow. So I want to dynamically put a placeholder so that if someone plays this program tomorrow or the next day, their name gets dynamically inserted. I, of course, don't know their name today. So quote unquote, hello, comma, percent s. And that percent s is just a placeholder for whatever I want to plug in there. Backslash n, of course, just means new line. So the only new thing here is this percent s. Now, it turns out that functions in C, just like in Scratch, can take no arguments. Or they can take one arguments. Or they can take two or more arguments. And if they take two or more, you just separate them with commas. So the way printf works-- and you would only know this, again, by being taught it or reading the documentation-- is that you can, yes, provide just a single string as its input-- quote unquote, something. But if you have some placeholders in there, you can tell the computer what to plug in by adding a comma and then the name of the value or variable that you want to plug in. So now, these two lines of code are equivalent to these here. But again, even though at first glance, it might look especially cryptic, if you just break it down to the individual components from right to left and then from outside to inside, you can generally infer even what new code that you've never seen before is doing. Any questions on these two lines of Scratch or C? Yeah? AUDIENCE: Can you add [INAUDIBLE]? DAVID MALAN: Absolutely. Can you add other variables? If I had more variables in this program, thanks to more lines of code, I could just do comma, something else, comma, something else, comma. And I could just have one placeholder in that quoted expression for all of those variables that I want to plug in. And they go from left to right. So if I had two percent s's here, the first one would come after the first comma. The second one would come after the second comma. AUDIENCE: So you need a percent s [INAUDIBLE]?? DAVID MALAN: Correct. You need a percent s for any placeholder you want to plug in if it's a string. And we're going to see other placeholders in just a moment. Good question. Other questions? No? Oh, yeah, in back. AUDIENCE: Is there another way to concatenate strings? DAVID MALAN: Is there another way to concatenate strings? Short answer-- yes, many ways, none of them easy. So we'll build up to that, actually, in a couple of weeks' time. Printf, for now, is by far the easiest way to do it. Other questions? And if I ever miss your hand, there's just lots of glare. Do just call out. Over here. OK, all three of you. Over here on the right. AUDIENCE: [INAUDIBLE]. DAVID MALAN: Sure. What is a string? A string is a sequence of zero or more characters in double quotes. So put another way, it's a word, a phrase, a sentence, a paragraph-- zero or more characters, alphabetical letters, in double quotes. Other questions? Yeah? AUDIENCE: What would happen if your backslash n was outside the quotations. DAVID MALAN: Really good question. What would happen if your backslash n is outside the quotations? Well, let me go ahead and do this. And frankly, this is the right instinct to have. Any time, moving forward, you have those same instinctive questions, just try it. You can do no harm to the computer. So let me go ahead and just accidentally, if you will, put the backslash n outside of the quotes, is what I think your question is. All right, so let's see what happens. So I'm going to go ahead now and run Clang. I know how to make a customized name now, so I'm going to adopt that convention. -o hello. And now I'm going to go ahead and say hello.c, which I think is going to be broken. And indeed, something, indeed, has broken here. Let's see what the error is. So it's a little arcane, too, but hello.c, colon 5, colon 26. What's going on there? Well, let me zoom out. Anytime you make a mistake in your code like this, Clang is going to try to help you figure out where that mistake or that bug is. So hello.c colon five means look on line 5 for your mistake. Then, see, it says error-- expected close parentheses right around here. So it's a little weird, because no, I don't want a close parentheses, I think. I want the new line. So it's not perfectly able to tell you, hey, that backslash n should be inside of the quotes. But it can at least help you hone in on where the mistake is. So it's somewhere around there, at which point your own memory or your own googling should kick in to figure out, oh, that's got to be inside of the quotes. Good question. Was there a third question back there? Yeah? No? OK.