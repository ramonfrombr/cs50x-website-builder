Y hay otra manera de hacerlo, solo para que la veas aquí. Resulta que una manera más común de hacer algo un número fijo de veces es utilizando una preposición diferente: la palabra para. Y un bucle for se ve así. Un bucle for hace algo, como imprimir hola mundo, una y otra vez, pero es aún más mecánico. Pero automatiza en una línea de código exactamente la misma lógica que acabamos de implementar. Después de la palabra para, puedes poner paréntesis. Y luego, dentro de esos paréntesis, puedes decir algo como: dame una variable llamada contador e inicialízala en cero. O eso es un poco verboso. Vamos a usar i. Así que eso es idéntico, lógicamente, a lo que hicimos hace un momento. Pero el bucle for en realidad toma uno, dos, tres entradas dentro de sus paréntesis. Es un poco extraño en términos de su sintaxis. La segunda entrada al bucle for es la expresión booleana que quieres preguntar una y otra vez y otra vez, entonces, ¿i es menor que 50? Y lo último que puedes hacer en un bucle for es esta tercera entrada, donde puedes hacer tu actualización de una o más variables. Entonces, si hago i igual a i más 1 o, más sucintamente, i más igual a 1, o incluso más concisamente, i más más, ahora he reducido a solo cuatro líneas de código lo que anteriormente hice en algunas líneas más de código. Ambos son correctos. Ambos hacen exactamente lo mismo. Y aunque el bucle for no es un poco obvio, porque este es el paso uno, este es el paso dos, este es el paso tres, luego en incrementos, logra el mismo resultado. Y jugarás con esto con el tiempo en las próximas dos semanas cuando hagas algo una y otra vez. Pero es solo una forma más sucinta de lograr ese mismo objetivo. ¿Alguna pregunta, entonces, sobre bucles while o bucles for aquí?