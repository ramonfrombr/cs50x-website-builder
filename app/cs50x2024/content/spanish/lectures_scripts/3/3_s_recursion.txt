Así que retrocedamos a la semana 0, donde todo era muy simple en ese entonces. Y simplemente buscábamos a Mike Smith en una guía telefónica. Y teníamos este pseudocódigo aquí. Aquí había un ejemplo de una construcción de programación que, en ese momento, destacamos y llamamos un bucle, regrese a la línea 3 para que pueda hacer algo una y otra vez.

Este es un ejemplo de lo que se llama iteración, una palabra que quizás hayas oído decir a tus [? TF ?] o a alguien más, donde iterar solo significa hacer un bucle una y otra vez. Y esto es muy sencillo. Y podríamos implementarlo en código si queremos. Pero existe la oportunidad de diseñar este algoritmo no solo de manera diferente, sino quizás mejor, ¿verdad?

Después de todo, permítanme continuar y borrar esa línea allí y deshacerme de esta iteración y ver si no puedo resolver el problema de manera más elegante, por así decirlo, un mejor diseño, por así decirlo, aunque invariablemente habrá algunas compensaciones. Aquí, con la apertura en el medio de la mitad izquierda, aquí, con la apertura en el medio de la mitad izquierda del libro y aquí, la apertura en el medio de la mitad derecha del libro, todo el objetivo de abrir en el medio de la mitad izquierda o en el medio de la mitad derecha era solo buscar a Mike Smith nuevamente pero en la mitad de la guía telefónica, izquierda o derecha. El detalle clave es que es la mitad del tamaño de toda la guía telefónica.

Pero el algoritmo es realmente el mismo. Así que, de hecho, ¿por qué no simplificamos nuestro pseudocódigo y no nos metemos en la logística de, oh, volver a esta línea y luego hacerlo una y otra vez? No, digamos simplemente buscar en la mitad izquierda del libro o buscar en la mitad derecha del libro. Y, de hecho, ajustemos el código y hagámoslo con menos líneas para que ni siquiera tengamos que entrar en los números de línea específicos. Podemos decirnos qué hacer.

Ahora, aquí en amarillo se resaltan esas dos nuevas líneas. Y podría parecer un tipo de argumento cíclico. Bueno, ¿cómo buscas a Mike Smith? Bueno, simplemente busca a Mike Smith. Pero el detalle clave aquí es que no solo te estoy diciendo que hagas lo mismo sin cesar. Te digo, si quieres buscar a Mike Smith en una guía telefónica de este tamaño, mm-mm. Busca a Mike Smith en una guía telefónica de este tamaño. Y luego, el siguiente paso de ese algoritmo se convierte en buscarlo en una guía telefónica de este tamaño, de este tamaño, cuando sigues reduciendo a la mitad el problema.

Así que este es un ejemplo de una técnica de programación llamada recursión, mediante la cual implementas un programa o un algoritmo o código que, en cierto sentido, se llama a sí mismo. Si lo que estamos viendo aquí en la pizarra es una función llamada buscar, una función es recursiva si literalmente hace referencia a su propio nombre en su propio código. Y aquí es donde quizás tu mente comience a torcerse. Y veremos esto de manera más concreta.

Pero la recursión es cuando una función se llama a sí misma. Entonces, si esta es una función que implementa la búsqueda y resaltada en amarillo hay dos líneas de código que dicen buscar de nuevo pero en una parte más pequeña del problema, eso es recursión, algo que sucede una y otra vez.