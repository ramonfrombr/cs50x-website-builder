All right, so what else can we do once we have the ability to express conditions? Well, let me go ahead and open one that I brought with me. So rather than type all of these from Scratch, let me go ahead and open conditions1.c. So this is a program that's already been written. And it turns out, it's got some other lines in it, these grayed-out outlines that begin with slash slash. You might not have noticed this, but in Scratch, you can have what are called comments. They're like little sticky notes that you can add that don't do anything functionally. It's just like notes to self or notes to your friend or notes to your TF. That's what a comment is in a programming language. So anything starting with a slash slash is a note to self. And it's a reminder to me what this line of code does. It's a reminder to your colleagues in the real world or your TF in a class to explain to them what this line of code is supposed to be doing, even if maybe you have a bug and it's not actually doing that. So I've begun, in these pre-created examples, to comment my code, but the lines are essentially the same. Go ahead and give me access to the CS50 library. And a library, again, is just a file of code that someone else wrote that we're using. And give me access to the standard I/O library, which contains printf and some other things, as well. Notice here, I have x equals get_int in order to get one integer from the user called x. Now I'm going to ask them for a second integer by just calling it y and calling get_int again. And now I can do things like compare these values. So this is now a complete version of the Scratch-like program I pulled up before that allows us to conclude is x less than y, greater than y, or, by default, equal to y. So the only difference is we saw these lines of code on the screen before. Now we see, in context, that, oh, for those lines to work, we need to get the integers from the user. And we need to have the equivalent of when green flag clicked, and we need the equivalent of these includes so that it's a complete self-contained program. And just to be clear, even though I made this in advance, if I wanted to run this program, how could I run it? Call conditions.c. Yeah, so make conditions first. Sorry. Oh, this is actually a teachable moment. Why did this not work? So no rule to make target conditions stop, which is a little emphatic. But what does that mean? Well, in advance today, what I did was I downloaded into my sandbox a folder called src1, S-R-C meaning "source" in programmer speak. And I just downloaded this into the sandbox for me. Because in that folder are all of the examples not only that I wrote in live, but also some others that I brought with me. Unfortunately, all of those files are in a folder called src1. Now, on your Mac or PC, if you want to open a folder, you do what I did. You double-double the icon, and boom, the folder is open. But in a terminal window, a text-based environment, you can't do that. If I type ls, we'll see all of the files that I've created today-- float and hello and int. But notice over here, there's a folder. And that's what the trailing slash is. That's a forward slash that just means, hey, human, this is a folder, just so it's obvious. Just like the asterisk means here's a machine code that you can run. I need to change into that directory, but I can't double-click. Nothing's going to happen if I double-click on this text. But I can type cd space src1. cd means change directory. And now I hit Enter. And now if I hit ls, notice I see even more files, because these are all of the files from the course's website that I brought with me today. And if you type a command like this, pwd, this will reveal even more information about the system, but more on this in the weeks to come. You're actually inside a src1 folder that's inside of a sandbox folder that's inside of a root folder. Now, odds are, at some point, you'll get confused as to where you are. When in doubt, just type cd. That will whisk you away to the default folder where you began, no matter where you found yourself to. Type ls, and you're back at the beginning. So when in doubt, just type cd and Enter, and you'll be back at the beginning.