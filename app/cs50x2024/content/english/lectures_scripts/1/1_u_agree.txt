Well, let me go ahead and open up this program, but run this one first. I'm going to go into a program called agree.c. I'm going to hide the code for a moment and make agree. I did it again, cd src1, Enter. Now I can do make agree. It seems to have compiled the program. And if I do ./agree, this program seems to be asking me a question-- do you agree? Now, it's not obvious from the program what I should type, but my gut tells me, sure, yes. So I'm going to go ahead and type y for yes and Enter. And it seems to know that I've agreed. If I rerun it again-- ./agree-- and type n this time, not agreed. But you know what? It's actually better than that. If I do ./agree and maybe do a capital Y, Enter, that also seems to work. So how is this happening? Well, let me look at the code here. The top of the file is almost identical to everything thus far. Include those two files, int main void. But now I'm using get_char, and I'm storing my answer in a variable called c, but I could store it in anything I want. And now notice the slightly new syntax. What's clearly new about what I'm doing here? What symbols jump out? Yeah, the vertical bar. So this is a way of saying a logical or. So in Python and a few other languages these days, you might literally write the word "or." That doesn't work in C. If you want to ask this question or this question and just take either answer as a valid answer, you just use two vertical bars, which are typically above your Enter key on an American keyboard, at least. So two vertical bars means or. Two ampersands, it turns out, means and. But this is just a way of asking two questions in the same breath and accepting either answer as potentially true. So if c is capital Y or c is lowercase y, assume that the human has agreed. Else, if c equals capital N or lowercase n, assume that they've not agreed. And suppose I type in some other letter all together, what's the program going to do? Say again? AUDIENCE: Ask you again. DAVID MALAN: It's not going to ask me again, because there's no loop here, right? There's no evidence of while or for loop. And get_char is literally going to get a char, but it doesn't specify what char. What happens if I don't type y or n, capital or lowercase? It seems nothing. Just nothing's going to happen, and that's OK. Your program doesn't have to print something. And indeed, if I run this again and ./agree x. It doesn't do anything. So I've neither agreed nor disagreed. However, you could imagine writing a loop that somehow forces the human to cooperate in some way or another.