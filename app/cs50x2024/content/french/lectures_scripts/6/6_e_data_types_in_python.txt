Eh bien, qu'en est-il des types ? Même dans ce monde, les choses deviennent un peu plus simples. Ce sont les types de données auxquels nous nous sommes intéressés en C. Mais la plupart d'entre eux disparaissent dans Python. Nous avons toujours bool, comme les valeurs majuscules true et false. Il s'avère que nous avons toujours des ints et des floats. Mais nous avons aussi des strs, qui ne sont qu'une version plus courte du mot string.

Et tandis qu'en C, nous avions bien la notion, le concept de chaînes de caractères, nous avons fait comme si le mot string existait, grâce à la bibliothèque CS50 ; en Python, il existe un type de données appelé str ; vous pouvez simplement appeler ça une chaîne de caractères ; cela nous offre encore plus de fonctionnalités que la bibliothèque CS50. Ce n'était donc qu'un tremplin vers ce qui existe ici.

Il existe aussi d'autres types de données dans Python. En fait, quelques-uns d'entre eux sont juste ici. Et nous allons jouer aujourd'hui avec quelques-uns de ces types de données, car si vous pensez à ce que nous avons fait ces deux ou trois dernières semaines en introduisant non seulement des tableaux, mais ensuite liés à des listes, des tables de hachage, des arbres, des tris et des piles, nous avons commencé à parler de tout cet ensemble d'outils de structures de données ; dans Python, comme par magie, si vous voulez une table de hachage, elle est incluse. Si vous voulez une liste chaînée, elle est incluse ; plus de pointeurs, plus de création de ces structures de données de bas niveau par vous-même. Vous pouvez simplement les utiliser prêtes à l'emploi.

Voici donc une liste pour résumer certains des types de données les plus puissants que nous obtenons dans Python, que nous n'avions pas en C, à moins de les écrire nous-mêmes. Vous pouvez avoir une plage, comme nous venons de le voir, qui n'est qu'une séquence de nombres, comme 0, 1, 2 ou tout autre chiffre. Nous pouvons avoir une liste, qui est une séquence de valeurs mutables, une façon élégante de dire que ce sont des valeurs qui peuvent être modifiées. Mutable, comme mutation, signifie simplement que vous pouvez modifier ces valeurs. Vous pouvez donc ajouter, supprimer et remplacer les valeurs de la liste initiale.

Une liste, dans Python, est comme un tableau en C, mais dont la taille peut être automatiquement augmentée ou diminuée. Vous n'avez donc plus besoin de faire toutes ces choses maloc ou realloc. Un tuple est une séquence de valeurs immuables, une façon élégante de dire une séquence de valeurs qu'une fois que vous les y avez mises, vous ne pouvez plus les modifier. C'est parfois utile pour les coordonnées, comme x virgule y, pour les coordonnées GPS ou autres. Mais lorsque vous savez que vous n'allez pas modifier les valeurs, vous pouvez utiliser un tuple à la place.

Dict, ou dictionary, est une collection de paires clé / valeur. Et c'est le type de données abstrait, pour reprendre un mot d'il y a quelques semaines, qui, en coulisse, est implémenté avec ce que nous avons appelé (et que vous avez construit pour Pset5) une table de hachage. Python propose donc des tables de hachage. On les appelle des dictionnaires, abrégés dict dans le langage. Et cela vous permettra simplement (si vous voulez une table de hachage) de la déclarer, comme vous le feriez pour un int ou un float. Il n'y a plus à implémenter ça vous-même.

Enfin, au moins parmi ceux que nous allons voir aujourd'hui, un set est une collection de valeurs uniques. Vous vous souvenez peut-être de ce terme dans un cours de mathématiques. Il s'agit donc simplement d'une collection de valeurs. Mais même si vous y mettez plusieurs copies de la même valeur, il va jeter les doublons pour vous, ce qui est parfois pratique.

Il existe aussi d'autres types de données. Mais c'est plus que suffisant pour commencer aujourd'hui. En effet, tout ce que nous allons voir aujourd'hui dérive finalement de la documentation. Et la documentation de Python est très complète. Mais je vous préviens, elle n'est pas très conviviale.

Donc, à partir de cette semaine, dans n'importe quel langage, Google va être votre ami. Et parfois Stack Overflow sera votre ami. Et vos assistants pédagogiques dans ce cours seront sans aucun doute vos amis, pas dans le sens où vous devriez commencer à chercher sur Google comment mettre en œuvre l'ensemble du problème 6, mais plutôt, comment itérer sur des valeurs dans Python ?

Ou comment convertir une chaîne en minuscules ? Ces types de blocs de construction, franchement, ne sont pas intellectuellement intéressants à mémoriser grâce à nos cours ; vous pouvez simplement les prendre sur l'étagère ou sur Google lorsque vous en avez besoin, c'est exactement comme ça que des gens comme Brian et moi, [INAUDIBLE] et Rodrigo programmons tous les jours.

Vous n'avez pas nécessairement besoin de mémoriser tout ce qui est indiqué dans la documentation. Mais vous savez comment le trouver. Et en effet, l'un des objectifs de cette classe est de supprimer les dernières de ces petites roues et de vous permettre d'apprendre de nouvelles choses par vous-même, en l'ayant fait avec la structure de soutien de la classe elle-même.