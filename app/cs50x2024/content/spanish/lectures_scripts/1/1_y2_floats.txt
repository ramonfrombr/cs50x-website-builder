De hecho, permítanme continuar y hacer esto. Permítanme escribir un programa que continuaré y llamaré float.c. Y este solo será un programa que obtiene un par de valores de punto flotante del usuario. Permítanme continuar e incluir la biblioteca CS50. Sigamos adelante e incluyamos stdio.h, int main void, como antes. Y todo lo que quiero hacer aquí con este programa es obtener un par de flotantes. Así que dame un flotante. Lo llamaremos x. Get_float, y le pediré al humano que digite x. Luego permítanme continuar y obtener otro. Lo llamaré y. Get_float, entre comillas y. Y recuerda que un float es solo un número que tiene un punto decimal, un llamado número real. Ahora hagamos una simple división. Afirmo que las computadoras pueden hacer sumas, restas, etc. Así que hagamos eso. Simplemente digámosle que x dividido por y será igual a lo siguiente: porcentaje f barra invertida n x dividido por y punto y coma. Así que esa es una calculadora muy simplista que he implementado y que solo admite la división. Permítanme continuar y compilar esto escribiendo make floats. Y verás que sí se compiló. Entonces flota con punto barra. x será, digamos, 1. y será 10. OK, viola. x dividido por y es igual a 0.10000. Eso es bastante bueno. Y recuerda, si no quieres ver todos esos ceros, puedes simplemente decir, muéstrame un punto decimal agregando 0.1. Vuelve a compilar y luego vuelve a ejecutarlo. Y ahora haz 1, 10. OK, así que ahora es 1/10. ¿O no lo es? Ahora que tengo esta capacidad de mirar más allá del punto decimal, ¿por qué no miro algunos lugares o un lugar? Permíteme continuar y mirar tal vez 10 lugares después del punto decimal. Permítanme volver a ejecutar esto como make floats, ./floats, 1, 10. Interesante. Muy bien, eso parece un poco extraño. Tal vez fue solo una casualidad. Miremos un poco más lejos. Miremos 50 decimales. Sigamos adelante y volvamos a compilar esto. Y resulta que hay algunos atajos de teclado. Ahora estoy presionando hacia arriba y hacia abajo en mi teclado, lo que se desplazará por todo su historial de comandos para que no tenga que recordar todo. Entonces, para ahorrar tiempo, ahora estoy subiendo y bajando. Permítanme continuar y hacer ./floats ahora, 1, 10. Oh, Dios mío, la división es una mentira. Entonces, cuando los maestros de tu escuela primaria o lo que sea te enseñaron que 1 dividido por 10 es 1/10, o 0.10000 infinitamente, aparentemente eso no es cierto. Según esta computadora, 1/10 es en realidad este valor. Entonces, ¿cómo conciliamos eso? ¿Quién tiene razón, las matemáticas de la escuela primaria o las computadoras? ¿Y qué podría explicar? ¿Algunas ideas? ¿Sí? AUDIENCIA: Solo almacena tanto, entonces la mitad de eso, no sabes lo que está pasando allí. DAVID MALAN: Sí, es una buena forma de decirlo. Las computadoras solo pueden almacenar hasta cierto punto, por lo que después de cierto punto, no sabes lo que está pasando ahí fuera. Me gusta eso. Porque eso es realmente cierto. Si solo tienes una cantidad finita de hardware, como una cantidad finita de memoria, en algún momento, la computadora tiene que decidir, no puedo contar más alto que este valor. O no puedo almacenar más que esta cantidad de números después del punto decimal. Es posible que estés utilizando 32 bits, que es un float. Podrías usar más bits, como un doble, como lo describí anteriormente, literalmente usa el doble de bits, 64 bits. Eso significa que podríamos llegar más lejos antes de ver esa imprecisión. Pero lo verás. Las computadoras, de hecho, no son perfectas en este sentido. Solo pueden almacenar una cantidad finita de información. Y en ese sentido, la computadora está almacenando la coincidencia más cercana posible para 1 dividido por 10 que puede. Porque no es posible almacenar un número infinito de números con un 100% de precisión utilizando una cantidad finita de información. Y vemos esto en otro contexto también.