Si vous avez vu notre vidéo sur les structures, vous savez déjà que nous avons la capacité de définir nos propres types de données. Mais si vous avez utilisé des structures, vous savez que parfois utiliser ces types de données peut être un peu fastidieux car nous devons utiliser le mot-clé struct lorsque nous travaillons avec eux, comme struct voiture ou struct étudiant. C'est beaucoup à taper si nous voulons simplement avoir quelque chose de simple, comme une structure. Nous voulons être en mesure de travailler avec les choses de façon un peu plus simple, comme int ou char, quelque chose de plus pratique à taper. Heureusement, il y a un moyen de le faire en C, avec quelque chose appelé typedef, qui est une façon de créer des noms abrégés ou réécrits pour les types de données. Vous pouvez réécrire des types de données qui existent déjà, ou vous pouvez écrire vos propres types de données.

La première chose à faire est de définir un type de la manière habituelle, puis vous définissez le nouveau nom en écrivant - typedef ancien nom nouveau nom. Assez simple, non? Nous pourrions, par exemple, définir le type de données déjà existant de unsigned char en tant que byte. Et ensuite, à partir de maintenant, après avoir effectué cette définition de type - qui sera généralement en haut de nos fichiers point C, ou dans un fichier point H séparément, nous pouvons simplement utiliser byte partout où nous aurions utilisé unsigned char. C'est beaucoup plus court à taper.

Dans la bibliothèque CS50, nous faisons ceci - nous définissons char astérisque comme string, c'est-à-dire, une chaîne de caractères. Et ça, c'est parce que nous avons abstrait l'idée de pointeurs. Et le fait qu'une string est vraiment un pointeur vers le premier caractère d'une chaîne de caractères, c'est un concept tellement difficile à comprendre - mais en fait c'est ce que nous faisons. Et cette ligne de code existe réellement dans CS50 point H: typedef char astérisque string, juste pour rendre cela un peu moins fastidieux à devoir traiter. Vous avez déjà vu probablement un peu de la valeur ici, mais typedef devient formidable lorsqu'il est combiné avec des structures, comme je l'ai déjà mentionné. Les structures ont un nom de type de deux mots. Et donc ils peuvent être vraiment ennuyeux à créer des variables de ce type, parce que vos lignes peuvent simplement devenir vraiment, vraiment longues. Et donc vous pouvez utiliser typedef pour travailler avec quelque chose de beaucoup plus court.

Si je définis une voiture comme suit, j'ai ma définition de voiture - struct voiture, puis accolade ouverte, tous les champs de ma structure, accolade fermée, point-virgule - après avoir défini mon type de données, je peux écrire typedef struct voiture voiture tiret bas t (voiture_t), pour renommer le type de données struct voiture en voiture tiret bas t. Et ensuite, une fois que j'ai fait cela, maintenant à chaque fois que j'aurais utilisé struct voiture, je peux simplement utiliser voiture tiret bas t (voiture_t). C'est une façon beaucoup plus courte d'exprimer cette idée de cette structure que je viens de créer.

Alternativement, étant donné que les structures sont si couramment utilisées dans typedef, vous pouvez en fait définir le type entre le début et la fin. Donc, le typedef d'une structure est généralement typedef, ancien nom, nouveau nom, où les noms sont déjà des types que vous avez créés. Mais vous pouvez en fait définir une structure juste au milieu du typedef au lieu de devoir la définir séparément, puis en faire un typedef. Et cela ressemblerait à ceci - typedef struct voiture, accolade ouverte, toutes vos définitions de champs, accolade fermée, voiture tiret bas t (voiture_t). Donc, l'ancien nom est tout ce truc en rouge, vous définissez simplement la structure et la nommez en même temps. Et ensuite, le nouveau nom est voiture tiret bas t. Et donc si nous commençons à utiliser ceci dans le code, auparavant je pourrais avoir dit, struct voiture ma_voiture point-virgule. Eh bien, je n'ai plus besoin de le faire. Maintenant que j'ai utilisé le typedef, je peux simplement dire voiture tiret bas t, ma_voiture. C'est une façon beaucoup plus courte de le faire, et en fait, cela va être beaucoup plus pratique, surtout lorsque vous commencez à utiliser des structures beaucoup plus dans votre code.

Je m'appelle Ramon. Ceci est CS50.