[MUSIC PLAYING] DAVID MALAN: This is CS50, Harvard University's introduction for the intellectual enterprises of computer science and the art of programming. My name is David Malan, and I actually took this course myself sophomore year some years ago. But I almost didn't. At the time, I was quite uneasy with the idea, frankly, of taking a computer science course, let alone this course. And so my freshman year, at least, I really gravitated toward courses and departments with which I was much more familiar. Computer science was well beyond my comfort zone at the time, and it was really these unfamiliar waters that I wasn't quite ready to shop, even my first year. But sophomore year, I finally got up the nerve to come through the door of CS50, and only because the professor at the time let me take the course pass/fail. I was that uneasy. And if only I had known at the time what I now know, which is that 2/3 of CS50 students have never taken a computer science course before. So if you are feeling similarly uneasy with the idea of trying something new, or even if you have prior background but are looking to fill in gaps in your knowledge, or if you're particularly self-taught, realize you are very much in good company. And ultimately, what matters in this course is not so much where you end up relative to your classmates, but where you end up relative to yourself when you began, which is, of course, today. So what, then, is computer science? And what was it that I was so uneasy with? Well, I dare say we can describe computer science as this. It's just the process of solving problems. And what does it mean to solve a problem? You've got some input. And the goal is to get some output, the solution, to that particular problem. And in between, really, is computer science. And we'll see what's in this literal black box on the screen as we begin to fill in some of those blanks. But when we consider a problem to be solved, we have to all agree from the get-go, especially if we're using machines, how are we going to represent these inputs and outputs? And so one of the first concepts we explore in computer science is how you represent information itself. And odds are you probably know coming into this course that computers only speak what language, so to speak? AUDIENCE: Binary. DAVID MALAN: Yeah. So binary. And if you've never heard that term before, fine, as well. But zeros and ones, somehow. But how do we get to that point? Well, even if you kind of know that computers speak binary, whatever that means, but you haven't necessarily thought about how that works, well, consider how most of us learn how to count maybe first on our hands. If I want to count the number of people in the room, I might do 1, 2, 3, 4, 5, putting up one finger for every person in the room. So that's what's known as unary notation. [? U, ?] or uno, implying 1 because I'm just putting up a finger or not to count people in the room. Of course, I can only count so high on just one hand. But thankfully, we have many symbols in our so-called human world of decimal. Dec meaning 10, we have digits 0 through 9. And from there, we can express any numbers with which we're all familiar. But computers don't have that many digits. They only have zeros and ones. And yet somehow, they're able to store not only numbers, but letters and images and videos and sounds and so much more. So how does that work? Well, let's take a quick look at just this to get everyone on the same page as to how you can build the phones in our pockets, the laptops on our desk today, using just zeros and ones. Well, these are just symbols on the screen here. What does this, of course, represent? 123, but why? I mean, these literally are just symbols or glyphs on the screen, sort of strokes of a pen that we all ascribe meaning to. We just see this as 123. But why is that? Well, if you're like me, you probably learned way back when to think of the rightmost digit as being in the ones place or the ones column, the middle digit as being in the tens place, and the leftmost digit as being in the hundreds place. So how do we get from this pattern of 1, 2, 3 to the number 123? Well, it's some quick mental math that we all just do instinctively. It's 100 times 1, plus 10 times 2, plus 1 times 3. That, of course, gives us 100 plus 20 plus three, or 123. So all of us just kind of take that process for granted now. But it turns out that there's a system at play here, a system such that we can figure out any number in the same way. So if we've got our ones place, tens place, and hundreds place, of course, in the decimal world, this is the number 1, this is the number 2, 3, 4, 5, 6, 7, 8, 9. Something interesting happens, of course, after 9. You sort of carry the 1. And why then does 010, or if we ignore the leading zeros as being insignificant, why does one 0 represent the number we all know obviously as 10? Well, just because it's 10 times 1 plus 1 times 0. So that's the system we've been using for years. And it turns out that these columns, realize, are just powers of 10. So 10 to the 0 is 1, 10 to the 1 is 10, and 10 to the 2 is 100. That's how we got ones, tens, and hundreds place.