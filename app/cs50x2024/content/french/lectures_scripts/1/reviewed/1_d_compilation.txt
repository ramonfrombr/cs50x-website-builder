D'accord, donc maintenant je peux écrire du code. Comment est-ce que je m'y prends pour l'exécuter ? Eh bien, comment exécutez-vous un programme sur votre ordinateur? Que faites-vous généralement? Vous double-cliquez dessus, n'est-ce pas? Malheureusement, il ne semble y avoir rien d'évident pour double-cliquer ici. En fait, il n'y a pas d'icône sur mon écran. Et en fait, pour l'instant, il n'y a pas de programme à proprement parler. Parce que les ordinateurs, souvenez-vous de la semaine dernière, ne comprennent pas l'anglais ou le français. Ils ne comprennent pas techniquement non plus le langage C. Quel est donc le langage parlé et compris par les ordinateurs? Le binaire. donc, des zéros et des uns. Et pourtant, il ne s'agit clairement pas de zéros et de uns. Et franchement, aucun d'entre nous ne passerait un bon moment si le codage impliquait, de nos jours, d'écrire littéralement des zéros et des uns, ce qui était en quelque sorte le cas à l'époque. Mais aujourd'hui, il s'avère qu'il existe une solution à ce problème. Même si cela semble cryptique pour la plupart d'entre nous dans cette salle, vous pouvez au moins imaginer vous familiariser avec cette syntaxe, une fois que vous aurez appris les règles, la syntaxe, etc. Mais nous devons la convertir d'une manière ou d'une autre en zéros et en uns. Et la façon de le faire n'est peut-être pas évidente.

Il s'avère donc que si nous voulons convertir un code comme celui-ci en zéros et en uns que l'ordinateur comprend, il faut une étape intermédiaire. En fait, j'ai besoin, sur mon ordinateur ou dans cet environnement basé sur le nuage, le cloud, pour ainsi dire, d'un programme qui va prendre mon code source en entrée, qui est ce langage appelé C, et qui va produire en sortie ce qu'on appelle du code machine. Le code source est donc quelque chose comme C, Python, ou Java, et peut-être d'autres langages dont vous avez entendu parler. C'est une syntaxe de type anglais dans laquelle vous écrivez des programmes.

Le code machine est constitué de zéros et de uns que tout ordinateur comprend réellement. Donc, pour passer du code source au code machine, il faut une sorte d'algorithme ou, plus précisément, un logiciel qui effectue cette conversion. Et ce logiciel est ce que nous allons commencer à appeler un compilateur. Nous allons donc écrire du code littéralement en tapant simplement des commandes au clavier. Nous allons enregistrer ces commandes dans un fichier, tout comme vous avez enregistré votre code dans Scratch. Mais avant de pouvoir exécuter mon programme et faire l'équivalent d'un double-clic dessus, je dois l'exécuter via un compilateur et produire une sortie, qui est constituée de zéros et de uns.

Alors, comment vais-je m'y prendre? C'est la première des commandes les plus ésotériques, mais il s'avère qu'elle est relativement simple à exécuter. En haut de mon environnement de programmation, encore une fois, j'ai mon code ici en haut. Et si je fais défiler vers le bas, j'ai à nouveau cette fenêtre dite de terminal. Et le signe dollar n'est qu'une étrange convention humaine. Le signe dollar signifie simplement de taper quelque chose ici. C'est ce qu'on appelle une invite de commande, ou votre interpréteur de commandes. La première commande que je vais taper est ce qu'on appelle Clang pour le langage C. Clang est le nom d'un programme qui existe pour compiler du code. Quelqu'un d'autre a écrit cela. Quelqu'un d'autre en ligne a créé ce programme appelé Clang, en fait un groupe de personnes. Ils l'ont mis à disposition gratuitement pour que vous et moi puissions le télécharger sur nos propres ordinateurs ou dans cet environnement. Et nous pouvons utiliser Clang pour convertir le code source en code machine.

Je vais donc continuer et exécuter Clang bonjour.c. Je n'ai pas encore appuyé sur la touche Entrée, mais dès que je le fais, nous allons voir quelque chose se produire. Permettez-moi d'aller jusqu'à cette petite icône de dossier ici, et vous pouvez en fait voir tous les fichiers de mon environnement actuel, pour ainsi dire, mon environnement de programmation. Il n'y en a bien sûr qu'un seul, car le seul fichier que j'ai créé jusqu'à présent s'appelle bonjour.c. Mais remarquez ce qui se passe au moment où j'appuie sur la touche Entrée, après avoir tapé Clang bonjour.c. Il est donc clair que quelque chose d'autre existe maintenant, et que c'est un nom vraiment stupide et très cryptique. C'est un a.out, mais vous pouvez peut-être deviner ce qu'il y a à l'intérieur de ce nouveau fichier. Qu'est-ce qui pourrait s'y trouver? Du code machine. C'est donc l'abréviation de la phrase en anglais "assembly output", que en français se traduit comme "sortie d'assemblage", mais cela signifie simplement du code machine. Donc, à l'intérieur de ce fichier, il y a un tas de zéros et de uns qui correspondent à ce code, mais en binaire, dans le langage que l'ordinateur peut comprendre.

Donc, littéralement, ce que je viens de faire était ceci: j'ai pris en entrée du code qui ressemble à ceci, écrit en C. Je l'ai exécuté en entrée dans le compilateur et j'ai produit cette sortie, des zéros et des uns. Et ces zéros et ces uns ont été automatiquement enregistrés pour moi dans un fichier qui, par convention humaine, s'appelle a.out.

D'accord, mais quelqu'un a proposé plus tôt, pour exécuter un programme, en général, sur votre ordinateur, il suffit de double-cliquer dessus. Mais il n'y a vraiment rien sur quoi double-cliquer. Et en fait, si je double-clique dessus, ça va paraître vraiment bizarre, et l'ordinateur ne va pas le comprendre. Parce que ce sont des zéros et des uns qui ne sont pas censés être cliqués. Ils sont destinés à être exécutés à cette invite de commande. Alors, permettez-moi d'aller de l'avant et de faire ceci. Cela aussi, c'est cryptique. Mais je vais continuer et faire [point barre oblique a point aout] (./a.out). Et ceci, aussi étrange que cela puisse paraître à première vue, c'est ainsi que je dis à l'ordinateur d'exécuter le programme a.out dans mon répertoire actuel.

Donc, le point que j'ai tapé en premier signifie simplement qu'il se trouve littéralement ici, dans mon dossier actuel, comme si vous double-cliquiez dessus sur votre ordinateur. Et [barre oblique a point out] (/a.out) signifie qu'il faut chercher dans ce répertoire et exécuter le programme dans le fichier appelé a.out. Alors, permettez-moi de continuer et d'appuyer sur la touche Entrée. Et voilà, "bonjour le monde".

Vous avez donc été très impressionnés la semaine dernière, si je me souviens bien, lorsque j'ai fait dire au chat, bonjour le monde. Ici, nous semblons moins que déçus. Mais bonjour le monde est maintenant mon programme en C qui a fait exactement la même chose. Mais il faut admettre qu'il a l'air un peu stupide pour le moment. Il a l'air un peu bogué. Qu'est-ce qui ne va pas, même si vous n'avez jamais programmé auparavant ? Le signe dollar. Je ne voulais pas dire bonjour le monde signe dollar, mais ce signe dollar est juste un artefact, n'est-ce pas? Qu'est-ce que le signe dollar, encore une fois? C'est juste cette invite. Il attend une autre commande. Mais cela a l'air stupide, n'est-ce pas ? Nous pourrions prétendre que c'était mon intention, mais franchement, je mentirais. Cela ne fait pas tout à fait ce que je veux qu'il fasse. Et c'est parce que, contrairement à Scratch - qui, encore une fois, est plus convivial - C, et de nombreux langages comme celui-ci, ne feront littéralement que ce que vous leur dites de faire. À aucun moment je n'ai dit à l'ordinateur de déplacer le curseur sur une nouvelle ligne. Je n'ai pas terminé cette pensée. J'ai dit bonjour, virgule, le monde, et c'est tout. Je n'ai jamais envoyé de commande à l'ordinateur pour déplacer réellement ce curseur, mais je peux le faire.

Alors, laissez-moi revenir à mon code ici. Et il se trouve qu'en C, si vous dites à l'ordinateur d'afficher "salut virgule le monde", c'est littéralement tout ce qu'il affichera pour vous. Si vous voulez afficher une nouvelle ligne, vous devez utiliser une commande spéciale, un caractère spécial appelé caractère de nouvelle ligne, qui est représenté par le barre oblique inversée N.

Maintenant, pourquoi est-ce le cas ? Eh bien, c'est vraiment parce que même si vous pourriez être tenté d'appuyer sur Entrée comme ceci et espérer que l'ordinateur fasse de même, même si vous n'avez jamais programmé auparavant, cela devrait probablement commencer à vous déranger. Ça semble un peu étrange. Ça a l'air un peu désordonné, cette ligne est là-haut et la deuxième ligne est en bas ici. Donc, ce que les humains ont décidé il y a des années, c'est d'avoir simplement une instruction simple, barre oblique inversée N (\n), qui indique à l'ordinateur de descendre cette nouvelle ligne.

Alors, dans cette environnement, il enregistre les fichiers automatiquement comme Google Docs, donc vous n'avez pas besoin d'aller dans Fichier, Enregistrer ou quoi que ce soit comme ça. Si je lance maintenant le programme [point barre oblique a point out](./a.out) Entrée, ce n'est pas encore corrigé. Notez que le symptôme est toujours là. Pourquoi? Quelle erreur ai-je déjà faite? Je ne l'ai pas recompilé. Donc encore une fois, l'ordinateur va commencer à vous prendre très, très littéralement maintenant que vous le programmez pour faire des choses. Et si vous voulez exécuter la nouvelle version de votre code, vous devrez littéralement faire quelque chose comme Clang et ensuite bonjour.c, Entrée. Et rien ne semble se passer. Et franchement, et ironiquement, quand vous ne voyez pas de sortie, c'est généralement une bonne chose. Quand vous voyez une sortie, c'est généralement une liste de plusieurs erreurs que vous avez faites ou des messages d'erreur que nous verrons bientôt. Mais nous avons toujours a.out. C'est juste une version plus récente de celui-ci. Donc si maintenant je fais cela-- ./a.out, Entrée -- maintenant j'ai une version plus propre de "bonjour, le monde". Je l'ai juste un peu nettoyée. D'accord, laissez-moi faire une pause un moment et voir s'il y a des questions sur ces mécanismes jusqu'à présent.

Pourquoi la ligne 2 est-elle vide ?

Pourquoi la ligne 2 est-elle vide? Très bonne question. La ligne 2 est vide simplement parce que j'ai décidé, stylistiquement, que cela avait l'air un peu mieux. Tout comme dans un essai en français, vous pourriez appuyer sur Entrée, Entrée pour séparer vos paragraphes, les programmeurs sépareront souvent leur code, juste pour le rendre un peu plus facile à digérer afin qu'il ne ressemble pas à un gros bloc de code. Mais ce n'est pas nécessaire, et je pourrais l'omettre.

Pouvez-vous renommer a.out pour avoir plus d'un fichier dans votre répertoire?

Très bonne question. Pouvez-vous renommer a.out pour avoir plus d'un fichier ou programme dans le même répertoire ? Absolument. Laissez-moi faire ça maintenant. Il se trouve que lorsque vous exécutez des commandes sur un ordinateur comme Clang, vous n'avez pas seulement à dire le nom du programme et le nom du fichier. Vous pouvez ajouter des options supplémentaires, également connues sous le nom d'arguments de ligne de commande. Et ici aussi, c'est un peu arcanique. Vous devez savoir ce qui est possible pour taper ces choses. Mais il se trouve qu'avec Clang -- et si vous lisez la documentation, vous le verriez -- vous pouvez en fait dire [tiret O] -o pour la sortie. Et ensuite, vous pouvez spécifier n'importe quel nom que vous voulez pour le fichier dans lequel votre code machine sera sauvegardé. Alors, notez ce qui se passe maintenant. Lorsque j'appuie sur Entrée maintenant, regardez le coin supérieur gauche, où j'ai a.out et bonjour.c. J'ai maintenant bonjour, également. Et donc maintenant, je peux dire ./bonjour au lieu de a.out, et le résultat sera maintenant le même.