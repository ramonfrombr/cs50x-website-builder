Bueno, permítanme seguir adelante y abrir este programa, pero ejecuten este primero. Voy a ir a un programa llamado agree.c. Voy a ocultar el código por un momento y hacer agree. Lo hice de nuevo, cd src1, Enter. Ahora puedo hacer que agree. Parece que ha compilado el programa. Y si hago ./agree, este programa parece estarme haciendo una pregunta: ¿estás de acuerdo? Ahora bien, no es obvio en el programa lo que debo escribir, pero mi instinto me dice, claro, sí. Así que voy a seguir adelante y escribir y para sí y Enter. Y parece saber que he aceptado. Si lo vuelvo a ejecutar de nuevo: ./agree y escribo n esta vez, no de acuerdo. ¿Pero saben qué? En realidad es mejor que eso. Si hago ./agree y tal vez hago una Y mayúscula, Enter, eso también parece funcionar. Entonces, ¿cómo está sucediendo esto? Bueno, déjenme ver el código aquí. La parte superior del archivo es casi idéntica a todo hasta ahora. Incluir esos dos archivos, int main void. Pero ahora estoy usando get_char y estoy almacenando mi respuesta en una variable llamada c, pero podría almacenarla en cualquier cosa que quisiera. Y ahora noten la sintaxis ligeramente nueva. ¿Qué es claramente nuevo sobre lo que estoy haciendo aquí? ¿Qué símbolos saltan a la vista? Sí, la barra vertical. Entonces, esta es una forma de decir un o lógico. Entonces, en Python y algunos otros lenguajes en estos días, podrías escribir literalmente la palabra "o". Eso no funciona en C. Si quieres hacer esta pregunta o esta pregunta y simplemente tomar cualquiera de las respuestas como una respuesta válida, simplemente usa dos barras verticales, que normalmente están encima de tu tecla Enter en un teclado estadounidense, al menos. Entonces, dos barras verticales significan o. Resulta que dos amperios significan y. Pero esta es solo una forma de hacer dos preguntas de una sola vez y aceptar cualquier respuesta como potencialmente verdadera. Entonces, si c es la Y mayúscula o c es la y minúscula, asume que el humano ha aceptado. De lo contrario, si c es igual a N mayúscula o n minúscula, asume que no ha aceptado. Y supongamos que escribo alguna otra letra en conjunto, ¿qué hará el programa? ¿Decir otra vez? AUDIENCIA: Pregúntele de nuevo. DAVID MALAN: No me lo va a volver a preguntar, porque no hay ningún bucle aquí, ¿verdad? No hay evidencia de un bucle while o for. Y get_char literalmente va a obtener un carácter, pero no especifica qué carácter. ¿Qué pasa si no escribo y o n, mayúscula o minúscula? Parece que nada. Simplemente no va a pasar nada, y eso está bien. Su programa no tiene por qué imprimir algo. Y, de hecho, si ejecuto esto de nuevo y ./agree x. No hace nada. Entonces, no he estado de acuerdo ni en desacuerdo. Sin embargo, podrían imaginar escribir un bucle que de alguna manera obliga al humano a cooperar de una forma u otra.