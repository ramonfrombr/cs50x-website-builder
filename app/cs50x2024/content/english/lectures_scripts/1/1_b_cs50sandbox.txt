So how, then, do I go about writing my very first program in C, just as last week, we wrote our very first program in Scratch? Well, consider that the first thing we did in Scratch was to open up a program, a tool-- scratch.mit.edu. You can program, actually, on your own Mac, on your own PC, no matter what operating system you're running. But frankly, it tends to be really annoying and very prone to technical support headaches if all of us try to install requisite software on all of our individual Macs and PCs. Invariably, all of us have different versions of things, and our computers don't quite function the same. So in the earliest weeks of CS50, we use a cloud-based tool-- CS50 Sandbox, which lives at sandbox.cs50.io. And you'll use this for your first problem set this coming week. This is a programming environment similar in spirit to Scratch, but that does not use Scratch. It doesn't use puzzle pieces. It instead uses C, this text-based language that we're starting to see now. So there's two main parts to this programming environment. On the top here, it's just going to be where I write my actual code. Literally, in a moment, I'm going to click that plus, and I'm going to create a new file. And I'm going to start writing code in that file and save it. And then, in the bottom half of this programming environment is what we're going to start calling a terminal window. A terminal window is sort of an old-school interface via which you can run commands by literally typing them at a prompt and then hitting Enter. So unlike in Scratch-- and frankly, unlike in Mac OS and Windows these days-- where you point and click and drag and so forth, interacting with a graphical user interface, a lot of our programming early on is going to involve typing commands. So let's make this more real. The goal at hand, again, is to, quite simply, implement a program in C that says hello to the world, which is functionally going to be similar to the Scratch program at left. But we now need to implement it using the language at right.