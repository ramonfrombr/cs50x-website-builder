Pero espera. Hay más. ¿Qué hay de Pset5? Pset5, recuerda, implementaste una tabla hash. Y, en efecto, decidiste cómo implementar la lista de enlaces subyacente y la matriz, etc. Bueno, ¿sabes qué? Déjame seguir adelante y crear otro archivo, esta vez en Python (no estaba permitido hace dos semanas, pero ahora lo está).

¿Y cómo voy a seguir adelante e implementarlo? Bueno, en Python tenía varias estructuras de datos diferentes para elegir: dict de diccionario, lista, rango, etc. y luego también conjunto. Y podría usar dict o diccionario. Pero en realidad voy a establecer, porque ¿qué es realmente un diccionario? Es un conjunto de palabras únicas. Así que voy a usar algo llamado conjuntos.

Así que voy a seguir adelante y darme una variable llamada palabras. Y voy a inicializarla a un conjunto vacío, por así decirlo, sólo un contenedor que puede crecer para ajustarse a los valores. Pero en caso de que meta la pata y ponga duplicados ahí, está bien. El set se va a deshacer de ellos por mí.

Y luego, recuerda, para (o lo siento) para este programa, no speller.py, sino dictionary.py que corresponde con dictionary.c, teníamos unas cuantas funciones. Ahora, en Python, la forma de implementar una función no es diciendo int main void o algo así. En cambio, se dice más simplemente def de definir y luego el nombre de la función que se desea, como check, y luego las entradas a esa función, como palabra.

Y volveré a esto. Y sólo voy a decir TODO por un momento, porque voy a seguir adelante y predefinir mis otras funciones, como load, que toma un nombre de archivo de diccionario como entrada. Así que voy a seguir adelante y volver a hacerlo. Entonces, tenía una función size, que no tomaba ninguna entrada. Voy a seguir adelante y hacerlo. Y luego, aquí abajo, tenía una función de descarga. Así que voy a seguir adelante y volver a hacerlo.

Entonces, ¿cómo implemento ahora cada una de estas funciones? Bueno, empecemos con la carga. Después de todo, si me entregan el diccionario, lo primero que quería hacer en Pset4 (o Pset5) era cargarlo en la memoria. Bueno, resulta que en Python puedes hacer algo como esto: file=open(dictionay), que es muy parecido a C. Pero es abierto en lugar de fopen. Y lo voy a abrir en modo lectura. Así que hasta ahora, esto se parece bastante a la versión C.

Pero ahora, si quiero iterar sobre cada palabra del archivo, resulta que puedo usar un bucle for, porque un bucle for en Python es mucho más potente que un bucle for en C. Puedo decir literalmente for line in file. Y luego, aquí, puedo seguir adelante y añadir a mi conjunto de palabras, que está en esta variable llamada palabras, usando literalmente una función llamada añadir esa línea en particular (es decir, la palabra del archivo).

Y luego, ya sabes, después de eso, file.close es como lo voy a cerrar. Y luego, todo parece estar bien. Voy a seguir adelante y devolver True. Ahora, hay un error aquí en este momento. Cada línea del diccionario en realidad terminaba con qué carácter técnicamente, aunque no lo veas, ¿por sí mismo?

PÚBLICO: Una nueva línea.

DAVID MALAN: Una nueva línea, ¿verdad? Cada palabra del archivo terminaba con una barra invertida n, aunque cuando abres el archivo, nosotros los humanos no la vemos. Pero está ahí. Así que está bien. Si quieres seguir adelante y eliminar la nueva línea final, por así decirlo, al final de cada línea, puedes simplemente ir a la línea del archivo actual, digamos rstrip, donde rstrip significa tira inversa. Así que elimina del final de la cadena ¿qué carácter? Barra invertida n, y ahora va a mirar la línea, cortará la barra invertida n y pasará como entrada a esta función add la palabra del diccionario.

De acuerdo. ¿Qué queda? Bueno, aquí arriba, ¿cómo reviso el diccionario? Pues resulta que en Python puedes utilizar las condiciones de forma aún más potente que en C. Y si quieres saber si una palabra está en una variable, como una palabra en un conjunto llamado palabras, simplemente nos hacemos la pregunta, si palabra en palabras, ¿sabes qué? Adelante, devuelva verdadero. Si no, siga adelante y devuelva falso, aunque un ligero error: también tuvimos que lidiar con la capitalización en Pset5, ¿verdad? La entrada del usuario del archivo, el texto, puede estar en mayúsculas o minúsculas.

No es gran cosa, ¿quieres poner una palabra en minúsculas? No tienes que hacerlo carácter por carácter. Sólo tienes que llamar a word, que es la palabra que estás buscando, punto, lo que significa que puedes entrar en ella, como una estructura en C. Y aquí, llama a una función que está integrada en esa cadena llamada lowercase.

Muy bien. Bueno, me estoy aburriendo un poco con la implementación de esto. Así que terminemos con esto. Déjame seguir adelante. ¿Y cómo compruebo cuántas palabras hay en mi diccionario? Pues sólo hay que preguntar cuál es la longitud de ese conjunto. ¿Y cómo se hace en free (o cómo se libera toda la memoria utilizada por el programa en Python)? ¿Cómo se deshacen los efectos? Bueno, no lo haces. Se hace por ti. Así que simplemente devolveremos true. Así que esto es, entonces, (me entristece decirlo, quiero decir, me emociona decirlo) la totalidad de Pset5 implementado en Python.