Mais permettez-moi d'apporter une précision. Et je vais passer directement à ce que j'ai appelé cough3.c dans mes exemples en ligne. Il s'avère que vos propres fonctions personnalisées peuvent prendre des entrées. Ce mot void signifie qu'elle ne prend aucune entrée. Et ce mot void signifie qu'il ne renvoie aucune valeur, comme get_int et get_string qui vous retournent quelque chose. Ce n'est pas applicable maintenant, mais nous y reviendrons dans une semaine ou deux. Supposons que vous vouliez rendre la fonction cough plus polyvalente afin qu'elle puisse tousser un nombre quelconque de fois à votre place. Vous savez ce que vous pouvez faire, c'est ceci. Vous pouvez changer l'entrée de la fonction cough pour qu'elle corresponde à une valeur comme n, et vous pouvez ensuite faire quelque chose comme ceci : for int i get 0. i est inférieur à n, donc plus codé en dur. i plus plus. Ensuite, à l'intérieur de vos accolades, vous pouvez imprimer cette ligne de toux. Maintenant, notez-le, la fonction cough a été paramétrée. Elle prend maintenant une entrée d'entier appelée n, et elle utilise cette entrée, n, comme vous auriez pu le faire dans Scratch, pour faire quelque chose n fois : pas une fois, pas trois fois, mais un nombre variable de fois. Je dois changer ma première ligne ici. C'est ce qu'on appelle un prototype. Ce one-liner est ce qu'on appelle un prototype, et il s'agit simplement de faire un copier/coller à partir de votre fonction réelle. Mais maintenant, remarquez ce que je peux faire. Ma fonction principale, encore une fois, est l'essence de mon programme. C'est un peu alambiqué en ce moment. Ne serait-il pas plus agréable si je pouvais simplement dire cough trois fois ? Et en effet, maintenant je n'ai plus besoin de savoir ou de me soucier de la manière dont la toux est mise en œuvre. C'est un programme bien conçu, sans doute. C'est une ligne de code. C'est descriptif. Il dit de tousser. Il prend une entrée, ce qui signifie qu'elle coûte trois fois. Et ce qui est en dessous dans le fichier, même si je pourrais certainement le remonter, c'est juste ce qu'un informaticien appellerait un détail d'implémentation. Quelqu'un se soucie de la manière dont vous implémentez la toux, mais vous n'avez pas à vous soucier de la manière dont vous implémentez la toux. Vous n'avez pas à savoir comment nous obtenons des entiers. Vous n'avez pas à vous soucier de la façon dont vous printf. Tout ce qui vous importe, c'est que quelqu'un d'autre a implémenté cette fonctionnalité afin que vous puissiez vous tenir sur ses épaules et créer des programmes plus intéressants qui vous intéressent réellement.