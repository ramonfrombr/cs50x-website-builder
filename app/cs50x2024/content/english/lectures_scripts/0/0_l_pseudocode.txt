There's a pseudo code. And there's no one formal definition of this. Pseudocode is code-like syntax that you write in English or your own spoken language that represents your ideas, but in a succinct way. And so I might propose that this algorithm for finding Mike Smith might be written in pseudocode English-like syntax as follows. Step one, pick up phone book, which was indeed the first thing I did. Step two, open to the middle of phone book, which is the next thing I did. Step three might be look at the page to see if someone's there and if Smith is on that page, what do I want to do? Well, my code is going to look a little different now, and I'm going to deliberately indent to make clear that there's a dependency here of some sort. I'm going to go ahead and step five and call Mike only if line four is true, that he's on the page. Else if Smith is earlier in the book, to the left, so to speak, I'm going to go ahead and open to the middle of the left half of the book, and then what am I probably going to want to do next? AUDIENCE: [INAUDIBLE] DAVID MALAN: So, yeah, this, ultimately. How do I do this again and again? Well, I already have some code, if you will, on line three that does that. Look at page and then make a decision to go left or go right. So I'll just say go back to line three after going to the middle of the left half of the book if Smith is indeed earlier in the book. The other scenario, of course, is the opposite. So else if Smith is later in book, let's open to the middle of the right half of the book, and then let's go to line three. Else, there's a fourth possible scenario or case. What else might happen in this algorithm? AUDIENCE: [INAUDIBLE] DAVID MALAN: He's not there. And so I probably want to anticipate that and just say quit if, indeed, he's not on the page, to the left of the page, or to the right of the page. So there is one way of expressing this pseudocode albeit now in just this English-like syntax. But in this syntax alone, there's some commonalities, some features we're going to see over the next several weeks not only in pseudocode, but in a language called Scratch, a language called C, a language called Python and more. There are certain constructs in programming, procedural programming, so to speak, that are going to be common among all of these languages. Highlighted in yellow here are what, henceforth, today and onward, we're just going to call functions. These are verbs or actions that just tell the computer, or in this case, the human, what to do. So those are functions. Now highlighted in yellow instead are what we're going to call conditions. These are branches, sort of forks in the road so you can either do this or you can do that or maybe this other thing as well. But to make those decisions, you have to ask yourself a question. And those questions, in computer science, are called Boolean expressions, after a mathematician named Boole. And a Boolean expression, highlighted now in yellow, are just questions that have yes or no answers or, if you will, true or false answers or, heck, now that we know binary, one or zero answers. So even in code, we see a hint of why ones and zeros are helpful. Lastly, there's this thing here. Go back to line three. We've used it in two places. That refers to something we'll call a loop. It's a cycle that does something again and again.