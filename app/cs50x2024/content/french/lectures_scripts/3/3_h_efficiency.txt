Comment pourrions-nous maintenant y penser ? Eh bien, comme dans la semaine 0, nous avions un graphique comme celui-ci. Et nous avons prétendu que ces algorithmes étaient soit linéaires par nature, littéralement une ligne droite, comme celui d'Eric, ou un peu plus courbés ou logarithmiques, pour ainsi dire, comme [? Celui de Nizari. ?] Et ceux-ci avaient des formes fondamentalement différentes. Et nous y faisons référence réellement par le nombre d'étapes qu'ils pourraient prendre dans le pire des cas.

Si l'annuaire téléphonique ou aujourd'hui, le nombre de casiers était au total de n, cela pourrait prendre jusqu'à n étapes pour qu'Eric ou quiconque trouve Mike Smith ou le numéro 50 de gauche à droite. Si dans la semaine 0, j'ai fait deux pages à la fois, vous pouvez réellement accélérer cela, mais la forme de la ligne était la même. Eric ne l'a pas fait ici, mais il aurait pu le faire. Avec deux mains, il aurait peut-être pu regarder deux casiers à la fois. Cela aurait donc pu être une étape intermédiaire entre ces deux extrêmes. Mais logarithmique était cette forme plus courbée.

Mais aujourd'hui, nous allons commencer à formaliser un peu cela afin de ne pas continuer à parler uniquement de recherche et de recherche binaire dans la recherche linéaire, mais aussi d'autres algorithmes. Et les informaticiens ont désormais une terminologie avec laquelle décrire les algorithmes et dans quelle mesure votre algorithme est bien conçu ou dans quelle mesure votre code est bien implémenté. Et c'est généralement appelé grand O, littéralement un O en majuscule et en italique.

La notation Big O signifie juste de l'ordre de grandeur. Donc, si quelqu'un vous demandait quelle est l'efficacité de votre algorithme ou l'efficacité de votre code, vous pourriez en quelque sorte agiter votre main, littéralement et figurativement, et lui donner une approximation de la vitesse ou de la lenteur de votre code. Ainsi, au lieu de dire littéralement n étapes ou n/2 ou journal n étapes, un informaticien dirait généralement, ah, cet algorithme est de l'ordre de n ou de l'ordre de n/2 ou de l'ordre de journal n.

C'est donc juste une syntaxe d'apparence cryptique que vous prononcez verbalement comme « de l'ordre de grandeur ». Et c'est un peu écrit comme une fonction mathématique, comme nous l'avons ici. Mais il s'avère que lorsque vous utilisez la notation Big O, c'est vraiment une sorte d'agitation de la main. Comme si cela ne devait être qu'une approximation.

Et vous savez quoi ? Dans ce cas-là, ces lignes se ressemblent tellement que je vais supprimer le divisé par 2. Et nous verrons pourquoi cela fonctionne dans un instant. Mais ceux-ci sont tellement similaires que je vais simplement les appeler de la même manière. Et il s'avère que - et ce n'est pas grave si vous ne vous souvenez pas très bien des logarithmes - la base 2 là-bas n'a pas vraiment d'importance. Je vais jeter ça.

Il peut être de base 2, 3 ou 10. Ils sont tous des multiples l'un de l'autre. Ce n'est pas grave non plus, je le prétends. Et si vous ne vous en souvenez pas, ce n'est pas grave non plus.

Mais la raison pour laquelle je prétends que cette ligne rouge et cette ligne jaune sont essentiellement la même chose est que si le problème devient suffisamment grand, c'est-à-dire que la taille du problème devient de plus en plus grande, et que je n'ai pas beaucoup d'écran ici, permettez-moi plutôt de simplement zoomer pour que nous voyions plus d'axe des y et plus d'axe des x. Remarquez à quel point les lignes jaunes et rouges se rapprochent encore plus l'une de l'autre. Et honnêtement, si je continuais de zoomer pour que nous puissions voir des problèmes de plus en plus gros, ceux-ci, franchement, se ressembleraient beaucoup.

Ainsi, lorsqu'un informaticien décrit l'efficacité d'un algorithme, il dit qu'il est de l'ordre de n, même s'il est techniquement de l'ordre de n/2. Et ici aussi, de l'ordre de [? Loi, ?] [? Encore ?] quelle que soit la base. C'est donc plutôt sympa, non ? Même si cela ressemble à un peu de maths, vous pouvez toujours agiter votre main et faire une petite approximation.