Now, once I ask the user for their name by way of this get_string function, I need to do something with it. And in C, the way you do this is you literally give yourself a variable, which is a piece of storage for a value. And I'm going to go ahead and call it answer, just like Scratch did. But in C, I can call this anything I want. I could call it xyz. None of those are very descriptive, so I'm going to call it answer instead. You can use any word. But C is a little different. C is old school, and you have to be super explicit as to what type of value you are getting and, therefore, storing in the variable. So to the left of the name of the variable, I have to tell the computer the type of value I need to store is going to be a string. And we're going to see in a moment, there's other types of values. There's numbers and more, but for now, we're just going to store a string. And there's one thing missing from this line of code. AUDIENCE: Semicolon. DAVID MALAN: Semicolon, right? End of thought, and that was a big thought, but a semicolon finishes this thought. Now, this equals sign is a little different from algebra, if you think back to your math days, where you might say x equals y. When x equals y, that means, literally, x is the same thing as y. But here, the equals sign in programming languages typically is the kind of a motion from right to left. This equal sign doesn't technically mean equal. It means assign, or the assignment operator. Move from the right something to the left. So if this get_string function, just like the ask function, asks the user for their name and hands back a value, you want to put that name into a variable called answer, from right to left. So even though we-- just as we wrote it from right to left, so do you think about it executing from right to left.