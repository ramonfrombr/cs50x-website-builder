[1]

Ponteiros
• Os ponteiros fornecem uma forma alternativa de passar dados entre funções.
• Lembre-se de que até agora, passamos todos os dados por valor, com uma exceção.
• Quando passamos dados por valor, passamos apenas uma cópia desses dados.
• Se usarmos ponteiros, podemos passar a variável real em si.
• Isso significa que uma alteração feita em uma função pode impactar o que acontece em uma função diferente.
• Anteriormente, isso não era possível!

[2]

Ponteiros
• Antes de mergulharmos no que são ponteiros e como trabalhar com eles, vale a pena voltar ao básico e dar uma olhada na memória do nosso computador.

[3]

Ponteiros
• Cada arquivo em seu computador reside em sua unidade de disco, seja uma unidade de disco rígido (HDD) ou uma unidade de estado sólido (SSD).
• As unidades de disco são apenas espaço de armazenamento; não podemos trabalhar diretamente lá. A manipulação e o uso de dados só podem ocorrer na RAM, portanto, precisamos mover os dados para lá.
• A memória é basicamente uma enorme matriz de bytes de 8 bits de largura.
• 512 MB, 1 GB, 2 GB, 4 GB...

[10]

Ponteiros
• De volta a esta ideia de memória como uma grande matriz de células do tamanho de um byte.
• Lembre-se da nossa discussão sobre matrizes, que não são apenas úteis para armazenamento de informações, mas também para o chamado acesso aleatório.
• Podemos acessar elementos individuais da matriz indicando qual local de índice queremos.
• Da mesma forma, cada local na memória tem um endereço.

[23]

Ponteiros
• Há apenas uma coisa crítica a lembrar quando começamos a trabalhar com ponteiros:
PONTEIROS SÃO APENAS ENDEREÇOS

[29]

Ponteiros
• Ao começarmos a trabalhar com ponteiros, mantenha esta imagem em mente:
5
k
pk
int k;
k = 5;
int* pk;
pk = &k;

[30]

Ponteiros
• Um ponteiro, então, é um item de dados cujo
• valor é um endereço de memória
• tipo descreve os dados localizados naquele endereço de memória
• Como tal, os ponteiros permitem que estruturas de dados e/ou variáveis sejam compartilhadas entre funções.
• Os ponteiros tornam um ambiente de computador mais parecido com o mundo real.

[31]

Ponteiros
• O ponteiro mais simples disponível para nós em C é o ponteiro NULL.
• Como você deve imaginar, este ponteiro não aponta para nada (um fato que pode realmente ser útil!)
• Ao criar um ponteiro e não definir seu valor imediatamente, você deve sempre definir o valor do ponteiro como NULL.
• Você pode verificar se um ponteiro é NULL usando o operador de igualdade (==).

[32]

Ponteiros
• Outra maneira fácil de criar um ponteiro é simplesmente extrair o endereço de uma variável já existente. Podemos fazer isso com o operador de extração de endereço (&).
• Se x for uma variável do tipo int, então &x é um ponteiro para int cujo valor é o endereço de x.
• Se arr é uma matriz de doubles, então &arr[i] é um ponteiro para double cujo valor é o endereço do elemento i-ésimo de arr.
• O nome de uma matriz, então, é na verdade apenas um ponteiro para seu primeiro elemento - você tem trabalhado com ponteiros o tempo todo!

[33]

Ponteiros
• O objetivo principal de um ponteiro é nos permitir modificar ou inspecionar o local para o qual ele aponta.
• Fazemos isso desreferenciando o ponteiro.
• Se temos um ponteiro para char chamado pc, então *pc é o dado que reside no endereço de memória armazenado dentro da variável pc.

[34]

Ponteiros
• Usado neste contexto, * é conhecido como o operador de desreferência.
• Ele "vai para a referência" e acessa os dados naquele local de memória, permitindo que você os manipule como desejar.
• É como visitar seu vizinho. Ter o endereço dele não é suficiente. Você precisa ir ao endereço e só então poderá interagir com ele.


[37]

Ponteiros
• Você consegue adivinhar o que pode acontecer se tentarmos desreferenciar um ponteiro cujo valor é NULL?
Falha de segmentação
• Surpreendentemente, este é realmente um bom comportamento! Ele defende contra manipulação perigosa acidental de ponteiros desconhecidos.
• É por isso que recomendamos que você defina seus ponteiros como NULL imediatamente se não os estiver definindo como um valor conhecido e desejado.

[38]

Ponteiros
int* p;
• O valor de p é um endereço.
• Podemos desreferenciar p com o operador *.
• Se fizermos isso, o que encontraremos naquele local é um int.

[40]

Ponteiros
• Mais uma coisa chata com esses *s. Eles são uma parte importante do nome do tipo e do nome da variável.
• Melhor ilustrado com um exemplo.
int* px, py, pz;
int* pa, *pb, *pc;

[44]

Ponteiros
Tipo de dados
Tamanho (em bytes)
int
4
char
1
flutuar
4
dobro
8
longo e longo
8
char*, int*, float*,
double*, _______*
4 ou 8