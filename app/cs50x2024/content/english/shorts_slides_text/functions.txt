[1]

Functions
● So far, all the programs we’ve been writing in the course have been written inside of main().
● That hasn’t been a problem yet, but it could be if our programs start to become unwieldy.
● C and nearly all languages developed since allow us to write functions, sometimes also known as procedures, methods, or subroutines.
● Let’s see what functions are all about.

[2]

Functions
● What is a function?
● A black box with a set of 0+ inputs and 1 output.

[7]

Functions
● Why call it a black box?
● If we aren’t writing the functions ourselves, we don’t need to know the underlying implementation.
mult(a, b):
set counter to 0
repeat b times
add a to counter
output counter

[8]

Functions
● Why call it a black box?
● If we aren’t writing the functions ourselves, we don’t need to know the underlying implementation.
● That’s part of the contract of using functions. The behavior is typically predictable based on that name. That’s why most functions have clear, obvious(ish) names, and are well-documented.

[9]

Functions
● Why use functions?
● Organization
● Functions help break up a complicated problem into more manageable subparts.
● Simplification
● Smaller components tend to be easier to design, implement, and debug.
● Reusability
● Functions can be recycled; you only need to write them once, but can use them as often as you need!

[10]

Functions
● Function Declarations
● The first step to creating a function is to declare it. This gives the compiler a heads-up that a user-written function appears in the code.
● Function declarations should always go atop your code, before you begin writing main().
● There is a standard form that every function declaration follows.

[11]

Functions
● Function Declarations
● The return-type is what kind of variable the function will output.
● The name is what you want to call your function.
● The argument-list is the comma-separated set of inputs to your function, each of which has a type and a name.
return-type name(argument-list);

[12]

Functions
● A function to add two integers.
● The sum of two integers is going to be an integer as well.
● Given what this function does, make sure to give it an appropriate name.
● There are two inputs to this function, and we need to give a name to each of them for purposes of the function. There’s nothing important about these inputs as far as we know, so giving them simple names is okay.
int add_two_ints(int a, int b);

[13]

Functions
● A function to multiply two floating point numbers.

[14]

Functions
● A function to multiply two floating point numbers.
● The product of two floating point numbers is also a floating point number.
● Let’s be sure to give this a relevant name.
● Again, the names of these particular inputs don’t seem to be important, so we can call them anything simple.
float mult_two_reals(float x, float y);

[16]

Functions
● Function Definitions
● The second step to creating a function is to define it. This allows for predictable behavior when the function is called with inputs.
● Let’s try to define mult_two_reals(), from a moment ago.

[17]

Functions
● A function definition looks almost identical to a function declaration, with a small change.
● How would you fill in this black box?
float mult_two_reals(float x, float y);
float mult_two_reals(float x, float y)
{
float product = x * y;
return product;
}

[20]

Functions
● Now, take a moment and try to define 
add_two_ints(), from a moment ago.
int add_two_ints(int a, int b);
int add_two_ints(int a, int b)
{
int sum;      // declare variable
sum = a + b;  // calculate the sum
return sum;   // give result back
}

[21]

Functions
● Now, take a moment and try to define 
add_two_ints(), from a moment ago.
int add_two_ints(int a, int b);
int add_two_ints(int a, int b)
{
int sum = a + b;  // calc variable
return sum;       // give result back
}

[23]

Functions
● Function Calls
● Now that you’ve created a function, time to use it!
● To call a function, simply pass it appropriate arguments and assign its return value to something of the correct type.
● To illustrate this, let’s have a look at adder-1.c

[24]

Functions
● Function Miscellany
● Recall from our discussion of data types that functions can sometimes take no inputs. In that case, we declare the function as having a void argument list.
● Recall also that functions sometimes do not have an output. In that case, we declare the function as having a void return type.

[25]

Functions
● Practice Problem
● Declare a write a function called valid_triangle that takes three real numbers representing the lengths of the three sides of a triangle as its arguments, and outputs either true or false, depending on whether those three lengths are capable of making a triangle.
● Note the following rules about triangles:
● A triangle may only have sides with positive length.
● The sum of the lengths of any two sides of the triangle must be greater than the length of the third side.

[26]

Functions
bool valid_triangle(float x, float y, float z);
bool valid_triangle(float x, float y, float z)
{
// check for all positive sides
if (x <= 0 || y <= 0 || z <= 0)
{
return false;
}
// check that sum of any two sides greater than third
if ((x + y <= z) || (x + z <= y) || (y + z <= x))
{
return false;
}
// if we passed both tests, we’re good!
return true;
}
