Allons-y et faisons-le après avoir introduit une autre commande qui existe dans l'IDE, appelée debug 50. Autant dire que toute commande utilisée ce semestre et qui se termine par 50 est une sorte de roue d'entraînement spécifique à CS50. Mais d'ici la fin du trimestre, nous aurons éliminé tous ces outils spécifiques à CS50 afin que tout ce que vous utilisez devienne, pour ainsi dire, une norme industrielle. Donc, si nous regardons maintenant l'IDE CS50, lançons ce même programme.

Donc, si je clique sur cette icône de dossier ici, vous verrez un tas de fichiers, comme dans le bac à sable. Et j'ai préchargé tout le code source d'aujourd'hui à partir du site Web de CS50 et je l'ai simplement téléchargé dans l'IDE, tout comme vous pouvez le faire dans le bac à sable. Et nous ferons cela dans une section ou dans une super section, manuellement, si vous le souhaitez. Je vais aller de l'avant et ouvrir ce même programme buggy two, qui est maintenant dans l'IDE au lieu du bac à sable, et vous verrez qu'il a à peu près la même apparence.

Le code couleur peut être un peu différent, mais ce n'est qu'un détail esthétique. Et je peux toujours exécuter ceci. Créez buggy two ici. Mais remarquez ici, cette erreur, je pourrais utiliser help 50 dessus, mais sachez à l'avance que j'ai téléchargé tout mon code dans un dossier appelé source two. C'est ce qu'il y a dans le fichier zip, sur le site Web du cours. Donc, encore une fois, tout comme nous l'avons fait brièvement la semaine dernière, si vous savez que votre code n'est pas juste dans l'emplacement par défaut, mais se trouve dans un autre répertoire, que signifie cd ?

PUBLIC : Changer de répertoire.

DAVID MALAN : OK. Alors changer de répertoire ; ce n'est pas si difficile. Il change de répertoire. Et maintenant, remarquez ce que fait le bac à sable. Il est un peu plus puissant, même s'il est un peu plus cryptique. Il met toujours un rappel constant de l'endroit où vous vous trouvez dans les dossiers de votre IDE, alors que le bac à sable a complètement caché ce détail. Encore une fois, nous supprimons une roue d'entraînement en vous rappelant simplement que vous êtes dans source two et que le tilde n'est qu'une convention informatique, ce qui signifie que c'est votre répertoire personnel, c'est votre dossier personnel avec vos fichiers CS50, délimité par un simple tilde.

Alors maintenant, je vais aller de l'avant et faire buggy two. Il se compile, car encore une fois, ce n'est pas une erreur de syntaxe. C'est un problème logique. Je vais maintenant y aller et point barre oblique buggy two. Et si je les compte, j'ai toujours 11 hachages à l'écran. Je pourrais donc entrer et ajouter printf, mais cela ne profite pas vraiment des nouveaux outils. Mais regardez ce que je peux faire à la place. Laissez-moi faire défiler un peu vers le bas pour que je puisse voir tout mon code.

Laissez-moi aller de l'avant et cliquer à gauche des numéros de ligne dans l'IDE, comme dans main, et cela met un point rouge, comme un panneau d'arrêt qui indique : arrêtez-vous ici. C'est ce qu'on appelle un point d'arrêt. C'est une fonctionnalité de nombreux environnements de développement intégrés, comme l'IDE CS50 qui indique à l'ordinateur à l'avance, lorsque j'exécute ce programme, ne l'exécutez pas simplement comme d'habitude, arrêtez-vous là et permettez-moi, l'humain, de parcourir mon code, étape par étape.

Donc, pour ce faire, vous n'exécutez pas simplement buggy two à nouveau. Au lieu de cela, vous exécutez debug 50. Donc, tout comme help 50 vous aide à comprendre les messages d'erreur, debug 50 vous permet de parcourir votre programme étape par étape. Alors laissez-moi aller de l'avant et appuyer sur Entrée. Vous remarquerez maintenant sur le côté droit une nouvelle fenêtre que le bac à sable n'a pas ouverte. Et il s'y passe beaucoup de choses, mais nous verrons bientôt les éléments importants. C'est le débogueur.

Et vous verrez que cette ligne ici, la ligne sept, est en surbrillance, car c'est la première véritable partie de code à l'intérieur de main qui va potentiellement être exécutée. Rien ne se passe vraiment avec les accolades. Sept est la première vraie ligne de code. Donc, ce que signifie cette barre jaune ou verdâtre, c'est que le débogueur a suspendu votre programme à ce moment-là, n'a pas tout exécuté jusqu'au bout, donc nous pouvons commencer à fouiner. Et en fait, si je zoome sur la droite, concentrons-nous aujourd'hui principalement sur les variables, vous remarquerez un joli petit indice visuel que vous avez une variable appelée i.

Pour le moment, sa valeur est zéro. Quel est son type ? Entier. Alors regardez ce qui se passe maintenant lorsque je profite de certaines icônes qui sont légèrement plus hautes. Je vais juste faire défiler vers le haut le débogueur, et nous ignorerons la plupart de cela aujourd'hui, mais il y a quelques icônes ici. Donc, si je devais appuyer sur Lecture, cela reprendrait simplement mon programme et l'exécuterait jusqu'au bout ; pas très utile si mon objectif était de le parcourir. Mais si vous survolez ces autres icônes, étape par étape, cela franchira une ligne de code à la fois et l'exécutera une par une, vous permettant littéralement de parcourir votre propre code.

Et alors essayons ceci. Lorsque je vais de l'avant et que je clique sur Step Over, notez que la couleur change. Regardez ma fenêtre de terminal maintenant, la grande fenêtre bleue en bas. Je vais voir le hachage. Notez maintenant que la ligne sept est à nouveau en surbrillance, car juste avec une boucle for, quelque chose va se reproduire encore et encore. Alors, que devrions-nous voir se produire lorsque je clique à nouveau sur étape par étape ?

PUBLIC : [INAUDIBLE]

DAVID MALAN : i devrait devenir un. C'est donc un peu petit, mais regardez le côté droit de l'écran où il est écrit variable i, et je clique sur Step Over ; et voilà, maintenant nous en voyons un. Et si je continue à faire cela, rien de très intéressant ne se passe vraiment. J'ai juste vraiment ralenti le même programme. Mais vous remarquerez que i s'incrémente encore et encore. Mais ce qui est intéressant ici, c'est que je n'ai pas eu à modifier mon code en ajoutant un tas d'instructions printf désordonnées que je devrai supprimer plus tard simplement pour soumettre mon code ou l'envoyer sur Internet. Au lieu de cela, je peux en quelque sorte regarder ce qui se passe à l'intérieur de la mémoire de mon ordinateur pendant que j'exécute ce programme.

Et le fait que la valeur de i soit maintenant 10 et que je sois pourtant sur le point d'imprimer un autre hachage, c'est là que se trouve la même erreur logique. Nous voyons donc graphiquement le même problème qu'avant. Donc maintenant, à ce stade, le programme est à peu près terminé. Si je continue de cliquer sur Step Over, il va simplement se terminer. Si, à ce stade, je me dis : oh mon dieu, maintenant je sais que c'est faux, vous pouvez quitter la plupart des programmes dans l'IDE ou dans le bac à sable en appuyant sur Ctrl c, pour annuler, et cela tuera le débogueur, fermera la fenêtre et vous ramènera à votre fenêtre de terminal.

Et je n'insiste jamais assez sur ce point, dès cette semaine, utilisez help 50 lorsque vous avez un bogue lors de la compilation de votre code, un message d'erreur que vous ne comprenez pas. Cela vous aidera comme le ferait un membre du personnel. Et puis contactez-nous si vous ne comprenez pas cela. Mais debug 50 devrait, à l'avenir, être votre premier réflexe. Si vous avez un bogue où quelque chose ne fonctionne pas, la quantité de changement de votre calcul est erronée, les numéros de carte de crédit que vous analysez sont erronés, utilisez debug 50, à partir de cette semaine, pour développer cette mémoire musculaire d'utilisation d'un débogueur. Et c'est vraiment une compétence à vie, non seulement pour C, mais aussi pour d'autres langages.

Des questions à ce sujet ? Vous en verrez davantage dans la section et au-delà. Alors, qu'avons-nous d'autre comme outils dans notre boîte à outils ici ? Introduisons-en un autre maintenant. Celui-là, vous l'avez probablement utilisé la semaine dernière, appelé check 50. C'est un outil qui vous permet d'analyser l'exactitude de votre code. Et vous vous souvenez peut-être avec check 50, vous avez fait quelque chose comme ça. Si j'allais de l'avant