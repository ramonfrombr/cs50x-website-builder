Pero existe otra idea en ciencias de la computación, la noción de abstracción. Ahora mismo, este es un programa que simplemente implementa la noción de toser. ¿Pero qué pasa si deseo usar la misma idea en múltiples programas y deseo obtener una pieza de rompecabezas personalizada que no venga con Scratch llamada toser? Bueno, hay otra función aquí que puedo hacer como mis bloques y puedo hacer un bloque. Continuaré y lo llamaré toser. Y esa pieza de rompecabezas, una vez que hago clic en Aceptar, me dará este bloque rosa aquí. Continuaré ahora, por ejemplo, y moveré todo esto a la pieza de rompecabezas personalizada. Y ahora observe, debido a que he creado un nuevo bloque, tengo esta pieza rosa aquí. Ahora puedo mover esto aquí. Y francamente, lejos de la vista, lejos de la mente. Literalmente puedo ignorar esas piezas de rompecabezas que he creado porque ahora tengo una nueva pieza de rompecabezas llamada toser que indica su función. Esta es una abstracción en el sentido en que no me importa cómo implementa la tos, solo me importa que su programa pueda toser. Por lo tanto, tenemos esta noción de reutilización que comienza a hacer que nuestro código no sea menos sofisticado, sino mucho, mucho más pequeño y potencialmente mucho menos propenso a errores. Y puedo llevar esto un paso más allá. Permítanme continuar y abrir una variante diferente de esta por completo, esta en toser tres. Usted puede hacer que estas piezas de rompecabezas personalizadas incluso acepten argumentos. Usted puede hacer que esta pieza de rompecabezas llamada toser diga, bueno, cuántas veces desea toser, por lo tanto, aceptar una entrada. Luego, usted puede repetir esa cantidad de veces toser por un segundo y esperar un segundo. Entonces, si ahora desea utilizar esta elegante pieza de rompecabezas aquí, observe que ahora parece incluso más simple. Continúe y tosa tres veces. Y todo ha sido abstraído. Si me desplazo hacia arriba y fuera del camino, ni siquiera sabe o tiene por qué preocuparse de cómo o por qué se implementó la tos. Y entonces, mientras comenzamos toda esta conversación simplemente buscando a Mike Smith y tratando de encontrar una respuesta correcta a un problema, hablamos entonces sobre la eficiencia y encontramos esa solución no solo de manera segura, sino también más rápida. Y ahora hemos hablado un poco sobre las ideas que se avecinan cuando se trata del diseño de la calidad de su código.