¿Qué podemos hacer entonces con esta información? Bueno, resulta que ahora podemos escribir programas que toman palabras del humano, no mediante get string, sino en el símbolo del sistema real. Podemos implementar funciones, como clang. Así que voy a escribir un programa llamado arg v en un archivo llamado arg v punto c. Voy a incluir la librería CS50. Voy a incluir estándar Io punto h. ¡Listo!

Ahora voy a hacer int main not void, int arg c, string arg v, corchetes abiertos. En realidad, es peor de lo que ha sido, pero ahora es útil. Ya lo veremos. Y ahora voy a hacer esto. Voy a decir que si arg c es igual a dos, eso significará que el humano ha escrito dos palabras en el símbolo del sistema. Y voy a decir esto, hola por ciento s, nueva línea, y luego voy a conectar arg v entre corchetes uno, por razones que pronto veremos, de lo contrario, si arg c no es igual a dos, solo voy a codificarlo y decir hola, mundo, barra invertida n. Entonces, ¿qué estoy haciendo?

Estoy intentando escribir un programa que permita que el humano escriba su nombre en el símbolo del sistema, en lugar de esperar a que el programa se ejecute y use get string [INAUDIBLE] como un símbolo del sistema parpadeante. Entonces, lo que puedo hacer ahora es esto, hacer arg v. Se compila. Punto barra arg v, Intro. Hola, mundo. Así que, presumiblemente, ¿a qué es igual arg c cuando lo ejecuto de esa manera?

DAVID MALAN: Quizá uno-- quiero decir, no dos, al menos, es lógico. No es dos, porque no he visto mi propio nombre. Entonces, si lo vuelvo a ejecutar ahora, diría David. ¿Qué va a decir, con suerte? Como, hola, coma, David? Y de hecho, lo hace. ¿Por qué? Bueno, cuando ejecutas un programa que has escrito en C y especificas una o más palabras después del nombre del programa, esas palabras se te entregan en una matriz, llamada arg v, y se te indica cuántas palabras escribió el humano en arg c.

Así que el programa clang, el programa make, help 50, style 50, check 50, todos los programas que hemos visto hasta ahora que toman palabras después de los nombres de los programas, literalmente se implementan con un código que es similar en espíritu a este. Algún programador comprobó oh, ¿el humano escribió alguna palabra? Si es así, tal vez quiera generar un nombre diferente al de un punto hacia afuera. Tal vez quiera generar el nombre hola. Cuando ejecutas make something, ¿qué quieres hacer? Ese es un argumento de línea de comandos que el programador humano comprobó en arg v para saber qué programa quieres hacer.

Así que es una idea simple, aunque se admite que la sintaxis es bastante fea. Pero es la misma idea. Y las únicas dos formas, entonces, para que main siga adelante son esta nueva, que te permite aceptar argumentos de línea de comandos, o la anterior, que es cuando sabes de antemano que no necesito ningún argumento de línea de comandos. Depende completamente de ti cuál usar, si realmente quieres aceptar argumentos de línea de comandos.