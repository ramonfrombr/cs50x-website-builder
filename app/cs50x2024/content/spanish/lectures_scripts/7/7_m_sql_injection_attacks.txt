Y un último ejemplo de esto, porque este podrán evitarlo en las siguientes semanas en CS50 y más allá. Un ataque de inyección SQL se da cuando escriben código erróneo que de alguna manera permite que un usuario malintencionado de internet o una aplicación engañe a su código para que ejecute un código SQL que no pretendían. Por ejemplo, así es como los estudiantes de Yale inician sesión en New Haven. Así es, por supuesto, como inician sesión los estudiantes de Harvard aquí en Cambridge. Les piden su usuario y contraseña, o una clave de Harvard y una contraseña. Supongamos, sin embargo, que como usuario no cooperan y en lugar de escribir su dirección de correo electrónico y contraseña, suponen que ingresan algo como esto, como su dirección de correo electrónico, Malan@Harvard.edu, y luego quizás una sola cita textual, y un guion doble.

Bueno, resulta que en SQL, un guion doble es cómo inicia un comentario, similar al símbolo de número en Python o a las barras en C. Pero supongamos que Harvard hubiera implementado su sitio web de manera que haya una consulta como esta debajo del capó, si la clave de Harvard se implementó en Python, que dice esto: SELECT * FROM users WHERE username = marcador de posición AND password = marcador de posición, pasando el nombre de usuario y la contraseña. Eso es bueno. Es un código correcto, porque esos marcadores de posición son importantes.

Lo que hace la biblioteca CS50 y otras bibliotecas como esta en el mundo es escapar la entrada del usuario. Si un usuario intenta engañar a su código para introducir comentarios o comillas simples, db.execute y otras bibliotecas sanearán la entrada del usuario y evitarán que suceda lo siguiente. Sin embargo, si hacen esto, no está bien, está mal. Supongamos que realmente practican lo que predicamos la semana pasada usando cadenas f, esto ahora está mal en el contexto de SQL. Si crean una cadena de formato como esta con una f minúscula que es literalmente SELECT * from users WHERE username =, y luego usan la elegante notación de Python para llaves y password = llaves, esta es una construcción SQL correcta siempre que los humanos cooperen y pongan su nombre de usuario aquí y su contraseña aquí.

Pero ¿qué pasa si el usuario es malintencionado, como yo, y en realidad incluye una sola cita textual en su entrada y un guion doble? Por lo tanto, Malan@Harvard.edu comillas guion doble tendría el efecto de inyectar eso en la entrada del usuario. Pero el guion doble lo reclamo como comentario, por lo que es una forma de engañar a la computadora para que no ejecute SELECT * WHERE user, SELECT * FROM users WHERE username = this AND password = that, tiene el efecto de solo decir SELECT * FROM users WHERE username equals Malan@Harvard.edu.

Y si, y verán esto en el pset 7, db.execute devuelve una o más filas de la tabla, así es como realmente pueden seleccionar datos usando código Python, y el número de filas es igual a 1, porque es seleccionado Malan@Harvard.edu podrían iniciar sesión como yo porque engañaron a la computadora para que ejecutara el código que inyectaron.

Y la conclusión más importante aquí es que este es un problema 100% solucionable. Solo necesitan saber que está resuelto y no deben escribir código como este usando cadenas f en Python, sino utilizar código de biblioteca como db.execute o, después de este curso, algo parecido.

Dicho eso, terminaremos con un chiste.

Ok. Eso es todo para CS50. Nos vemos la próxima vez.