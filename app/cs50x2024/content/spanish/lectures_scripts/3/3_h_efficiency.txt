¿Entonces, cómo podríamos pensar sobre esto ahora? Bueno, tal como en la semana 0, teníamos una imagen como esta. Y afirmamos que estos algoritmos eran de naturaleza lineal, literalmente una línea recta, como el de Eric, o un poco más curvos o logarítmicos, por así decirlo, como [? el de Nizari. ?] Y estos tenían formas fundamentalmente diferentes. Y nos referimos a ellos realmente por el número de pasos que podrían tomar en el peor de los casos.

Si la guía telefónica o, hoy en día, el número de casilleros era n en total, podrían necesitarse hasta n pasos para que Eric o cualquiera encontrara a Mike Smith o el número 50 de izquierda a derecha. Si en la semana 0, hice dos páginas a la vez, en realidad puedes acelerar eso, pero la forma de la línea era la misma. Eric no hizo eso aquí, pero podría haberlo hecho. Con dos manos, tal vez podría haber mirado dos casilleros a la vez. Así que podría haber sido un paso intermedio entre esos dos extremos. Pero logarítmico era esta forma más curva.

Pero hoy, vamos a comenzar a formalizar esto un poco para no seguir hablando de búsqueda y búsqueda binaria en la búsqueda lineal solamente, sino también de otros algoritmos. Y los científicos informáticos ahora tienen realmente terminología con la cual describir algoritmos y qué tan bien está diseñado tu algoritmo o qué tan bien implementado está tu código. Y generalmente se llama gran O, literalmente, una O en mayúsculas y cursiva.

La notación gran O solo significa "en el orden de". Así que si alguien te preguntara cuál es la eficiencia de tu algoritmo o la eficiencia de tu código, podrías agitar tu mano, literal y figurativamente, y darles una aproximación de cuán rápido o lento es tu código. Entonces, en lugar de decir literalmente n pasos o n/2 o pasos log n, un científico informático normalmente diría, ah, ese algoritmo está en el orden de n o en el orden de n/2 o en el orden de log n.

Así que esta es solo una sintaxis de aspecto críptico que se pronuncia verbalmente como "en el orden de". Y está escrito como una función matemática, como tenemos aquí. Pero resulta que cuando estás usando la notación gran O, realmente es como agitar la mano. Así como está destinado a ser solo una aproximación.

¿Y sabes qué? En este caso, estas líneas se ven tan similares que, de hecho, voy a eliminar el dividido por 2. Y veremos por qué está bien esto en un momento. Pero son tan similares que las voy a llamar igual. Y resulta —y está bien si no recuerdas los logaritmos demasiado bien— la base 2 allí realmente no importa. Voy a eliminar eso.

Puede ser base 2 o 3 o 10. Todos están dentro de múltiplos entre sí. Así que tampoco es gran cosa, afirmo. Y si no lo recuerdas, también está bien.

Pero la razón por la que afirmo que esta línea roja y esta línea amarilla son esencialmente lo mismo es porque si el problema se vuelve lo bastante grande, es decir, el tamaño del problema se vuelve más y más grande, y solo tengo un tamaño de pantalla limitado aquí, permítanme, en su lugar, hacer zoom para ver más eje y y más eje x. Observen lo mucho que se acercan las líneas amarilla y roja entre sí. Y sinceramente, si siguiera alejando la imagen para que podamos ver problemas más y más grandes, estos, francamente, se verían prácticamente iguales.

Entonces, cuando un científico informático describe la eficiencia de un algoritmo, dice que está en el orden de n, incluso si técnicamente está en el orden de n/2. Y aquí también, en el orden de [? la ley ?] [? nuevamente ?] independientemente de cuál sea la base. Así que es algo bueno, ¿verdad? Aunque parezca un poco matemático, aún puedes agitar la mano y aproximar un poco.