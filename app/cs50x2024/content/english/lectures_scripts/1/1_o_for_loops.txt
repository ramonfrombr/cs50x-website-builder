And there's one other way to do this, just so you've seen it here. It turns out that a more common way to do something a fixed number of times is using a different preposition-- the word for. And a for loop looks like this. A for loop does something, like print out hello world, again and again, but it's even more mechanical. But it automates into one line of code the exact same logic we just implemented. After the word for, you can put parentheses. And then inside of those parentheses, you can say something like, give me a variable called counter and initialize it to zero. Or that's a little wordy. Let's just use i. So that is identical, logically, to what we did a moment ago. But the for loop actually takes one, two, three inputs inside of its parentheses. It's a little funky in terms of its syntax. The second input to the for loop is the Boolean expression you want to ask again and again and again, so is i less than 50? And the last thing that you can do in a for loop is this third input, where you can do your update of one or more variables. So if I do i equals i plus 1 or, more succinctly, i plus equals 1, or even more so tersely, i plus plus, I have now whittled down to just four lines of code what I previously did in a few more lines of code. These are both correct. They both do exactly the same thing. And even though the for loop is a little non-obvious-- because this is step one, this is step two, this is step three, then in increments-- it achieves the same result. And you'll play with this over time in the next couple of weeks when doing something again and again. But it's just a more succinct way of achieving that same goal. Any questions, then, on while loops or for loops here?