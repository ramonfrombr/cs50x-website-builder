All right. So let's talk about another thing that's kind of unique to C, which is data types and variables. When I say unique to C, I really only mean in the context of, if you've been a programmer for a really long time, you've probably not worked with data types if you've used modern programming languages. Modern languages like PHP and JavaScript, which we'll also see a little later on in the course, you don't actually have to specify the data type of a variable when you use it. You just declare it and start using it. If it's an integer, it know it's an integer. If it's a character, it's knows it's a character. If it's a word, it knows it's a string, so-called. But in C, which is an older language, we need to specify the data type of every variable that we create the first time that we use that variable. So C comes with some built-in data types. And let's get familiar with some of those. And then afterwards we'll also talk a little bit about some of the data types that we've written for you, so you can use them in CS50. The first is int. The int data type is used for variables that will store integer values. So 1, 2, 3, negative 1, 2, 3, and so on. Integers, which is something you should keep in mind for the quiz, always take up four bytes of memory, which is 32 bits. There are eight bits in a byte. So this means that the range of values that an integer can store is limited by what can fit within 32 bits worth of information. Now as it turns out, it was long ago decided that we would split up that range of 32 bits into negative integers and positive integers, each getting half of the range. So the range of values that we represent with an integer range from negative 2 to the 31st power to 2 to the 31st power minus 1, cause you also need a spot for 0. So basically half of the possible values you can fit in an int are negative, and half are positive. And roughly here, this is about negative 2 billion to about positive 2 billion. Give or take a couple hundred million. So that's what you can fit in an integer variable.

Now we also have something called an unsigned integer. Now unsigned ints are not a separate type of variable. Rather, unsigned is what's called a qualifier. It modifies the data type of integer slightly. And in this case, what unsigned means-- and you can also use unsigned other data types, integer's not the only one. What it effectively does is doubles the positive range of values that an integer can take on at the expense of no longer allowing you to take on negative values. So if you have numbers that you know will get higher than 2 billion but less than 4 billion, for example-- which is 2 to the 32nd power-- you might want to use an unsigned int if you know your value will never be negative. You'll occasionally have used for unsigned variables in CS50, which is why I mention it here. But again, the range of values that you can represent with an unsigned integer as to t regular integer, are 0 to 2 to the 32nd power minus 1, or approximately 0 to 4 billion. So you've effectively doubled the positive range that you can fit, but you've given up all the negative values. Now as an aside, unsigned is not the only qualifier that we might see for variable data types. There are also things called short and long and const. Const we'll see a little bit later in the course. Short and long, we probably won't. But just know that there are other qualifiers. Unsigned isn't the only one. But it's the only one we're going to talk about right now.

