But there's one other data structure we'll give mentioned to today. And that's known as a dictionary. And we'll see this again in a couple of weeks when we look at Python. 

A dictionary is the abstraction that you can get on top of a hash table. This hash table literally involved physical buckets and in code would involve arrays and linked lists. That's like low level plumbing. 

A dictionary more generally in computer science is a data structure that has keys and values, words and values, words and page numbers, anything that maps one thing to another. Physical dictionaries in the human world, like an English Dictionary, has lots of words. And if a word is correctly spelled in your document, it will be in that dictionary. And if you have a typo, a misspelling, in your document, it will not be in that dictionary. 

So wouldn't it be nice if you could actually implement a dictionary using maybe a hash table, but a smart hash table that has plenty of buckets, so that you can answer a question, is this a word, is this a word, super fast without having a whole stack of name tags or, in this case, English words all in the same bucket. And, in fact, that's the challenge for Problem Set 5. We're going to give you a big text file with 140,000 plus English words. And the goal for you is to implement a hash table with your choice of number of buckets, your choice of hash functions, and implement this notion of an array with linked lists that stores those 140,000 plus words. 

Dictionaries, though, do exist in the real world. And taken last night at like 9:00 PM before Sweetgreen closed in Harvard Square was this photo. If you've ever ordered a salad at Sweetgreen, they have a pretty clever optimized system so as to pick up your salad. If you order on their app in advance, they go ahead and put your salad under D for David, for instance, or B for Brian and so forth. So that when you go into the store, you don't have to look through big O of n other salads. You can jump immediately to the B section, the D section, or any other section and get your salad. 

Now, in the extreme case, maybe Harry and Hermione and Hagrid all order at the same time. So there's just a big stack at the H's. So it's technically still big O of n. But if you assume a nice uniform distribution of names, this probably does work out pretty well, especially if the salads aren't there by design very long.