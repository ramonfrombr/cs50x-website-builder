Así que vamos a ver algunas de las características de estas cosas. Lo que realmente hemos hecho es introducir algo llamado una base de datos relacional. El objetivo principal no es depender más de archivos CSV. Los CSV son como la forma más débil de bases de datos que puedes usar. ¿Por qué? Bueno, cada vez que quieres buscar datos en un archivo CSV, tienes que abrirlo. Tienes que leerlo. Tienes que recorrerlo línea por línea buscando los datos que te interesan, y luego terminas. Eso va a ser súper lento cuando tienes muchos datos en un archivo CSV. De hecho, más tarde hoy vamos a descargar una base de datos realmente grande en forma de texto, que veremos más tarde con más de 500 megabytes, que se maneja mucho mejor con lo que se llaman bases de datos relacionales, programas de software que puedes ejecutar en tu Mac, PC o servidores de una empresa. Todo lo que hacen es almacenar datos y proporcionarte un acceso más rápido a ellos. Entonces, SQLite3 es solo un programa de línea de comandos con el que podemos interactuar con esos datos. No es muy convincente. Es, de nuevo, un prompt parpadeante en blanco y negro, pero veremos una interfaz gráfica de usuario, o GUI, en un momento, también, que nos permitirá navegar esos mismos datos.

Así es como procedimos e importamos los datos. Y .schema es el último de los comandos. De hecho, déjame escribir esto en el prompt. No .mode o .import, sino .schema. Y verás que automáticamente me pasó algo así, CREATE TABLE favorites. Todo esto sucedió automáticamente cuando importé mis datos, pero más adelante lo haremos de manera más manual.

Entonces, ¿dónde nos lleva esto en términos de características? Bueno, en el mundo del almacenamiento de datos, ya sea almacenar usuarios que se han registrado para tus sitios web o el número de "me gusta" que ha recibido una publicación en Instagram o cualquier forma de datos que puedas querer leer o escribir, existen cuatro operaciones fundamentales en el mundo. CRUD es la forma bruta de recordar esto. Estas significan Crear, Leer, Actualizar, Eliminar. Y me atrevo a decir que con estas cuatro operaciones puedes hacer cualquier cosa que desees cuando se trata de datos. Crear esos datos, leer esos datos, actualizarlos o eliminarlos.

Ahora, en el mundo de SQL, o Structured Query Language, o S-Q-L, esto es solo otro lenguaje de programación. Tiende a usarse solo en el contexto de bases de datos, pero puedes usarlo para resolver problemas no tan diferentes a Python, pero en el contexto de los datos que te interesan. Así que con SQL, estas cuatro operaciones CRUD tienen en realidad palabras clave diferentes asignadas a ellas. Resulta que son estas: INSERT, SELECT, UPDATE, DELETE. Es decir, a diferencia de Python, que tiene cientos de funciones disponibles para ti, hoy es bastante interesante en la medida en que SQL tiene tal vez una docena aproximada de funciones en total que puedes usar, unas pocas docenas de funciones en total que puedes usar. Mucho más manejable, y estas son las cuatro que usaremos con más frecuencia.

Entonces, más allá de esto, ¿cómo se crea una tabla? Bueno, ¿qué significa eso? Bueno, una base de datos relacional es literalmente eso. Es como una versión más sofisticada de Google Spreadsheets o Microsoft Excel o Apple Numbers que te permite almacenar todos tus datos en filas y columnas. Pero te da estas cuatro funciones y más mediante las cuales seleccionar los datos que te interesan, o eliminar o actualizar o insertar datos que te interesan también. Así que veremos en un momento que esta será la sintaxis A TRAVÉS DE la cual en SQL puedes crear una nueva tabla. En Google Spreadsheets, literalmente irías al ícono de más y dirías Nueva Hoja. En SQL, expresarías esto más programáticamente con una línea de código como esta.

Pero vas a tener que tomar algunas decisiones en el camino, y eso se debe a que SQL tiene sus propios tipos de datos. Afortunadamente, son bastante reminiscentes de C y Python. Pero hay cinco principales aquí. Déjame simplemente repasar algunos ejemplos. Así que primero, INTEGER. Si sabes de antemano que quieres almacenar una gran cantidad de información en una base de datos, como la edad de alguien o el número de "me gusta" que tiene una publicación o cualquier cosa que se preste a un número entero, SQL admite un tipo de dato entero. Pero en algunas versiones de SQL, en realidad tienes una decisión que tomar. ¿Quieres un entero, un smallint o un bigint? Y estos se refieren, como en C, al tamaño, al número de bits que se usan para almacenarlo. Un entero son 32 bits. Un bigint son 64 bits. Un smallint es menos que ambos.

Ahora, estamos usando, para la clase, algo llamado SQLite. Es una versión gratuita y de código abierto, muy amigable para el usuario, de SQL. Pero hay otros que podrías haber escuchado. Así que si alguna vez has escuchado sobre la empresa Oracle, su base de datos principal es un programa de base de datos llamado Oracle que es una base de datos SQL que permite a las empresas almacenar grandes cantidades de datos y seleccionar, crear, actualizar y eliminar datos usando software que han desarrollado. MySQL, Postgres, MariaDB, Microsoft Access Server, SQL Server y muchos otros, son todos ejemplos de servidores SQL. Y cada uno de ellos generalmente admite tipos de datos como este.

Hemos optado por mostrarte ejemplos de Postgres, que es uno de los más populares de código abierto que puedes usar en Internet, por ejemplo, para proyectos finales. Los números reales, al igual que en Python o C, son similares en espíritu a los flotantes. Sin embargo, tienes un par de opciones. Uno es real, que usa 32 bits. Otro se llama doble precisión. En realidad son dos palabras, pero te da 64 bits también, para darte una mayor precisión numérica.

Luego tienes este tipo conocido como numérico en SQL, mediante el cual si tienes un número que se parece a un número, esencialmente, pero no es solo un entero, esta categoría abarca cosas como valores booleanos, fechas, que tienen un formato predefinido como YYYY, cuatro dígitos que normalmente implementan un año. Eso se consideraría numérico aquí, al igual que una fecha y una fecha y hora, que tienen algo como 00:00:00 para horas, minutos, segundos. Y luego tienes otros valores también.

Lo bueno de este tipo de datos numéricos específicamente es que realmente puedes resolver el problema de los puntos flotantes tanto en Python como en C. Recuerda que los flotantes o incluso los dobles en C tienen precisión finita, lo cual es malo en términos de que los valores no se sumen como pretendes. Pero con los tipos de datos numéricos y las bases de datos, puedes especificar exactamente cuántos dígitos quieres antes del punto decimal y después, como máximo. Entonces, si estás trabajando con información financiera o científica, puedes ser súper, súper preciso gracias a este tipo de datos en la base de datos. Así que finalmente, un problema que hemos resuelto, en comparación con esos otros lenguajes.

Texto. Cuando se trata de almacenar datos en una base de datos, puedes especificar que tus columnas pueden ser caracteres, que no son caracteres individuales o chars. Literalmente especificas n, el número de caracteres que tendrá cada celda en esa columna. Nunca haces esto en Excel. Nunca haces esto en Google Spreadsheets o Apple Numbers. Sin embargo, en una base de datos, puedes decirle a la base de datos con más precisión, quiero almacenar dos caracteres en cada celda en alguna columna.

¿Por qué? Bueno, tal vez como los códigos de estado de EE. UU. Si tienes MA para Massachusetts o CA para California, podría ser útil decirle a la base de datos que puedes almacenar, mínima y máximamente, dos caracteres para cada valor que te voy a dar. Varchar es un poco diferente. Este es un número variable de caracteres. Si tu columna podría tener pocos caracteres o muchos caracteres basados en lo que algún humano escribe, puedes dar un límite superior n sobre cuántos caracteres se almacenarán en cada celda. Entonces, si no sabes de antemano cuánto va a ser la longitud del correo electrónico de un usuario o cuánto va a ser mi nombre o tu nombre, puedes especificar varchar y luego elegir algún límite superior, algún valor que, ugh, nadie va a tener más de 20 caracteres en su nombre o 200 caracteres en su nombre, cualquier línea que decidas trazar en la arena.

Como un comentario adicional, ¿alguien quiere especular cuál podría ser un límite superior adecuado para el número de caracteres en un nombre humano que podría registrarse en un sitio web que estás creando?

AUDIENCIA: [INAUDIBLE]

DAVID MALAN: ¿25? Bastante bueno.

AUDIENCIA: [INAUDIBLE]

DAVID MALAN: Escuché 30.

AUDIENCIA: [INAUDIBLE]

DAVID MALAN: 32, está bien.

AUDIENCIA: [INAUDIBLE]

DAVID MALAN: ¿45? Más alto. ¿60?

AUDIENCIA: 64.

DAVID MALAN: 64. Este es precisamente el tipo de cosas en las que Google, me atrevo a decir, es bueno. Déjenme abrir Google rápidamente. Supongamos que el objetivo aquí es almacenar, en una tabla de base de datos, el nombre más largo del mundo equivalente a una columna de hoja de cálculo. Muy bien. Parece que teníamos 988 caracteres en el nombre de un señor llamado Hubert. Y ni siquiera intentaré pronunciar su apellido, pero ahí está. Así que si deseas almacenar, si deseas ser capaz de ajustar el nombre de todos... oh, y nota, senior.

[RISAS]

Quizás necesites aún más caracteres que eso. Así que este es un agujero de conejo por el que realmente no entraremos hoy, pero basta con decir que las respuestas a estas preguntas a menudo no son obvias. Y si piensas en los sitios web que has visitado en el mundo real, ya sea en el campus o fuera de él, es probable que hayas intentado escribir alguna entrada en algún formulario basado en la web o incluso alguna aplicación móvil, donde de repente tu teclado deja de funcionar, ¿verdad? No toleran más caracteres. Tal vez sea la Aplicación Común y la longitud de tu ensayo. Tal vez sea la longitud que puede tener tu currículum en un campo. Tal vez sea la longitud de tu nombre al registrarte en un sitio web. Bueno, ¿por qué es eso? Es probable que esas aplicaciones estén utilizando una base de datos, probablemente estén utilizando SQL, y tuvieron que decidir de antemano cuál es la longitud máxima de una entrada que vamos a tolerar de un humano. Y luego la computadora finalmente hace cumplir eso.

¿Por qué? Bueno, sería un ataque muy ingenioso para algún actor malintencionado ahí afuera explotarlo. Si no hubiera límites sobre cuán grande podría ser la entrada que un humano podría escribir, podrían, al igual que necesitaba intentar el otro día con el nombre de Emma, simplemente seguir pegando, pegando, pegando, pegando una entrada masiva, con la esperanza de abrumar la memoria de tu computadora, tal vez hacer que tu servidor se bloquee y, por lo tanto, denegar el servicio a otras personas. Así que hay razones para este tipo de defensas.

Por último, está el BLOB. En la parte superior, Objeto Binario Grande. No se necesita típicamente con mucha frecuencia, pero si deseas almacenar datos binarios, ceros y unos crudos que representan archivos u otros, también puedes almacenarlo en formato BLOB.

Ahora, solo para darles un recorrido rápido por otra sintaxis antes de empezar a usarla, puedes insertar datos en una base de datos utilizando una sintaxis bastante similar a esta. Puedes seleccionar datos de una base de datos utilizando la sintaxis que ya he usado. También puedes usar funciones. De hecho, en un momento, cuando carguemos más datos en la base de datos, podría seleccionar todos los nombres distintos de una base de datos... y de hecho, podría haberlo hecho hace un momento. En lugar de SELECT título FROM favoritos, como hice antes, eso me dará todos los títulos en esa base de datos. En cambio, podría hacer algo como SELECT DISTINCT título FROM favoritos, y eso filtrará todas las duplicaciones sin que tenga que escribir una sola línea de código para hacerlo. También puedes contar, como hicimos antes. Puedes calcular promedios, mínimos o máximos, lo cual es realmente útil para el trabajo analítico que podrías querer hacer como científico de datos o similar. Y hay un montón de otras funciones disponibles también.

Pero hay algunas características más poderosas. Y comenzaremos a usarlas en un momento. Usamos WHERE antes. Usé LIMIT antes. Usé GROUP BY antes. Y veremos varios ejemplos que refuerzan todo esto. Pero hay palabras clave como LIKE, mediante las cuales si quieres buscar todas las entradas de todos aquellos que mencionan The Office, ¿sabes qué? Apuesto a que podríamos hacer algo así en su lugar. Sé que puedo seleccionar estrella para... oh, vamos a SELECT título FROM favoritos WHERE, y esto es algo sin sentido, pero título es igual a "The Office", entre comillas. Y obtengo de vuelta a todos los que escribieron literalmente The Office.

Sin embargo, si hiciera algo como "the office" en minúsculas, voy a obtener a uno de ustedes que escribió "the office" en minúsculas. Y la cosa aquí es solo el título de esta salida. Pero ¿qué pasa si quiero hacer algo así como The Office? Podría decir algo como LIKE "%office%", y resulta que en SQL, este nuevo lenguaje, el porcentaje es un marcador de posición. Es un comodín que simplemente dice, eh, cualquier cosa puede ir antes y después. Así que ahora estoy buscando cualquier título que tenga la palabra The Office. Recogimos otra entrada aquí. Entonces, uno de ustedes dijo Office, sin la palabra "the", también bastante razonable. Un poco de mayúsculas y minúsculas está por todos lados. Ahora hemos captado esos.

Y si quieres contar el número total de oficinas ahora, ahora puedo hacer algo así. COUNT título... así que puedo combinar todos estos bloques de construcción, no muy diferente de Scratch, y obtener el número total de oficinas, que ahora parece ser 33 cuando toleramos mucha más variabilidad en la entrada de nuestros usuarios.

Lo más poderoso de todo, veremos algo así como JOIN en un momento, y eso será todo hacia el final para usar bases de datos mejor con un mejor diseño. Pero con SELECTs, por supuesto, no solo queremos seleccionar todos los títulos. Podríamos seleccionar donde alguna condición sea verdadera. Así que las condiciones, al igual que en Python y C, existen en SQL, pero al final de nuestras consultas, como hemos visto. Si quieres actualizar algo, por ejemplo, puedes actualizar datos en una base de datos diciendo UPDATE nombre de la tabla SET nombre de la columna igual a algún valor, WHERE la condición es verdadera.

Entonces, ¿cómo podría usar esto? Bueno, nuevamente miremos los datos donde es como The Office. ¿Y sabes qué? Voy a hacer esto. Si quiero limpiar todos estos datos... así que la limpieza de datos es un enfoque muy común, ya sea que estés haciendo investigación o trabajo analítico, a menudo cuando tienes datos desordenados, la primera pasada es honestamente trabajo pesado. Como escribir código, o Dios no lo quiera, copiar y pegar manualmente en un archivo de Excel, solo para limpiar tus datos. Puedes hacer esto de manera mucho más poderosa en SQL.

Así que, por ejemplo, permíteme decir UPDATE mis favoritos SET título igual a "The Office", la forma canónica, con T mayúscula, O mayúscula, WHERE título LIKE... y ahora hagamos esta búsqueda con comodines, sabiendo que eso va a absorber todas esas más de 30 filas. Pero ahora, cuando presiono Enter, parece que no pasa nada. Pero si luego SELECT título nuevamente WHERE LIKE "%office%", ahora todos se ven iguales, porque he actualizado mis datos. Y de hecho, ahora podría volver a The Office, porque he canonizado mis datos y ahora todo se ve igual.

Entonces, con SQL, ¿puedes hacer eso también? Anteriormente, vamos a SELECT un título FROM favoritos. Y limitémoslo a solo 10 esta vez, para que no pasen volando todos. Supongamos... VEEP es un buen programa. Quizás no soy fan de, digamos... démosnos 20 aquí, veamos qué viene después. Vale, en realidad no me gusta Friends, aunque parece que a todo el mundo le encanta. No hay problema. DELETE FROM favoritos...

[RISAS]

...WHERE título = "Friends";. Ahora, no más Friends. Y así puedes eliminar tus datos también.

[RISAS]

Puedes eliminar tus datos también usando una consulta de esta forma. Esta es quizás la más peligrosa de todas. Considera qué podría pasar si eres un poco descuidado, un poco apresurado y omites la condición WHERE. ¿Qué sucede si adelante haces DELETE FROM favoritos;? Todo desaparece. Y algo peor que eso, aunque no tendremos ocasión de usarlo, hay otra función llamada DROP, donde si simplemente quieres eliminar la tabla por completo, eliminar todas tus filas y columnas, puedes decir DROP TABLE favoritos;, y eso eliminará todos los datos también.

Y volveremos a eso, porque el simple hecho de que puedas eliminar muchos datos a la vez te hace extremadamente vulnerable a actores maliciosos en Internet o en la oficina que potencialmente quieran causar estragos en tus datos.