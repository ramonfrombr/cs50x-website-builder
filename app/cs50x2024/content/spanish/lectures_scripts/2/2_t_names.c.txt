Echemos un vistazo a esto. Si tuviéramos que escribir un programa utilizando estos cuatro nombres, adelantaré aquí el tema rápidamente. Voy a crear un archivo llamado names dot c e incluiré standard Io dot h. Luego ejecutaré int main void. Dentro de esta parte, me asignaré cuatro cadenas, utilizando mi nueva sintaxis de matriz, como antes. Podría llamar a esto nombre uno, nombre dos, nombre tres, nombre cuatro, pero no repetiré ese mal hábito. Me daré un nombre, una variable llamada names, en plural y almacenaré cuatro cadenas en ella, como se explica a continuación.

Coloquemos a Emma en el primer lugar. Pongamos a Rodrigo en el segundo lugar. Escribo todo en mayúsculas porque ya hemos visto algunos de esos códigos ASCII antes, pero también podría usar minúsculas. Agreguemos Bryan. Luego voy a seguir y me agregaré a mí mismo al final. Entonces, la matriz es de tamaño cuatro, pero cuento desde cero hasta C. Ahora, sólo para efectos de demostración, sigamos adelante e imprimamos, por ejemplo, el nombre de Emma. Entonces, si quiero imprimir el nombre de Emma, ¿cuál es el tipo de variable en la que está almacenada? ¿Cuál es el tipo que quiero imprimir? Cadena. Por lo tanto, es %s, como la semana pasada. Voy a dirigirme a poner una barra invertida n. Y si quiero imprimir el nombre de Emma, ¿qué escribo aquí para completar ese marcador de posición?

AUDIENCIA: [INAUDIBLE]

DAVID MALAN: Nombres corchetes cero. Es un poco malo que esté codificándolo aquí, pero nuevamente, sólo estoy demostrando cómo funciona todo esto por ahora. Déjame seguir y guardar eso. Déjame hacer nombres. Un poco de error aquí. ¿Qué hice mal? Dios mío, todo esto está mal. ¿Alguien lo ve todavía?

AUDIENCIA: [INAUDIBLE]

DAVID MALAN: Sí, olvidé la biblioteca CS50. Entonces, aunque no estoy usando get string, estoy usando string, por lo que necesito la biblioteca CS50 aquí. Déjame seguir y aclarar eso. Hacer nombres. OK, mejor. Punto barra nombres, y sólo debería ver el nombre de Emma. Pero mira esto, yo también puedo hacer esto. Sé que el nombre de Emma es una cadena, y ahora sé que una cadena es una matriz de caracteres, por lo que también puedo hacer esto. Déjame seguir adelante e imprimir uno, dos, tres, cuatro caracteres y luego una nueva línea. Y los caracteres que voy a imprimir serán los nombres de Emma, primer carácter, nombres de Emma, segundo carácter, nombres de Emma, tercer carácter y nombres de Emma, cuarto carácter.

Por lo que puedes tener lo que es esencialmente una matriz bidimensional, donde tienes dos conjuntos de corchetes. El primero me indexa en la matriz de nombres. E indexar en una matriz significa ir a una determinada ubicación en una matriz. Entonces, los nombres, soporte cero, por así decirlo. Esta parte aquí significa ir a buscar el nombre de Emma de la matriz de cuatro nombres. Este corchete después dice dentro de esa cadena, trátalo como una matriz de caracteres y obtén el carácter cero, el primer carácter, que se espera sea e, m, m y luego a.

Así que voy a seguir y guardaré este archivo ahora. Hacer nombres de nuevo. Fue compilado, punto barra nombres, y listo, Emma, Emma, lo veo dos veces. Ahora, nunca volveré a imprimir ninguna cadena como esta. Es simplemente ridículo, además tenía que saber de antemano cuánto dura su nombre. Sin embargo, es equivalente a imprimir la cadena en sí. Es sólo que C y printf saben que cuando usas %s y pasas el nombre de una variable, lo más probable es que printf esté haciendo algún tipo de bucle e iterando tu cadena desde el primer carácter y está comprobando, ¿es este el carácter nulo? Si no, imprímelo. ¿Es este el carácter nulo? Si no, imprímelo. Si este es el carácter nulo, si no, imprímelo. Y así es como obtenemos, E-M-M-A stop, porque printf, en esta línea 12, presumiblemente notó, oh, espera un minuto, el quinto byte en los nombres cero de Emma es una barra invertida cero, u ocho bits como cero. ¿Si?

AUDIENCIA: Eso es sólo parte de [INAUDIBLE]

DAVID MALAN: Eso es todo parte de lo que hay debajo del concepto de printf y es lo que los humanos decidieron hace décadas con C sobre cómo funcionarían las cadenas. Podrían haber creado un sistema diferente, pero este es el sistema que decidieron utilizar. ¿Otras preguntas? ¿Si?

AUDIENCIA: [INAUDIBLE]

DAVID MALAN: No fui más allá. Así que deliberadamente no toqué el soporte cuatro, aunque está ahí. Pero puedo intentar imprimir esto. Veamos. Déjame seguir y cambiar este programa muy rápido. Voy a seguir y a imprimir %C por quinta vez. Y veamos si podemos ver el carácter de terminación nula de Emma en la ubicación cuatro, que es su quinta ubicación, después de E-M-M-A. Déjame guardar eso. Hacer nombres, punto barra nombres, Emma Emma. Entonces, no lo veo ahí. ¿Pero sabes qué? Déjame intentar cambiar este último sólo por diversión a %i.

Y nuevamente, aquí es donde printf es tu amigo. Puedes usarlo poderosamente para ver qué está pasando. O podríamos sacar el depurador 50. Déjame seguir y hacer nombres, punto barra nombres. Y listo, ahí está el cero. Lo estoy imprimiendo literalmente como un int solo para verlo. Nunca haría esto en el mundo real. Pero de hecho está ahí. Y ahora, esto no funciona a menudo, pero sólo por diversión, me estoy volviendo un poco loco, supongamos que quiero mirar mucho más allá del nombre de Emma hasta la ubicación 400, como si comenzáramos a curiosear en la memoria de la computadora, una de esas otras cajas. Hacer nombres, punto barra nombres. OK, también hay un negativo tres allí, o técnicamente un guión y luego un tres.

Así que volveremos a esto en un par de semanas. En realidad, podemos comenzar a piratear y mirar alrededor de la memoria de mi computadora en cualquier lugar, porque son sólo números de cajas en la pantalla. ¿Si?

AUDIENCIA: ¿Hay algún límite para la longitud de la cadena?

DAVID MALAN: ¿Hay algún límite para la longitud de la cadena? Respuesta corta: sí, la cantidad de memoria que tiene la computadora. Entonces, como 2 mil millones 4 mil millones, es largo.

AUDIENCIA: ¿Qué pasa si intento escribir [INAUDIBLE]

DAVID MALAN: Muy buena pregunta. ¿Qué sucede si intentas escribir eso hipotéticamente? Depende de la función que utilices. Déjame volver a eso en dos semanas. Get string no fallará. Otras funciones C fallarán, si les das más información de la que esperan, y volveremos a las razones por las cuales.

Entonces, ¿qué está pasando realmente debajo de este concepto, si tenemos estos cuatro nombres: Emma, Rodrigo, Brian y David? Bueno, si volvemos a considerar nuestra memoria, sabemos que Emma está en esta primera ubicación, E-M-M-A, seguida de este carácter de terminación nulo. Pero si el segundo nombre que almacenamos en una variable fuera Rodrigo, resulta que él terminará volviendo a la parte posterior con esa memoria también. Y nuevamente, sólo se está ajustando porque esta es una versión artística de cómo se ve la memoria. No hay ninguna noción de izquierda, derecha, arriba o abajo en la RAM. Pero él es R-O-D-R-I-G-O, y su carácter de terminación nulo ahí. Bryan podría terminar ahí. Podría terminar después de eso. Y esto es lo que realmente está sucediendo debajo del concepto de tu computadora.

Técnicamente, cada uno de estos valores no es un carácter. Es técnicamente un número. Y, francamente, ni siquiera es un número. Son ocho bits a la vez. Pero nuevamente, no tenemos que preocuparnos por ese nivel de detalle ahora que estamos operando en este nivel de abstracción. Y puse el código incorrecto hace un momento. Este es el código que realmente implementé usando una matriz desde el primer momento, en lugar de un real, en lugar de cuatro variables separadas. Así que sólo para resaltar, entonces, qué está pasando, según el ejemplo que acabo de hacer con la impresión de los caracteres de Emma, si esta es una variable llamada names, y hay cuatro nombres en ella, cero, uno, dos, tres, puedes Piensa en cada personaje como direccionable usando la notación de corchetes.

El primer conjunto de corchetes selecciona el nombre en cuestión. El segundo conjunto de corchetes selecciona el carácter dentro del nombre. Entonces, e es el primer carácter, por lo que es cero. m es el siguiente, así que es uno. m es el tercero, así que son dos. a es el cuarto, y eso es tres. Y luego con Rodrigo, está en nombres uno, y su r está en corchetes cero. Entonces, nuevamente, realmente nos estamos metiendo en la maleza. Y esto no es lo que es la programación en última instancia, pero esto es sólo para decir, no hay magia cuando usas printf y get string y get int, etc. Todo lo que sucede debajo es la manipulación de valores como estos.