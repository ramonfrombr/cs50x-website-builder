Let me go ahead and write one other program here called overflow.c. And we'll see the same issue in another context. Let me go ahead and include stdio.h. Let me go ahead and do int main void. Let me go ahead and do for int i gets one. I'm going to go ahead and just say no condition and do i times equals 2. And let me go ahead and just do this. Print out the value of i. So I'm doing the super quickly, but I just have written a program here that's going to start counting at zero. It's going to multiply i. Star equals just means times two again and again. And it's going to do this forever, because I literally and deliberately didn't ask a Boolean expression here. I could actually just say something like true, but I can also just leave it blank. So this just means do this forever. It's an infinite loop. Well, let me go ahead and this is going to fly past the screen here. So I'm going to also sleep for one second in between. And indeed, there's a function in C called sleep. But to use it, you actually have to include another file called unistandard.h. You would only know this from looking in the documentation, but it's a handy function that lets me sleep one second at a time. Let me go ahead and make overflow. No errors. Let me increase the size of my screen. And let me go ahead and run overflow. And we'll see that every one second, it prints out a value starting at one, and then it doubles it, and then it doubles it, and then it doubles it again. So you might recall some of these values from last week, where I proposed that were 1,024 pages in a phone book, and then it just got smaller and smaller and smaller. Now we're just doing the opposite. We're doubling by two, by two, by two. We're just past a million now, 2 million, 4 million, 8 million, 16 million. So we're getting up there. So it looks like integers are pretty big. They're indeed using 32 bits in a computer that apparently-- what just happened? Another lie. If you just multiply some integer by two forever, it eventually becomes zero, it would seem. That, too, is not right.