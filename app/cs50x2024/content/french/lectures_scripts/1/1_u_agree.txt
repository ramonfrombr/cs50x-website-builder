Eh bien, je vais aller de l'avant et ouvrir ce programme, mais exécuter d'abord celui-ci. Je vais aller dans un programme appelé agree.c. Je vais masquer le code un moment et créer agree. J'ai fait à nouveau, cd src1, Entrée. Maintenant je peux faire make agree. Il semble avoir compilé le programme. Et si je fais ./agree, ce programme semble me poser une question : acceptez-vous ? Maintenant, le programme ne précise pas ce que je devrais taper, mais mon instinct me dit, bien sûr, oui. Je vais donc aller de l'avant et taper y pour oui et Entrée. Et il semble savoir que je suis d'accord. Si je le réexécute -- ./agree -- et que je tape n cette fois, pas d'accord. Mais vous savez quoi ? C'est en réalité mieux que cela. Si je fais ./agree et peut-être que je tape un Y majuscule, Entrée, cela semble aussi fonctionner. Alors comment cela se fait-il ? Eh bien, laissez-moi regarder le code ici. Le haut du fichier est presque identique à tout ce qui a été fait jusqu'ici. Inclure ces deux fichiers, int main vide. Mais maintenant j'utilise get_char et je stocke ma réponse dans une variable appelée c, mais je pourrais la stocker dans tout ce que je veux. Et remarquez maintenant la syntaxe légèrement nouvelle. Qu'est-ce qui est clairement nouveau dans ce que je fais ici ? Quels symboles sautent aux yeux ? Oui, la barre verticale. C'est donc une manière de dire un OU logique. Donc, en Python et dans quelques autres langages de nos jours, vous pourriez littéralement écrire le mot « ou ». Cela ne fonctionne pas en C. Si vous voulez poser cette question ou cette question et simplement prendre l'une ou l'autre réponse comme une réponse valide, vous utilisez simplement deux barres verticales, qui sont typiquement au-dessus de votre touche Entrée sur un clavier américain, du moins. Donc, deux barres verticales signifient ou. Il se trouve que deux esperluettes signifient et. Mais ce n'est qu'une manière de poser deux questions dans la même phrase et d'accepter l'une ou l'autre réponse comme potentiellement vraie. Donc, si c est un Y majuscule ou c est un y minuscule, supposez que l'humain a accepté. Sinon, si c est égal à N majuscule ou n minuscule, supposez qu'il n'a pas accepté. Et supposons que je tape une autre lettre, que va faire le programme ? Répétez s'il vous plait ? AUDITOIRE : Demandez à nouveau. DAVID MALAN : Il ne va pas me le demander à nouveau, car il n'y a pas de boucle ici, n'est-ce pas ? Il n'y a aucune preuve de boucle while ou for. Et get_char va littéralement obtenir un caractère, mais il ne spécifie pas quel caractère. Que se passe-t-il si je ne tape pas y ou n, majuscule ou minuscule ? Il semble que rien ne se passe. Simplement rien ne va se passer, et c'est OK. Votre programme n'a pas à imprimer quelque chose. Et en effet, si je lance ceci à nouveau et ./agree x. Cela ne fait rien. Je n'ai donc ni accepté ni refusé. Cependant, vous pourriez imaginer écrire une boucle qui oblige en quelque sorte l'humain à coopérer d'une manière ou d'une autre.