Entonces, bueno, realmente terminó. Permítanme abrir ahora el archivo show0.csv. Observen ahora, en mi editor de texto, tengo muchos menos datos. He descartado todo lo que no me interesa, pero me he quedado con tconst, título principal, año de inicio y géneros, y todo aquí ahora es consistente con esa filtración. Pero no he filtrado todo lo que dije. ¿Qué dije que quería eliminar antes?

Sí, los programas anteriores a 1970. Y claramente algunos de estos son de la década de 1940 y así sucesivamente. Así que vamos a deshacernos de esos, pero veamos cómo. Este es el archivo CSV que acabamos de abrir, pero en forma de hoja de cálculo de Google. Así que literalmente lo importé a Google Spreadsheets para que pudiéramos verlo. Literalmente los mismos datos que antes, y ahí están esas películas de los años 1940.

Pero hay algo curioso que quería tener en cuenta. Si hago scroll en los años de inicio y sigo y sigo, huh, esos parecen estar bien. Están aumentando en orden. Pero déjame intentar esto. Déjame simplemente explorar mis datos, ordenándolos en orden inverso. Va a tomar un tiempo, porque incluso esto es un número decente de programas de televisión. Observen esta rareza. En la parte superior del año de inicio ahora, una vez que los he ordenado inversamente, hay un montón de \N en mayúscula. Ahora, esto no tiene nada que ver con C, y nada que ver con Python. Tiene todo que ver con la documentación.

Si lees los datos de IMDB, como yo solo hice cuidadosamente eventualmente, verás esto. Un \n en mayúscula se usa para indicar que un campo particular falta o es nulo para ese nombre de título en particular. Ahora, esto es importante, porque si quiero filtrar películas que son posteriores a 1970, necesito ser resistente contra eso. Así que vamos a hacer esto. Entonces, si el año de inicio de la fila actual no es igual a \N, entonces voy a proceder a verificar que sea una serie de televisión y que no sea un programa para adultos. Eso sería útil. Pero además, ¿cómo puedo verificar esto aquí? Dejemos que sea año. ¿Y cómo puedo convertir el año de inicio de la fila en un entero? Bueno, todo en una hoja de cálculo, por definición de haber estado en una hoja de cálculo, o un archivo TSV o un archivo CSV, es texto.

Pero el año de inicio parece ser años, entonces ¿qué función de Python puedo usar para convertir texto que se parece a un número en un número real? Sí. Así que podemos hacer algo como esto. Puedo convertir año a int, y ahora puedo decir, si año es mayor o igual a 1970, ahora voy a proceder con esas líneas en su lugar.

Ahora, seguramente hay una oportunidad para un diseño mejor, porque una vez que tu código comienza a hacer esto, has hecho algo de manera subóptima, ¿verdad? Esto no va a terminar bien si todo mi código comienza a envolverse. Así que podría limpiar la lógica en poco tiempo, pero vamos a ejecutar esto solo una vez más. Esta vez, cambiando esto a shows1.CSV para que podamos ver salidas ligeramente diferentes. Permítanme ejecutar Python import.py. Huh, error de sintaxis, error Unicode, codificación... eso es extraño. Pero esto es porque las barras invertidas, recuerden, en C y Python, tienen un significado especial. Así que cuando haces algo como esto, barra invertida \N, incluso si no es una minúscula n, barra invertida \n, recuerden, es el carácter de escape en C y Python. Así que esto es como decirle a Python, este es un carácter especial. Pero no lo es. Y nunca realmente hemos tenido ocasión de hacer esto, pero ¿cómo crees que podríamos producir una barra invertida literal antes de una N mayúscula?

Sí. Resulta que la solución a este problema, por lo general, sin importar el lenguaje, es que si quieres un carácter literal, no un carácter de escape, literalmente pones otro de él antes. Así que aunque esto parezca un poco extraño ahora, esta barra invertida barra invertida \N literalmente significará barra invertida N.

Bien. Así que ahora, déjenme proceder a ejecutar esto en import.py. Esta vez, con suerte, voy a generar realmente un nuevo archivo llamado shows1.csv que tiene aún menos datos que realmente va a contener mis programas, pero solo una parte de ellos. Y vamos a sacar la torta del horno de esta manera. Esto es lo que obtengo ahora esta vez. Así que si cargo el CSV, shows1.csv, en Google Spreadsheet, solo porque es bastante fácil de ver que en la ventana en blanco y negro, ahora pueden ver que aparentemente solo estoy obteniendo programas a partir de 1970 en adelante. Y de hecho, si los ordenara, no vería barras invertidas N. Habría descartado todo lo que no cumple con ese criterio.

Bueno, déjenme hacer una última cosa aquí. Voy a proceder a hacer un último cambio. Y primero, vamos a mejorar el diseño aquí. Esta sangría es el resultado de que hago preguntas una y otra vez y solo sangro si y solo si esas cosas son verdaderas. Pero noten que pueden comenzar a cambiar su lógica aquí, ¿verdad? En lugar de decir si el año de inicio no es igual a \N, ¿qué tal si hago esto y digo continue? Luego puedo desindentar esto... porque si no lo has usado antes en Python y en C, si dices continue dentro de un bucle, no va a continuar ahí abajo, va a continuar al inicio del bucle nuevamente. Así que a través de esta lógica, realmente podemos seguir repitiendo una y otra vez. Y aquí también podríamos decir, si el año es menor que 1970, puedo proceder y decir continue, lo que me permitiría desindentar esto también. Así que hay soluciones, en términos de diseño, para evitar realmente esa sangría infinita.

Bien. Vamos a hacer una última versión. Luego voy a proceder a sacar del horno en un... premeditado. Entonces, la última cosa que no cargué antes fue esta. Supongamos que quiero cargar en el archivo CSV todos los géneros asociados con el programa. Parece que todos estos programas tienen uno o más géneros, tal como se te preguntó por tus programas favoritos. Y así que ahora, tenemos un archivo CSV con tconst, títulos principales, año de inicio y géneros, donde el género en sí mismo es una lista separada por comas.

Pero hay un problema fundamental aquí. Aunque tengo todos estos datos aquí, lo mejor que puedo hacer es un programa como este. Déjame proceder a buscar, por ejemplo, lo siguiente. Déjame tomar un archivo realmente rápido. Déjame tomar una copia de shows2.csv y escribir un último programa aquí. Si quiero proceder ahora y buscar en este conjunto de datos aún grande, en shows2.csv, bueno, déjame proceder a hacer esto. Importar CSV.

Déjame proceder ahora y preguntar al usuario por un título. Podría usar get string de CS50, pero realmente ya no hay necesidad de eso ahora que tenemos la función de entrada, recuerda. Así que simplemente usaré eso. Y luego procederé a abrir shows2.csv en modo de solo lectura. Y llamaré a eso mi archivo. Luego procederé a darme un lector de csv.DictReader, pasando ese archivo. Y ahora procederé a, para cada fila en el lector, hacer lo siguiente. El objetivo ahora es escribir un programa en Python que me permita buscar solo esos programas de televisión. Así que podría decir algo como esto, si título == fila "primaryTitle", entonces puedo proceder, por ejemplo, e imprimir fila "primaryTitle", comenzó en fila "startYear".

Entonces, ¿cuál es el objetivo de este programa? Va a preguntar al usuario por la entrada. Va a abrir este gran CSV que he creado. Pero eso sigue siendo más pequeño que la versión de 50 megabytes. Va a iterar sobre cada fila en ese archivo a través de DictReader, verificando si el título que el humano escribió es igual al título principal de la fila actual. Y si es así, va a imprimir el título y el año de ese programa.

Así que si procedo a ejecutar Python search.py, escribiendo algo como The Crown, Enter, voilà, obtengo esa respuesta. Si procedo a hacer The Office, Enter, hay un montón de Oficinas. Y de hecho, si no has visto más que la estadounidense, está la del Reino Unido, y aparentemente varias otras. Y de hecho, podemos corroborar esto ahora. Si vas a IMDB, de donde provienen todos estos datos originalmente, y escribes The Office, hay todas las Oficinas que en realidad coinciden con nuestro propio conjunto de datos. Será muy tedioso cada vez que quieras buscar datos o actualizar datos o insertar nuevos datos escribir un programa en Python para hacerlo, así que necesitamos unas cuantas características más de SQL.

Pero creo que primero, necesitamos algunos dulces de Halloween para nuestra pausa de cinco minutos.