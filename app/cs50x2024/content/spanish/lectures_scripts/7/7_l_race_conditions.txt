Entonces tienen que haber algunos problemas o algunos precios que pagar. Así que consideremos solo un par de ellos. Entonces, ¿qué problemas surgen realmente al utilizar una base de datos SQL como esta? Bueno, el primero es lo que se llama una condición de carrera. Y quizás la mejor manera de explicarlo es mediante una especie de historia que me contaron cuando tomé una clase como esta hace años en una clase llamada CS161, Sistemas operativos.

Un escenario inventado, pero considera esto. Tú y tus compañeros de cuarto tienen un refrigerador en su dormitorio, y a ti y a tu compañero de cuarto les gusta mucho la leche. Y uno de ustedes llega a casa un día, abre el refrigerador y ve, oh, maldita sea, se nos acabó la leche. Entonces cierras el refrigerador, entras a Harvard Square y te diriges a CVS o alguna otra tienda similar. Mientras tanto, tu otro compañero de cuarto llega a casa, abre el refrigerador, quiere leche de verdad, pero, oh, maldita sea, se nos acabó la leche. Entonces cierran el refrigerador, salen y se dirigen a alguna otra tienda que vende leche y, por razones que estamos inventando, no te encuentras en CVS. Unos minutos después, ambos llegan a casa, por supuesto, después de haber comprado leche. Pero claro, la leche no dura tanto, así que ahora tienes el doble de leche y seguro que algo se va a echar a perder. Como un problema horrible, horrible.

¿Por qué? Es cierto, es falso, pero esto... recuerdos entrañables de cuando me lo enseñaron. Entonces, ¿cuál es el problema fundamental aquí, si pones el dedo sobre él? Tanto a ti como a tu compañero de cuarto se les permitió inspeccionar el estado de ese refrigerador sin saber que el otro estaba a punto de hacer lo mismo. Habría sido mejor que uno de ustedes dejara una nota en el refrigerador diciendo que se había ido por leche, para que la otra persona tampoco lo hiciera. O más estrictamente, simplemente bloquea el refrigerador para que nadie más que tú pueda ver dentro hasta que hayas actualizado el estado de ese refrigerador.

Así que esto entra en juego con demasiada frecuencia en estos días cuando se trata de conjuntos de datos realmente grandes. Los Twitters del mundo, los Instagram del mundo, es probable que todos ustedes tengan el hábito de dar me gusta o subir publicaciones en esos u otros sitios. Pero si mucha gente también lo está haciendo, especialmente cuando las cosas se vuelven virales, podría haber un código como este debajo del capó que esencialmente hace lo siguiente. Aquí hay tres líneas de código Python representativo que usan SQL. La primera línea aquí selecciona la cantidad de me gusta de una tabla llamada publicaciones donde la identificación de la publicación es algo, una variable llamada ID, 1, 2, 3, 4, 5. Eso solo me dice, ¿cuál es la cantidad total de me gusta que tiene esta publicación? Luego, almaceno esa respuesta en una variable usando me gusta. Y verá esta sintaxis en el conjunto de problemas 7 cuando comience a jugar con SQL usted mismo en la biblioteca CS50.

Supongamos que su tercera línea de código es actualizar publicaciones, configurando los Me gusta como un marcador de posición, donde ese marcador de posición será Me gusta más 1. Este es el mismo problema que el ejemplo de la leche, porque si verifica cuántos me gusta hay en esta publicación, o su compañero de cuarto verifica cómo... o si verifica cuánta leche queda disponible en el refrigerador y luego se va y comienza a tomar una decisión como comprar leche, su compañero de cuarto podría, en un servidor que ejecuta el mismo código para manejar a miles y miles de personas, podría hacer la misma pregunta. ¿Cuántos me gusta tiene esta publicación actual? Suponga que la publicación tiene un millón de me gusta. Ambos ejecutan esa primera línea de código, vean eso, oh, tengo un millón de me gusta. Acabo de hacer clic en más 1 en el sitio. Por lo tanto, intenta cambiar la cantidad de me gusta con esta segunda consulta de actualización a 1 millón más 1.

Pero si ambos han tomado una decisión que se intercala con la otra persona, como sucederá absolutamente con Instagram y Twitter, que tienen miles de servidores operando en paralelo, en lugar de cambiar el número de me gusta de 1 millón a 1,000,002, podrían ambos a 1,000,001, perdiendo así uno de los conteos, porque se pierde, porque inspeccionaste el estado del refrigerador o los me gusta. Tomaste una decisión. Y luego lo actualizaste basándote en esa decisión sin darte cuenta de que la vida cambió en el medio. Tu compañero de cuarto también llegó a casa y revisó el refrigerador, o alguien más hizo clic en el voto a favor.

Así que esta es una mala situación, pero hay soluciones en SQL que no veremos esta semana, pero que se conocen como transacciones. Ese es un problema que tiene solución, y más sobre eso en una clase de base de datos de nivel superior.