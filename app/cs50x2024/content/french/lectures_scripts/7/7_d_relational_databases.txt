Allons-y et jetons un coup d'œil à certaines fonctionnalités de ces éléments. Ce que nous venons de faire, c'est présenter ça, quelque chose qui s'appelle une base de données relationnelle. Le but n'est plus de se fier à des fichiers CSV. Les fichiers CSV sont la forme de base de données la plus faible que vous pouvez utiliser. Pourquoi ? Eh bien, chaque fois que vous souhaitez rechercher des données dans un fichier CSV, vous devez l'ouvrir. Vous devez le lire. Vous devez l'itérer, ligne par ligne, à la recherche des données qui vous intéressent, puis vous avez terminé. Cela va être très lent lorsque vous avez beaucoup de données dans un fichier CSV. Et d'ailleurs, dans peu de temps, nous téléchargerons une très grande base de données sous forme de texte et nous verrons plus tard que nous pouvons mieux gérer plus de 500 mégaoctets avec ce qu'on appelle des bases de données relationnelles, des éléments logiciels que vous pouvez exécuter sur votre Mac ou PC ou sur des serveurs dans une entreprise. Ils ne font que stocker des données et vous en permettent un accès plus rapide. SQLite3 est donc simplement un programme de ligne de commande via lequel nous pouvons interagir avec ces données. Ce n'est pas très convaincant. C'est encore une fois une invite clignotante en noir et blanc, mais nous verrons aussi une interface utilisateur graphique, ou GUI, qui nous permettra de naviguer dans ces mêmes données. 

Voici comment nous sommes allés de l'avant et avons importé les données. Et .schema est la dernière commande. En fait, laissez-moi taper ça à l'invite. Pas .mode ou .import mais .schema. Et vous verrez que ce qui s'est passé automatiquement est quelque chose comme ceci : CREATE TABLE favorites. Tout ça s'est passé automatiquement lorsque j'ai importé mes données, mais un peu plus tard, nous ferons cela plus manuellement nous-mêmes. 

Alors, où est-ce que cela nous amène en termes de fonctionnalités ? Eh bien, dans le monde du stockage de données, qu'il s'agisse de stocker les utilisateurs qui se sont inscrits à vos sites Web ou le nombre de likes qu'un message sur Instagram a obtenu ou toute forme de données que vous souhaiterez peut-être lire ou écrire, il existe quatre opérations fondamentales dans le monde. CRUD est une façon un peu grossière de s'en souvenir. Cela signifie Créer, Lire, Mettre à jour, Supprimer. Et j'ose dire qu'avec ces quatre opérations, vous pouvez faire tout ce que vous voulez en matière de données. Créer ces données, les lire, les mettre à jour ou les supprimer. 

Maintenant, dans le monde de SQL, ou Structured Query Language, ou S-Q-L, c'est juste un autre langage de programmation. Il a tendance à être utilisé uniquement dans le contexte de bases de données, mais vous pouvez l'utiliser pour résoudre des problèmes similaires à Python, mais dans le contexte des données qui vous intéressent. Ainsi, avec SQL, ces quatre opérations CRUD ont en fait différents mots-clés qui leur sont associés. Il s'agit de ces mots-clés : INSERT, SELECT, UPDATE, DELETE. C'est-à-dire que, contrairement à Python, qui met à votre disposition des centaines de fonctions, aujourd'hui est plutôt sympa dans la mesure où SQL dispose d'une douzaine de fonctions que vous pouvez utiliser, quelques dizaines de fonctions au total. Beaucoup plus gérable, et ce sont les quatre fonctions que nous utiliserons le plus fréquemment. 

Ensuite, comment créez-vous un tableau ? Eh bien, qu'est-ce que ça veut dire ? Eh bien, une base de données relationnelle est littéralement ça. C'est comme une version plus sophistiquée de Google Sheets ou de Microsoft Excel ou d'Apple Numbers qui vous permet de stocker toutes vos données en lignes et en colonnes. Mais elle vous offre ces quatre fonctions et plus encore, vous permettant de sélectionner des données qui vous intéressent, ou de supprimer, de mettre à jour ou d'insérer des données qui vous intéressent également. Nous verrons donc dans peu de temps que ce sera la syntaxe par laquelle SQL vous permettra de créer un nouveau tableau. Dans Google Sheets, vous iriez littéralement à l'icône plus et diriez Nouvelle feuille. Dans SQL, vous exprimeriez cela de manière plus programmatique avec une ligne de code comme celle-ci. 

Mais vous allez devoir prendre quelques décisions en cours de route, et c'est parce que SQL a ses propres types de données. Maintenant, heureusement, ils rappellent assez C et Python. Mais il y en a cinq principaux ici. Faisons simplement quelques exemples. Donc d'abord, INTEGER. Si vous savez à l'avance que vous souhaitez stocker un tas d'informations dans une base de données comme l'âge de quelqu'un ou le nombre de likes d'un message ou tout ce qui se prête à un entier, SQL prend en charge un type de données entier. Mais dans certaines versions de SQL, vous avez en fait une décision à prendre. Voulez-vous un entier, un petit entier ou un grand entier ? Et ceux-ci parlent, comme en C, de la taille, du nombre de bits utilisés pour le stocker. Un entier est de 32 bits. Un grand entier est de 64 bits. Un petit entier est inférieur à ces deux-là. 

Maintenant, nous utilisons, pour la classe, quelque chose appelé SQLite. C'est une version gratuite et open source de SQL, très conviviale. Mais il y en a d'autres dont vous avez peut-être entendu parler. Donc, si vous avez déjà entendu parler de la société Oracle, son gagne-pain est un programme de base de données appelé Oracle, qui est une base de données SQL qui permet aux entreprises de stocker d'énormes quantités de données, de sélectionner, de créer, de mettre à jour et de supprimer des données à l'aide de logiciels qu'elles ont écrits. MySQL, Postgres, MariaDB, Microsoft Access Server, SQL Server et bien d'autres sont tous des exemples de serveurs SQL. Et ils prendront tous en charge les types de données, généralement comme ça. 

Il se trouve que nous vous montrons ceux de Postgres, qui est un logiciel open source très populaire que vous pouvez utiliser sur Internet, par exemple pour les projets finaux. Les nombres réels, comme dans Python ou C, sont similaires dans l'esprit aux nombres flottants. Cependant, vous avez plusieurs options. L'un est un nombre réel, qui utilise 32 bits. Un autre s'appelle double précision. C'est en fait deux mots, mais il vous donne également 64 bits, pour vous donner plus de précision numériquement. 

Ensuite, vous avez ce fourre-tout connu sous le nom de numérique dans SQL, par lequel si vous avez un nombre qui est essentiellement numérique, mais qui n'est pas seulement un entier, les catégories - cette catégorie englobe des éléments tels que des valeurs booléennes, des dates, qui ont un format prédéfini comme AAAA, quatre chiffres implémentant généralement une année. Cela serait considéré comme numérique ici, tout comme une date et une heure, qui ont quelque chose comme 00:00:00 pour les heures, les minutes et les secondes. Et puis vous avez aussi d'autres valeurs. 

Ce qui est bien avec ce type numérique, c'est que vous pouvez réellement résoudre le problème des nombres flottants dans Python et C. Rappelez-vous que les nombres flottants ou même les doubles en C ont en fin de compte une précision finie, ce qui est mauvais en termes de valeurs qui ne s'additionnent pas tout à fait comme vous le souhaitez. Mais avec les types de données numériques et les bases de données, vous pouvez spécifier exactement combien de chiffres vous voulez avant et après la virgule décimale, au maximum. Donc, si vous faites des opérations avec des informations financières ou scientifiques, vous pouvez être super, super précis grâce à ce type de données dans la base de données. Nous avons donc finalement résolu un problème par rapport à ces autres langages. 

Texte. Lorsqu'il s'agit de stocker des données dans une base de données, vous pouvez spécifier que vos colonnes peuvent être soit des caractères, qui ne sont pas des caractères ou des caractères individuels. Vous spécifiez littéralement n, le nombre de caractères que chaque cellule de cette colonne doit comporter. Vous ne faites jamais ça dans Excel. Vous ne faites jamais ça dans Google Sheets ou Apple Numbers. Dans une base de données, cependant, vous pouvez indiquer à la base de données de manière plus précise : Je veux stocker deux caractères dans chaque cellule d'une colonne. 

Pourquoi ? Eh bien, peut-être comme les codes d'état américains. Si vous avez MA pour Massachusetts ou CA pour Californie, il peut être intéressant d'indiquer à la base de données que vous pouvez stocker, au minimum et au maximum, deux caractères pour chaque valeur que je vais vous donner. Varchar est un peu différent. Il s'agit d'un nombre variable de caractères. Si votre colonne peut avoir quelques caractères ou beaucoup de caractères en fonction de ce que certains humains tapent, vous pouvez donner une borne supérieure n au nombre de caractères qui seront stockés dans chaque cellule. Donc, si vous ne savez pas à l'avance quelle sera la longueur de l'adresse e-mail d'un utilisateur ou quelle sera la longueur de mon nom ou du vôtre à l'avance, vous pouvez spécifier varchar, puis choisir une borne supérieure, une valeur que, euh, personne n'aura plus de 20 caractères dans