Parlons maintenant d'une autre particularité du langage C, qui est les types de données et les variables. Quand je dis "unique au C", je fais référence au fait que si vous êtes programmeur depuis longtemps, vous n'avez probablement pas eu à vous préoccuper des types de données si vous avez utilisé des langages de programmation modernes. Les langages modernes comme PHP et JavaScript, que nous verrons également un peu plus tard dans le cours, ne nécessitent pas de spécifier le type de données d'une variable lorsque vous l'utilisez. Vous déclarez simplement la variable et commencez à l'utiliser. Si c'est un entier, il sait que c'est un entier. Si c'est un caractère, il sait que c'est un caractère. Si c'est un mot, il sait que c'est une chaîne de caractères, soi-disant. Mais en C, qui est un langage plus ancien, nous devons spécifier le type de données de chaque variable que nous créons la première fois que nous utilisons cette variable. Ainsi, C propose des types de données intégrés. Familiarisons-nous avec certains d'entre eux. Ensuite, nous parlerons aussi un peu des types de données que nous avons écrits pour vous, afin que vous puissiez les utiliser dans CS50.

Le premier est int. Le type de données int est utilisé pour les variables qui stockeront des valeurs entières. Donc 1, 2, 3, -1, 2, 3, etc. Les entiers, ce que vous devez garder à l'esprit, occupent toujours quatre octets de mémoire, soit 32 bits. Il y a huit bits dans un octet. Cela signifie que la plage des valeurs qu'un entier peut stocker est limitée à ce qui peut tenir dans 32 bits d'informations. Il a été décidé il y a longtemps que nous diviserions cette plage de 32 bits en entiers négatifs et entiers positifs, chacun obtenant la moitié de la plage. Donc, la plage de valeurs que nous représentons avec un entier va de -2 à la puissance 31 jusqu'à 2 à la puissance 31 moins 1, car vous avez également besoin d'une place pour le zéro. Donc, en gros, la moitié des valeurs possibles que vous pouvez mettre dans un int sont négatives et l'autre moitié sont positives. En gros, cela va de -2 milliards à environ +2 milliards, plus ou moins quelques centaines de millions. C'est ce que vous pouvez stocker dans une variable entière.

Nous avons également quelque chose appelé unsigned int. Les unsigned int ne sont pas un type de variable séparé. En réalité, unsigned est ce qu'on appelle un qualificateur. Il modifie légèrement le type de données entier. Et dans ce cas, ce que signifie unsigned — et vous pouvez également utiliser unsigned avec d'autres types de données, int n'est pas le seul — ce que signifie unsigned c'est que cela double la plage de valeurs positives qu'un entier peut prendre, au détriment de ne plus permettre les valeurs négatives. Donc, si vous avez des nombres que vous savez dépasseront 2 milliards mais seront inférieurs à 4 milliards, par exemple — ce qui est 2 à la puissance 32 — vous pourriez vouloir utiliser un unsigned int si vous savez que votre valeur ne sera jamais négative. Vous utiliserez occasionnellement des variables unsigned dans CS50, c'est pourquoi je le mentionne ici. Mais encore une fois, la plage de valeurs que vous pouvez représenter avec un entier unsigned, c'est-à-dire, non signé, par rapport à un entier régulier est de 0 à 2 à la puissance 32 moins 1, soit environ 0 à 4 milliards. Vous avez donc effectivement doublé la plage positive que vous pouvez stocker, mais vous avez renoncé à toutes les valeurs négatives. En passant, unsigned n'est pas le seul qualificateur que nous pourrions voir pour les types de données des variables. Il y a aussi des choses appelées short, long et const. Nous verrons const un peu plus tard dans le cours. Short et long, nous ne les verrons probablement pas. Mais sachez qu'il existe d'autres qualificateurs. Unsigned n'est pas le seul. Mais c'est le seul dont nous allons parler pour l'instant.

D'accord. Nous avons couvert les entiers. Que se passe-t-il ensuite? Les chars. Les chars sont utilisés pour les variables qui stockent des caractères individuels. Char est l'abréviation du mot anglais character. Les caractères occupent toujours un octet de mémoire, soit 8 bits. Cela signifie qu'ils ne peuvent contenir que des valeurs dans la plage de -2 à la puissance 7, soit -128, à 2 à la puissance 7 moins 1, soit 127. Grâce à ASCII, il a été décidé il y a longtemps de mapper ces nombres positifs de 0 à 127 sur divers caractères qui existent tous sur notre clavier. Comme nous le verrons plus tard dans le cours, et que vous finirez probablement par mémoriser à un moment donné, la lettre majuscule A, par exemple — le caractère A majuscule — correspond au nombre 65. Et la raison est que c'est ce que le standard ASCII a assigné. La lettre a minuscule est 97. Le caractère 0 pour lorsque vous tapez effectivement le caractère, et non pas pour représenter le nombre zéro, est 48. Vous apprendrez quelques-uns de ces codes au fur et à mesure. Vous en aurez certainement besoin un peu plus tard dans CS50.

AQUI

Le prochain type de données majeur est les nombres à virgule flottante. Les nombres à virgule flottante sont également connus sous le nom de nombres réels. Ce sont essentiellement des nombres qui ont un point décimal. Les valeurs à virgule flottante, comme les entiers, sont également contenues dans 4 octets de mémoire. Il n'y a pas de tableau ici, pas de ligne numérique, car décrire la plage d'un float n'est pas exactement clair ou intuitif. Il suffit de dire que vous avez 32 bits avec lesquels travailler. Et si vous avez un nombre comme pi, qui a une partie entière de 3 et une partie décimale, ou fractionnaire, de 0,14159, etc., vous devez pouvoir représenter l'ensemble — la partie entière et la partie décimale. Alors, que pensez-vous que cela pourrait signifier ? Une chose est que si la partie décimale devient de plus en plus longue, si j'ai une très grande partie entière, je pourrais ne pas être aussi précis avec la partie décimale. Et c'est vraiment la limitation d'un float. Les floats ont un problème de précision. Nous n'avons que 32 bits avec lesquels travailler, donc nous ne pouvons être précis qu'à un certain degré avec notre partie décimale. Nous ne pouvons pas nécessairement avoir une partie décimale précise à 100 ou 200 chiffres, car nous n'avons que 32 bits. C'est donc une limitation d'un float. Heureusement, il existe un autre type de données appelé double, qui traite en quelque sorte ce problème. Les doubles, comme les floats, sont également utilisés pour stocker des nombres réels ou des valeurs à virgule flottante. La différence est que les doubles ont une double précision. Ils peuvent contenir 64 bits de données, soit huit octets. Qu'est-ce que cela signifie ? Eh bien, cela signifie que nous pouvons être beaucoup plus précis avec le point décimal. Au lieu d'avoir pi avec sept décimales, par exemple, avec un float, nous pouvons peut-être avoir jusqu'à 30 décimales. Si c'est important, vous voudrez peut-être utiliser un double plutôt qu'un float. En gros, si vous travaillez sur quelque chose où avoir une très longue partie décimale et beaucoup de précision est important, vous voudrez probablement utiliser un double plutôt qu'un float. Pour la plupart de votre travail dans CS50, un float devrait suffire. Mais sachez que les doubles existent comme une manière de traiter le problème de précision en vous offrant 32 bits supplémentaires pour vos nombres.

Maintenant, ce n'est pas un type de données. C'est un type, et il s'appelle void. Je le mentionne ici parce que nous l'avons probablement vu plusieurs fois déjà dans CS50, et vous vous demandez peut-être ce que cela signifie. Donc, void est un type. Il existe, mais ce n'est pas un type de données. Nous ne pouvons pas créer une variable de type void et lui assigner une valeur. Mais les fonctions, par exemple, peuvent avoir un type de retour void. En gros, si vous voyez une fonction avec un type de retour void, cela signifie qu'elle ne renvoie pas de valeur. Pouvez-vous penser à une fonction courante que nous avons utilisée jusqu'à présent dans CS50 et qui ne renvoie pas de valeur ? Printf est une de ces fonctions. Printf ne renvoie en réalité rien. Il imprime quelque chose à l'écran, et c'est essentiellement un effet secondaire de ce que fait printf. Mais il ne vous donne pas de valeur en retour. Vous ne capturez pas le résultat et ne le stockez pas dans une variable pour l'utiliser plus tard. Il imprime simplement quelque chose à l'écran et c'est tout. Nous disons donc que printf est une fonction void. Elle ne retourne rien. La liste des paramètres d'une fonction peut également être void. Et vous avez également vu cela assez souvent dans CS50. Int main(void). Cela vous dit quelque chose ? En gros, cela signifie que main ne prend aucun paramètre. Il n'y a aucun argument passé à main. Plus tard, nous verrons qu'il est possible de passer des arguments à main, mais jusqu'à présent ce que nous avons vu est int main(void). Main ne prend simplement aucun argument. Et nous spécifions cela en disant void. Nous sommes juste très explicites sur le fait qu'il ne prend aucun argument. Pour l'instant, il suffit de dire que void sert essentiellement de substitut pour penser à rien. Cela ne fait rien vraiment. Il n'y a pas de valeur de retour ici. Il n'y a pas de paramètres ici. C'est void. C'est un peu plus complexe que cela, mais cela devrait suffire pour la majeure partie du cours. Et j'espère qu'à présent vous avez une meilleure idée de ce qu'est void.

Donc, ce sont les cinq types que vous rencontrerez qui sont intégrés au C. Mais dans CS50, nous avons aussi une bibliothèque, CS50.h, que vous pouvez inclure. Elle vous fournira deux types supplémentaires que vous pourrez probablement utiliser dans vos devoirs ou en programmation en général. Le premier est bool. Donc, le type de données booléen, bool, est utilisé pour les variables qui stockent une valeur booléenne. Si vous avez déjà entendu ce terme, vous savez peut-être qu'une valeur booléenne peut seulement contenir deux valeurs distinctes : vrai et faux. Maintenant, cela semble assez fondamental, non ? C'est un peu surprenant que cela n'existe pas en tant que type intégré au C. Dans de nombreux langages modernes, bien sûr, les booléens sont un type de données standard. Mais en C, ce n'est pas le cas. Mais nous l'avons créé pour vous. Donc, si vous devez créer une variable dont le type est bool, assurez-vous simplement d'inclure CS50.h au début de votre programme, et vous pourrez créer des variables de type bool. Si vous oubliez d'inclure CS50.h et que vous commencez à utiliser des variables de type booléen, vous pourriez rencontrer des problèmes lors de la compilation de votre programme. Donc, soyez attentif à cela. Et peut-être que vous pourrez simplement résoudre les problèmes en incluant CS50.h. L'autre type de données majeur que nous fournissons dans la bibliothèque CS50 est string. Alors, qu'est-ce qu'une chaîne de caractères ? Les chaînes de caractères sont vraiment juste des mots. Ce sont des collections de caractères. Ce sont des mots. Ce sont des phrases. Ce sont des paragraphes. Cela peut même être des livres entiers. Des séries de caractères très courtes à très longues. Si vous avez besoin d'utiliser des chaînes de caractères, par exemple pour stocker un mot, assurez-vous simplement d'inclure CS50.h au début de votre programme afin de pouvoir utiliser le type string. Vous pouvez ensuite créer des variables dont le type de données est string. Maintenant, plus tard dans le cours, nous verrons également que ce n'est pas toute l'histoire. Nous rencontrerons des choses appelées structures, qui permettent de regrouper ce qui peut être un entier et une chaîne en une seule unité. Nous pourrons utiliser cela à des fins qui pourraient être utiles plus tard dans le cours. Nous apprendrons également les types définis, qui vous permettent de créer vos propres types de données. Nous n'avons pas besoin de nous en préoccuper pour l'instant. Mais sachez que c'est quelque chose qui se profile à l'horizon, qu'il y a beaucoup plus à tout ce qui concerne les types que ce que je vous explique maintenant.

Maintenant que nous avons appris un peu sur les types de données de base et les types de données CS50, parlons de comment travailler avec les variables et les créer en utilisant ces types de données dans nos programmes. Si vous voulez créer une variable, il vous suffit de faire deux choses. D'abord, vous devez lui donner un type. La deuxième chose à faire est de lui donner un nom. Une fois que vous avez fait cela et ajouté un point-virgule à la fin de cette ligne, vous avez créé une variable. Voici deux exemples. int number; char letter;. Que fais-je ici ? J'ai créé deux variables. La première, le nom de la variable est number. Et number est capable de contenir des valeurs de type entier, car son type est int. Letter est une autre variable qui peut contenir des caractères, car son type de données est char. Plutôt simple, non ? Si vous vous trouvez dans une situation où vous devez créer plusieurs variables du même type, vous n'avez besoin de spécifier le nom du type qu'une seule fois. Ensuite, il vous suffit de lister autant de variables de ce type que vous en avez besoin. Donc, je pourrais par exemple, ici dans cette troisième ligne de code, dire int height;, nouvelle ligne. int width;. Et cela fonctionnerait aussi. J'aurais toujours deux variables appelées height et width, chacune étant un entier. Mais je peux, grâce à la syntaxe du C, consolider cela en une seule ligne. int height, width; C'est la même chose. J'ai créé deux variables, une appelée height et une appelée width, toutes deux capables de contenir des valeurs de type entier. De même ici, je peux créer trois valeurs à virgule flottante à la fois. Je peux peut-être créer une variable appelée square_root_of_2 — qui contiendra probablement la valeur flottante — cette représentation de la racine carrée de 2, square_root_of_3 et pi. J'aurais pu faire cela sur trois lignes séparées. float square_root_2; float square_root_3; float pi; et cela fonctionnerait aussi. Mais encore une fois, je peux consolider cela en une seule ligne de code. Cela rend les choses un peu plus courtes, moins encombrantes. En général, il est bon de ne déclarer une variable que lorsque vous en avez besoin. Nous en parlerons un peu plus tard dans le cours lorsque nous discuterons de la portée. Donc, il n'est pas nécessaire de créer toutes vos variables au début du programme, ce que certaines personnes ont pu faire dans le passé, ou ce qui était certainement une pratique de codage très courante il y a plusieurs années lorsqu'on travaillait avec le C. Vous voudrez peut-être simplement créer une variable juste au moment où vous en avez besoin.

Très bien. Nous avons créé des variables. Comment les utiliser ? Après avoir déclaré une variable, nous n'avons plus besoin de spécifier le type de données de cette variable. En fait, si vous le faites, vous pourriez vous retrouver avec des conséquences étranges que nous allons survoler pour l'instant. Mais il suffit de dire que des choses étranges vont commencer à se produire si vous redéclarez des variables avec le même nom encore et encore. Donc ici j'ai quatre lignes de code. Et j'ai quelques commentaires juste pour indiquer ce qui se passe sur chaque ligne, pour vous aider à comprendre ce qui se passe. Donc int number;. Vous avez vu cela précédemment. C'est une déclaration de variable. J'ai maintenant créé une variable appelée number qui est capable de contenir des valeurs de type entier. Je l'ai déclarée. La ligne suivante, j'assigne une valeur à number. number = 17; Que se passe-t-il là ? Je mets le nombre 17 dans cette variable. Donc, si je imprime plus tard le contenu de number, il me dira que c'est 17. J'ai donc déclaré une variable, puis je lui ai assigné une valeur. Nous pouvons répéter le processus avec char letter;. C'est une déclaration. letter = 'H'; C'est une assignation. Plutôt simple aussi. Maintenant, ce processus peut sembler un peu absurde. Pourquoi faisons-nous cela en deux lignes de code ? Y a-t-il une meilleure manière de le faire ? En fait, il y en a une. Parfois, vous pourriez voir cela appelé initialisation. C'est lorsque vous déclarez une variable et lui assignez une valeur en même temps. C'est en réalité une chose assez courante à faire. Lorsque vous créez une variable, vous souhaitez généralement lui donner une valeur de base. Même si c'est 0 ou autre chose. Vous lui donnez juste une valeur. Vous pouvez initialiser une variable. int number = 17 est équivalent aux deux premières lignes de code ci-dessus. char letter = 'H' est équivalent aux troisième et quatrième lignes de code ci-dessus. La chose la plus importante à retenir lorsque nous déclarons et assignons des variables est qu'après l'avoir déclarée, notez que je n'utilise plus le type de données. Je ne dis pas int number = 17 sur la deuxième ligne de code, par exemple. Je dis simplement number = 17. Encore une fois, redéclarer une variable après l'avoir déjà déclarée peut entraîner des conséquences étranges. Alors soyez prudent avec cela. Je suis Doug Lloyd, et c'est CS50.