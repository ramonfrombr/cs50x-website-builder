D'accord. Voyons maintenant si nous ne pouvons pas disséquer quelques différences dans ce langage en citant des exemples en parcourant un certain nombre d'exemples que nous avons faits au cours des semaines précédentes. Et pour faciliter la comparaison avant et après, permettez-moi d'aller de l'avant et d'utiliser cette fonctionnalité de l'IDE. Il s'avère que si vous cliquez sur cette petite icône blanche ici, vous pouvez diviser votre écran comme ceci. Je vais donc adopter l'habitude d'ouvrir un fichier sur la gauche en C et un fichier sur la droite en Python à la place.

Alors allons dans, par exemple, ce répertoire appelé Un, qui contient tous mes programmes de la semaine 1 écrits en C, ainsi que quelques nouveaux pour aujourd'hui que nous écrirons principalement en temps réel. Voici donc un programme de la semaine 1 qui faisait simplement cela. Il obtient le nom de l'utilisateur.

Comment allons-nous implémenter cela en Python ? Eh bien, permettez-moi d'aller de l'avant et de créer un fichier appelé string.py. Et comme précédemment, je vais aller de l'avant et convertir ceci de avant en après. Cependant, cette fonction get_string est, pour le moment, quelque chose que nous vous donnons dans CS50. Il existe une bibliothèque CS50 pour Python. Mais nous ne l'utiliserons que pour une semaine ou deux. Et nous enlèverons cette roue d'entraînement.

Pour l'utiliser, vous pouvez soit dire tout simplement import cs50, ce qui est similaire à include cs50.h. Ou vous pouvez dire plus explicitement de cs50, importer la fonction réelle que vous voulez, comme get_string. Je vais donc aller de l'avant et le faire de manière plus explicite pour le moment afin de pouvoir ensuite faire s obtient get_string. Comment vous appelez-vous point d'interrogation ? Et je vais mettre une barre oblique inverse ici, car get_string n'est pas print. Il ne vous donne pas présomptueusement une nouvelle ligne. Et puis, je vais aller de l'avant et imprimer le nom de l'utilisateur - bonjour, virgule plus s.

Je vais enregistrer mon fichier, descendre vers ma fenêtre de terminal et exécuter Python sur string.py. Je vais ensuite aller de l'avant et, lorsque vous y êtes invité, taper mon nom David. Et j'espère que cela va dire bonjour, David. Juste pour m'échauffer ici aussi, nous n'avons pas besoin d'utiliser l'opérateur plus. Je peux, à la place, changer ceci en un deuxième argument, en me débarrassant de l'espace à l'intérieur de bonjour et en réexécutant maintenant ce programme. Et j'espère voir exactement le même effet - par exemple, si Brian tape son nom, bonjour, Brian.

Et si je veux vraiment me la jouer, rappelez-vous qu'il existe une autre façon de le faire. Si je veux brancher le nom d'utilisateur ici, comme dans Scratch, que puis-je mettre entre les accolades ?

AUDIENCE : S.

DAVID MALAN : S, qui est le nom de la variable que j'ai choisie, mais remarquez ceci. Si je suis un peu bâclé et que j'utilise simplement les accolades et que j'exécute ensuite Python de string.py, et que je tape, par exemple, le nom d'Emma, ce n'est pas le nom d'Emma. Il me prend au pied de la lettre. Je dois le transformer en une chaîne f ou une chaîne de format, même si cette syntaxe semble étrange. Maintenant, si je le relance et tape Emma, nous devrions espérer saluer, en effet, Emma - juste quelques échauffements pour faire correspondre l'un à l'autre. Mais voyons ce que nous pouvons faire d'autre ici en Python.