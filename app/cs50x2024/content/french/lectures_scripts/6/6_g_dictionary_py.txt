Mais attendez. Ce n'est pas tout. Qu'en est-il de Pset5 ? Dans PSet5, rappelez-vous, vous avez implémenté une table de hachage. Et en effet, vous avez décidé de mettre en œuvre la liste chaînée sous-jacente, le tableau, etc. Eh bien, vous savez quoi ? Laissez-moi aller de l'avant et créer un autre fichier, cette fois, en Python – ce n'était pas autorisé il y a deux semaines, mais c'est autorisé maintenant.

Et je vais continuer et mettre cela en œuvre comment ? Eh bien, j'avais le choix entre plusieurs structures de données différentes en Python – dict pour dictionnaire, liste, plage, etc., puis également un ensemble. Et je pourrais utiliser dict ou dictionnaire. Mais en fait, je vais définir, car qu'est-ce qu'un dictionnaire ? C'est un ensemble de mots uniques. Je vais donc utiliser quelque chose appelé ensembles.

Je vais donc continuer et me donner une variable appelée mots. Et je vais l'initialiser sur un ensemble vide, si vous voulez, juste un conteneur qui peut grandir pour contenir des valeurs. Mais juste au cas où je me trompe et que je mette des doublons là-dedans, ça va. L'ensemble va s'en débarrasser pour moi.

Et puis, rappelez-vous pour – ou désolé – pour ce programme, pas speller.py, mais plutôt dictionary.py pour correspondre à dictionary.c, nous avions quelques fonctions. Maintenant, en Python, la façon dont vous implémentez une fonction n’est pas en disant int main void ou quelque chose comme ça. Au lieu de cela, dites simplement def pour define, puis le nom de la fonction que vous souhaitez, comme check, puis les entrées de cette fonction, comme word.

Et je reviendrai là-dessus. Et je vais juste dire TODO pour un moment, parce que je vais continuer et prédéfinir mes autres fonctions, comme load, j'ai pris un nom de fichier de dictionnaire comme entrée. Je vais donc continuer et revenir en arrière pour faire ça. J'ai ensuite eu une fonction size – n'a pris aucune entrée. Je vais continuer et faire ça. Et puis, ici, j'avais une fonction unload. Je vais donc continuer et revenir en arrière pour faire ça.

Alors, comment implémenter chacune de ces fonctions maintenant ? Eh bien, commençons par la charge. Après tout, si le dictionnaire m'est remis, la première chose que je voulais faire dans Pset4 – ou Pset5 – était de le charger en mémoire. Eh bien, il s'avère qu'en Python, vous pouvez faire quelque chose comme cela – file = open(dictionay), qui est si proche de C. Mais il est ouvert au lieu de fopen. Et je vais l'ouvrir en mode lecture. Donc, jusqu'à présent, cela ressemble en fait beaucoup à la version C.

Mais maintenant, si je veux parcourir tous les mots du fichier, il s'avère que je peux utiliser une boucle for, car une boucle for en Python est bien plus puissante qu'une boucle for en C. Je peux littéralement dire for line in file. Et puis, ici, je peux continuer et ajouter à mon ensemble de mots, qui se trouve dans cette variable appelée words, en utilisant littéralement une fonction appelée add, cette ligne particulière – c'est-à-dire le mot du fichier.

Et puis, vous savez, après cela, file.close est la façon dont je vais le fermer. Et puis, tout semble bien. Je vais continuer et retourner True. Maintenant, il y a un bug ici pour le moment. Chaque ligne du dictionnaire se terminait en fait par quel caractère techniquement, même si vous ne le voyez pas, en soi ?

AUDITOIRE : Une nouvelle ligne.

DAVID MALAN : Une nouvelle ligne, d'accord ? Chaque mot du fichier se terminait par une barre oblique inverse n, même si lorsque vous ouvrez le fichier, nous, les humains, ne le voyons pas. Mais c'est là. Donc, c'est bon. Si vous souhaitez continuer et supprimer la nouvelle ligne de fin, pour ainsi dire, à la fin de chaque ligne, vous pouvez simplement accéder à la ligne du fichier actuel – disons rstrip, où rstrip signifie supprimer l'inversion. Supprimez donc de la fin de la chaîne quel caractère ? Barre oblique inverse n – et ça va maintenant regarder la ligne, couper la barre oblique inverse n, et passer en entrée à cette fonction add le mot du dictionnaire.

D'accord. Que reste-t-il ? Eh bien, ici, comment vérifier le dictionnaire ? Eh bien, il s'avère qu'en Python, vous pouvez utiliser des conditions encore plus puissamment qu'en C. Et si vous voulez savoir si un mot est dans une variable, comme un mot est dans un ensemble appelé mots, nous allons simplement poser la question, si le mot dans les mots, vous savez quoi ? Allez-y et revenez vrai. Sinon, allez-y et retournez faux, bien que léger bug – nous avons également dû gérer les majuscules dans Pset5, n'est-ce pas ? L'entrée de l'utilisateur à partir du fichier, le texte, peut être en majuscules ou en minuscules.

Pas de problème – vous voulez mettre un mot en minuscules ? Vous n'êtes pas obligé de le faire caractère par caractère. Appelez simplement word, qui est le mot que vous recherchez, point, ce qui signifie entrer à l'intérieur, comme une structure en C. Et ici, appelez une fonction intégrée à cette chaîne appelée lower.

D'accord. Eh bien, j'en ai un peu marre d'implémenter ça. Alors terminons ça. Permettez-moi de continuer. Et comment vérifier combien de mots sont dans mon dictionnaire ? Eh bien, demandez simplement quelle est la longueur de cet ensemble. Et comment procéder pour la libération – comment procéder pour libérer toute la mémoire utilisée par votre programme en Python ? Comment annuler les effets ? Eh bien, vous ne le faites pas. C'est fait pour vous. Nous allons donc revenir vrai. Donc ceci, alors, est – je suis désolé de le dire – je veux dire, excité de le dire – est l'intégralité de Pset5 implémenté en Python.