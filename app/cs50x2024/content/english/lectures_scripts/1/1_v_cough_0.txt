All right, let's do a different example, this time based on an idea from last time-- that of abstraction. Recall that in Scratch, there was no puzzle piece for coughing, to make the cat [COUGHS] on the screen. And so we implemented this, really, with our own custom puzzle piece, ultimately. So let me create a program that's called cough0.c. That's a generous definition of inactivity, but OK. Let me reload the screen. When in doubt in CS50, as in life, reload. That will probably fix. Unfortunately, with programming and the internet, that sometimes happens. So in a moment, what I'm going to go ahead and do is translate that idea from Scratch of implementing the notion of coughing. But instead of the say block, I'm going to use the printf block, or the printf function. And then I'm going to go ahead and design this version of code slightly better and slightly better each time. So I'm going to go ahead and open up a file cough0.c. And I'm going to go ahead and include, let's say, stdio.h. I'm going to go ahead and do int main void, which again, is just our boiler plate or copy/paste for today. I'm going to go ahead, then, and say printf, quote unquote, cough with a new line. And recall, in Scratch I wanted this to happen three times, so I'm going to do it like this-- cough, cough, cough. All right, I'm going to give myself a terminal window here at the bottom so that I can now go ahead and say make cough0, Enter. Nothing bad seems to happen. ./cough0 and cough, cough, cough. So last week, I claimed that, eh, you can design this better, right? Anytime you're copying and pasting, odds are you should start to resist that temptation, because it's going to lead to messy code, longer code than it needs to be. What's the solution to this problem from last week? AUDIENCE: A loop. DAVID MALAN: Yeah, a loop, a for loop.